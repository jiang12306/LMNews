// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Qiwen.pb.h"
// @@protoc_insertion_point(imports)

@implementation QiwenRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [QiwenRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL ErrCodeIsValidValue(ErrCode value) {
  switch (value) {
    case ErrCodeErrNone:
    case ErrCodeErrCannotdecode:
    case ErrCodeErrCannotdecodein:
    case ErrCodeErrCannotadddelmodify:
    case ErrCodeErrArticlenotexist:
    case ErrCodeErrCannotsendsms:
    case ErrCodeErrTimelimit:
    case ErrCodeErrCountlimit:
    case ErrCodeErrPhonecannotreg:
    case ErrCodeErrPhonesmsnotequal:
    case ErrCodeErrOldpwdnotequal:
    case ErrCodeErrPwdsetfail:
    case ErrCodeErrNotlogined:
    case ErrCodeErrPhonenumnotreg:
    case ErrCodeErrPhonenumhavereg:
    case ErrCodeErrUidnotexist:
    case ErrCodeErrWxexist:
    case ErrCodeErrQqexist:
    case ErrCodeErrCommentnotexist:
    case ErrCodeErrAuthornotequ:
    case ErrCodeErrParaminvalieformat:
    case ErrCodeErrUnknow:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromErrCode(ErrCode value) {
  switch (value) {
    case ErrCodeErrNone:
      return @"ErrCodeErrNone";
    case ErrCodeErrCannotdecode:
      return @"ErrCodeErrCannotdecode";
    case ErrCodeErrCannotdecodein:
      return @"ErrCodeErrCannotdecodein";
    case ErrCodeErrCannotadddelmodify:
      return @"ErrCodeErrCannotadddelmodify";
    case ErrCodeErrArticlenotexist:
      return @"ErrCodeErrArticlenotexist";
    case ErrCodeErrCannotsendsms:
      return @"ErrCodeErrCannotsendsms";
    case ErrCodeErrTimelimit:
      return @"ErrCodeErrTimelimit";
    case ErrCodeErrCountlimit:
      return @"ErrCodeErrCountlimit";
    case ErrCodeErrPhonecannotreg:
      return @"ErrCodeErrPhonecannotreg";
    case ErrCodeErrPhonesmsnotequal:
      return @"ErrCodeErrPhonesmsnotequal";
    case ErrCodeErrOldpwdnotequal:
      return @"ErrCodeErrOldpwdnotequal";
    case ErrCodeErrPwdsetfail:
      return @"ErrCodeErrPwdsetfail";
    case ErrCodeErrNotlogined:
      return @"ErrCodeErrNotlogined";
    case ErrCodeErrPhonenumnotreg:
      return @"ErrCodeErrPhonenumnotreg";
    case ErrCodeErrPhonenumhavereg:
      return @"ErrCodeErrPhonenumhavereg";
    case ErrCodeErrUidnotexist:
      return @"ErrCodeErrUidnotexist";
    case ErrCodeErrWxexist:
      return @"ErrCodeErrWxexist";
    case ErrCodeErrQqexist:
      return @"ErrCodeErrQqexist";
    case ErrCodeErrCommentnotexist:
      return @"ErrCodeErrCommentnotexist";
    case ErrCodeErrAuthornotequ:
      return @"ErrCodeErrAuthornotequ";
    case ErrCodeErrParaminvalieformat:
      return @"ErrCodeErrParaminvalieformat";
    case ErrCodeErrUnknow:
      return @"ErrCodeErrUnknow";
    default:
      return nil;
  }
}

BOOL GenderTypeIsValidValue(GenderType value) {
  switch (value) {
    case GenderTypeGenderUnknown:
    case GenderTypeGenderMale:
    case GenderTypeGenderFemale:
    case GenderTypeGenderOther:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromGenderType(GenderType value) {
  switch (value) {
    case GenderTypeGenderUnknown:
      return @"GenderTypeGenderUnknown";
    case GenderTypeGenderMale:
      return @"GenderTypeGenderMale";
    case GenderTypeGenderFemale:
      return @"GenderTypeGenderFemale";
    case GenderTypeGenderOther:
      return @"GenderTypeGenderOther";
    default:
      return nil;
  }
}

BOOL ListTypeIsValidValue(ListType value) {
  switch (value) {
    case ListTypeTRecommend:
    case ListTypeTHot:
    case ListTypeTFollow:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromListType(ListType value) {
  switch (value) {
    case ListTypeTRecommend:
      return @"ListTypeTRecommend";
    case ListTypeTHot:
      return @"ListTypeTHot";
    case ListTypeTFollow:
      return @"ListTypeTFollow";
    default:
      return nil;
  }
}

BOOL TansuoListTypeIsValidValue(TansuoListType value) {
  switch (value) {
    case TansuoListTypeTYule:
    case TansuoListTypeTQiwen:
    case TansuoListTypeTQishi:
    case TansuoListTypeTDuanzi:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTansuoListType(TansuoListType value) {
  switch (value) {
    case TansuoListTypeTYule:
      return @"TansuoListTypeTYule";
    case TansuoListTypeTQiwen:
      return @"TansuoListTypeTQiwen";
    case TansuoListTypeTQishi:
      return @"TansuoListTypeTQishi";
    case TansuoListTypeTDuanzi:
      return @"TansuoListTypeTDuanzi";
    default:
      return nil;
  }
}

BOOL CommentDoTypeIsValidValue(CommentDoType value) {
  switch (value) {
    case CommentDoTypeCommentUp:
    case CommentDoTypeCommentDown:
    case CommentDoTypeCommentDel:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromCommentDoType(CommentDoType value) {
  switch (value) {
    case CommentDoTypeCommentUp:
      return @"CommentDoTypeCommentUp";
    case CommentDoTypeCommentDown:
      return @"CommentDoTypeCommentDown";
    case CommentDoTypeCommentDel:
      return @"CommentDoTypeCommentDel";
    default:
      return nil;
  }
}

BOOL SourceDoTypeIsValidValue(SourceDoType value) {
  switch (value) {
    case SourceDoTypeSourceFollow:
    case SourceDoTypeSourceUnfollow:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSourceDoType(SourceDoType value) {
  switch (value) {
    case SourceDoTypeSourceFollow:
      return @"SourceDoTypeSourceFollow";
    case SourceDoTypeSourceUnfollow:
      return @"SourceDoTypeSourceUnfollow";
    default:
      return nil;
  }
}

BOOL BookmarkDoTypeIsValidValue(BookmarkDoType value) {
  switch (value) {
    case BookmarkDoTypeArticleBookmark:
    case BookmarkDoTypeArticleUnbookmark:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromBookmarkDoType(BookmarkDoType value) {
  switch (value) {
    case BookmarkDoTypeArticleBookmark:
      return @"BookmarkDoTypeArticleBookmark";
    case BookmarkDoTypeArticleUnbookmark:
      return @"BookmarkDoTypeArticleUnbookmark";
    default:
      return nil;
  }
}

BOOL SmsTypeIsValidValue(SmsType value) {
  switch (value) {
    case SmsTypeSmsReg:
    case SmsTypeSmsForgotpwd:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSmsType(SmsType value) {
  switch (value) {
    case SmsTypeSmsReg:
      return @"SmsTypeSmsReg";
    case SmsTypeSmsForgotpwd:
      return @"SmsTypeSmsForgotpwd";
    default:
      return nil;
  }
}

@interface RegUser ()
@property (strong) NSString* uid;
@property (strong) NSString* phoneNum;
@property (strong) NSString* email;
@property (strong) NSString* wx;
@property GenderType gender;
@property (strong) NSString* qq;
@property (strong) NSString* birthday;
@property (strong) NSString* nickname;
@property (strong) NSString* localArea;
@property UInt32 registerTime;
@property (strong) NSString* icon;
@property RegUserSetPw setpw;
@property (strong) NSData* iconB;
@property (strong) NSString* wxNickname;
@property (strong) NSString* qqNickname;
@end

@implementation RegUser

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasPhoneNum {
  return !!hasPhoneNum_;
}
- (void) setHasPhoneNum:(BOOL) _value_ {
  hasPhoneNum_ = !!_value_;
}
@synthesize phoneNum;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (BOOL) hasWx {
  return !!hasWx_;
}
- (void) setHasWx:(BOOL) _value_ {
  hasWx_ = !!_value_;
}
@synthesize wx;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) _value_ {
  hasGender_ = !!_value_;
}
@synthesize gender;
- (BOOL) hasQq {
  return !!hasQq_;
}
- (void) setHasQq:(BOOL) _value_ {
  hasQq_ = !!_value_;
}
@synthesize qq;
- (BOOL) hasBirthday {
  return !!hasBirthday_;
}
- (void) setHasBirthday:(BOOL) _value_ {
  hasBirthday_ = !!_value_;
}
@synthesize birthday;
- (BOOL) hasNickname {
  return !!hasNickname_;
}
- (void) setHasNickname:(BOOL) _value_ {
  hasNickname_ = !!_value_;
}
@synthesize nickname;
- (BOOL) hasLocalArea {
  return !!hasLocalArea_;
}
- (void) setHasLocalArea:(BOOL) _value_ {
  hasLocalArea_ = !!_value_;
}
@synthesize localArea;
- (BOOL) hasRegisterTime {
  return !!hasRegisterTime_;
}
- (void) setHasRegisterTime:(BOOL) _value_ {
  hasRegisterTime_ = !!_value_;
}
@synthesize registerTime;
- (BOOL) hasIcon {
  return !!hasIcon_;
}
- (void) setHasIcon:(BOOL) _value_ {
  hasIcon_ = !!_value_;
}
@synthesize icon;
- (BOOL) hasSetpw {
  return !!hasSetpw_;
}
- (void) setHasSetpw:(BOOL) _value_ {
  hasSetpw_ = !!_value_;
}
@synthesize setpw;
- (BOOL) hasIconB {
  return !!hasIconB_;
}
- (void) setHasIconB:(BOOL) _value_ {
  hasIconB_ = !!_value_;
}
@synthesize iconB;
- (BOOL) hasWxNickname {
  return !!hasWxNickname_;
}
- (void) setHasWxNickname:(BOOL) _value_ {
  hasWxNickname_ = !!_value_;
}
@synthesize wxNickname;
- (BOOL) hasQqNickname {
  return !!hasQqNickname_;
}
- (void) setHasQqNickname:(BOOL) _value_ {
  hasQqNickname_ = !!_value_;
}
@synthesize qqNickname;
- (instancetype) init {
  if ((self = [super init])) {
    self.uid = @"";
    self.phoneNum = @"";
    self.email = @"";
    self.wx = @"";
    self.gender = GenderTypeGenderUnknown;
    self.qq = @"";
    self.birthday = @"";
    self.nickname = @"";
    self.localArea = @"";
    self.registerTime = 0;
    self.icon = @"";
    self.setpw = RegUserSetPwNo;
    self.iconB = [NSData data];
    self.wxNickname = @"";
    self.qqNickname = @"";
  }
  return self;
}
static RegUser* defaultRegUserInstance = nil;
+ (void) initialize {
  if (self == [RegUser class]) {
    defaultRegUserInstance = [[RegUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRegUserInstance;
}
- (instancetype) defaultInstance {
  return defaultRegUserInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeString:1 value:self.uid];
  }
  if (self.hasPhoneNum) {
    [output writeString:2 value:self.phoneNum];
  }
  if (self.hasEmail) {
    [output writeString:3 value:self.email];
  }
  if (self.hasWx) {
    [output writeString:4 value:self.wx];
  }
  if (self.hasGender) {
    [output writeEnum:5 value:self.gender];
  }
  if (self.hasQq) {
    [output writeString:6 value:self.qq];
  }
  if (self.hasBirthday) {
    [output writeString:7 value:self.birthday];
  }
  if (self.hasNickname) {
    [output writeString:8 value:self.nickname];
  }
  if (self.hasLocalArea) {
    [output writeString:9 value:self.localArea];
  }
  if (self.hasRegisterTime) {
    [output writeUInt32:11 value:self.registerTime];
  }
  if (self.hasIcon) {
    [output writeString:12 value:self.icon];
  }
  if (self.hasSetpw) {
    [output writeEnum:13 value:self.setpw];
  }
  if (self.hasIconB) {
    [output writeData:15 value:self.iconB];
  }
  if (self.hasWxNickname) {
    [output writeString:17 value:self.wxNickname];
  }
  if (self.hasQqNickname) {
    [output writeString:18 value:self.qqNickname];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeStringSize(1, self.uid);
  }
  if (self.hasPhoneNum) {
    size_ += computeStringSize(2, self.phoneNum);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(3, self.email);
  }
  if (self.hasWx) {
    size_ += computeStringSize(4, self.wx);
  }
  if (self.hasGender) {
    size_ += computeEnumSize(5, self.gender);
  }
  if (self.hasQq) {
    size_ += computeStringSize(6, self.qq);
  }
  if (self.hasBirthday) {
    size_ += computeStringSize(7, self.birthday);
  }
  if (self.hasNickname) {
    size_ += computeStringSize(8, self.nickname);
  }
  if (self.hasLocalArea) {
    size_ += computeStringSize(9, self.localArea);
  }
  if (self.hasRegisterTime) {
    size_ += computeUInt32Size(11, self.registerTime);
  }
  if (self.hasIcon) {
    size_ += computeStringSize(12, self.icon);
  }
  if (self.hasSetpw) {
    size_ += computeEnumSize(13, self.setpw);
  }
  if (self.hasIconB) {
    size_ += computeDataSize(15, self.iconB);
  }
  if (self.hasWxNickname) {
    size_ += computeStringSize(17, self.wxNickname);
  }
  if (self.hasQqNickname) {
    size_ += computeStringSize(18, self.qqNickname);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RegUser*) parseFromData:(NSData*) data {
  return (RegUser*)[[[RegUser builder] mergeFromData:data] build];
}
+ (RegUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegUser*)[[[RegUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegUser*) parseFromInputStream:(NSInputStream*) input {
  return (RegUser*)[[[RegUser builder] mergeFromInputStream:input] build];
}
+ (RegUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegUser*)[[[RegUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegUser*)[[[RegUser builder] mergeFromCodedInputStream:input] build];
}
+ (RegUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegUser*)[[[RegUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegUserBuilder*) builder {
  return [[RegUserBuilder alloc] init];
}
+ (RegUserBuilder*) builderWithPrototype:(RegUser*) prototype {
  return [[RegUser builder] mergeFrom:prototype];
}
- (RegUserBuilder*) builder {
  return [RegUser builder];
}
- (RegUserBuilder*) toBuilder {
  return [RegUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", self.uid];
  }
  if (self.hasPhoneNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNum", self.phoneNum];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasWx) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wx", self.wx];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", NSStringFromGenderType(self.gender)];
  }
  if (self.hasQq) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qq", self.qq];
  }
  if (self.hasBirthday) {
    [output appendFormat:@"%@%@: %@\n", indent, @"birthday", self.birthday];
  }
  if (self.hasNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickname", self.nickname];
  }
  if (self.hasLocalArea) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localArea", self.localArea];
  }
  if (self.hasRegisterTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"registerTime", [NSNumber numberWithInteger:self.registerTime]];
  }
  if (self.hasIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"icon", self.icon];
  }
  if (self.hasSetpw) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setpw", NSStringFromRegUserSetPw(self.setpw)];
  }
  if (self.hasIconB) {
    [output appendFormat:@"%@%@: %@\n", indent, @"iconB", self.iconB];
  }
  if (self.hasWxNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"wxNickname", self.wxNickname];
  }
  if (self.hasQqNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qqNickname", self.qqNickname];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUid) {
    [dictionary setObject: self.uid forKey: @"uid"];
  }
  if (self.hasPhoneNum) {
    [dictionary setObject: self.phoneNum forKey: @"phoneNum"];
  }
  if (self.hasEmail) {
    [dictionary setObject: self.email forKey: @"email"];
  }
  if (self.hasWx) {
    [dictionary setObject: self.wx forKey: @"wx"];
  }
  if (self.hasGender) {
    [dictionary setObject: @(self.gender) forKey: @"gender"];
  }
  if (self.hasQq) {
    [dictionary setObject: self.qq forKey: @"qq"];
  }
  if (self.hasBirthday) {
    [dictionary setObject: self.birthday forKey: @"birthday"];
  }
  if (self.hasNickname) {
    [dictionary setObject: self.nickname forKey: @"nickname"];
  }
  if (self.hasLocalArea) {
    [dictionary setObject: self.localArea forKey: @"localArea"];
  }
  if (self.hasRegisterTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.registerTime] forKey: @"registerTime"];
  }
  if (self.hasIcon) {
    [dictionary setObject: self.icon forKey: @"icon"];
  }
  if (self.hasSetpw) {
    [dictionary setObject: @(self.setpw) forKey: @"setpw"];
  }
  if (self.hasIconB) {
    [dictionary setObject: self.iconB forKey: @"iconB"];
  }
  if (self.hasWxNickname) {
    [dictionary setObject: self.wxNickname forKey: @"wxNickname"];
  }
  if (self.hasQqNickname) {
    [dictionary setObject: self.qqNickname forKey: @"qqNickname"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RegUser class]]) {
    return NO;
  }
  RegUser *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || [self.uid isEqual:otherMessage.uid]) &&
      self.hasPhoneNum == otherMessage.hasPhoneNum &&
      (!self.hasPhoneNum || [self.phoneNum isEqual:otherMessage.phoneNum]) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasWx == otherMessage.hasWx &&
      (!self.hasWx || [self.wx isEqual:otherMessage.wx]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasQq == otherMessage.hasQq &&
      (!self.hasQq || [self.qq isEqual:otherMessage.qq]) &&
      self.hasBirthday == otherMessage.hasBirthday &&
      (!self.hasBirthday || [self.birthday isEqual:otherMessage.birthday]) &&
      self.hasNickname == otherMessage.hasNickname &&
      (!self.hasNickname || [self.nickname isEqual:otherMessage.nickname]) &&
      self.hasLocalArea == otherMessage.hasLocalArea &&
      (!self.hasLocalArea || [self.localArea isEqual:otherMessage.localArea]) &&
      self.hasRegisterTime == otherMessage.hasRegisterTime &&
      (!self.hasRegisterTime || self.registerTime == otherMessage.registerTime) &&
      self.hasIcon == otherMessage.hasIcon &&
      (!self.hasIcon || [self.icon isEqual:otherMessage.icon]) &&
      self.hasSetpw == otherMessage.hasSetpw &&
      (!self.hasSetpw || self.setpw == otherMessage.setpw) &&
      self.hasIconB == otherMessage.hasIconB &&
      (!self.hasIconB || [self.iconB isEqual:otherMessage.iconB]) &&
      self.hasWxNickname == otherMessage.hasWxNickname &&
      (!self.hasWxNickname || [self.wxNickname isEqual:otherMessage.wxNickname]) &&
      self.hasQqNickname == otherMessage.hasQqNickname &&
      (!self.hasQqNickname || [self.qqNickname isEqual:otherMessage.qqNickname]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [self.uid hash];
  }
  if (self.hasPhoneNum) {
    hashCode = hashCode * 31 + [self.phoneNum hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasWx) {
    hashCode = hashCode * 31 + [self.wx hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + self.gender;
  }
  if (self.hasQq) {
    hashCode = hashCode * 31 + [self.qq hash];
  }
  if (self.hasBirthday) {
    hashCode = hashCode * 31 + [self.birthday hash];
  }
  if (self.hasNickname) {
    hashCode = hashCode * 31 + [self.nickname hash];
  }
  if (self.hasLocalArea) {
    hashCode = hashCode * 31 + [self.localArea hash];
  }
  if (self.hasRegisterTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.registerTime] hash];
  }
  if (self.hasIcon) {
    hashCode = hashCode * 31 + [self.icon hash];
  }
  if (self.hasSetpw) {
    hashCode = hashCode * 31 + self.setpw;
  }
  if (self.hasIconB) {
    hashCode = hashCode * 31 + [self.iconB hash];
  }
  if (self.hasWxNickname) {
    hashCode = hashCode * 31 + [self.wxNickname hash];
  }
  if (self.hasQqNickname) {
    hashCode = hashCode * 31 + [self.qqNickname hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL RegUserSetPwIsValidValue(RegUserSetPw value) {
  switch (value) {
    case RegUserSetPwNo:
    case RegUserSetPwYes:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRegUserSetPw(RegUserSetPw value) {
  switch (value) {
    case RegUserSetPwNo:
      return @"RegUserSetPwNo";
    case RegUserSetPwYes:
      return @"RegUserSetPwYes";
    default:
      return nil;
  }
}

@interface RegUserBuilder()
@property (strong) RegUser* resultRegUser;
@end

@implementation RegUserBuilder
@synthesize resultRegUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRegUser = [[RegUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRegUser;
}
- (RegUserBuilder*) clear {
  self.resultRegUser = [[RegUser alloc] init];
  return self;
}
- (RegUserBuilder*) clone {
  return [RegUser builderWithPrototype:resultRegUser];
}
- (RegUser*) defaultInstance {
  return [RegUser defaultInstance];
}
- (RegUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegUser*) buildPartial {
  RegUser* returnMe = resultRegUser;
  self.resultRegUser = nil;
  return returnMe;
}
- (RegUserBuilder*) mergeFrom:(RegUser*) other {
  if (other == [RegUser defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasPhoneNum) {
    [self setPhoneNum:other.phoneNum];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasWx) {
    [self setWx:other.wx];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasQq) {
    [self setQq:other.qq];
  }
  if (other.hasBirthday) {
    [self setBirthday:other.birthday];
  }
  if (other.hasNickname) {
    [self setNickname:other.nickname];
  }
  if (other.hasLocalArea) {
    [self setLocalArea:other.localArea];
  }
  if (other.hasRegisterTime) {
    [self setRegisterTime:other.registerTime];
  }
  if (other.hasIcon) {
    [self setIcon:other.icon];
  }
  if (other.hasSetpw) {
    [self setSetpw:other.setpw];
  }
  if (other.hasIconB) {
    [self setIconB:other.iconB];
  }
  if (other.hasWxNickname) {
    [self setWxNickname:other.wxNickname];
  }
  if (other.hasQqNickname) {
    [self setQqNickname:other.qqNickname];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUid:[input readString]];
        break;
      }
      case 18: {
        [self setPhoneNum:[input readString]];
        break;
      }
      case 26: {
        [self setEmail:[input readString]];
        break;
      }
      case 34: {
        [self setWx:[input readString]];
        break;
      }
      case 40: {
        GenderType value = (GenderType)[input readEnum];
        if (GenderTypeIsValidValue(value)) {
          [self setGender:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        [self setQq:[input readString]];
        break;
      }
      case 58: {
        [self setBirthday:[input readString]];
        break;
      }
      case 66: {
        [self setNickname:[input readString]];
        break;
      }
      case 74: {
        [self setLocalArea:[input readString]];
        break;
      }
      case 88: {
        [self setRegisterTime:[input readUInt32]];
        break;
      }
      case 98: {
        [self setIcon:[input readString]];
        break;
      }
      case 104: {
        RegUserSetPw value = (RegUserSetPw)[input readEnum];
        if (RegUserSetPwIsValidValue(value)) {
          [self setSetpw:value];
        } else {
          [unknownFields mergeVarintField:13 value:value];
        }
        break;
      }
      case 122: {
        [self setIconB:[input readData]];
        break;
      }
      case 138: {
        [self setWxNickname:[input readString]];
        break;
      }
      case 146: {
        [self setQqNickname:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return resultRegUser.hasUid;
}
- (NSString*) uid {
  return resultRegUser.uid;
}
- (RegUserBuilder*) setUid:(NSString*) value {
  resultRegUser.hasUid = YES;
  resultRegUser.uid = value;
  return self;
}
- (RegUserBuilder*) clearUid {
  resultRegUser.hasUid = NO;
  resultRegUser.uid = @"";
  return self;
}
- (BOOL) hasPhoneNum {
  return resultRegUser.hasPhoneNum;
}
- (NSString*) phoneNum {
  return resultRegUser.phoneNum;
}
- (RegUserBuilder*) setPhoneNum:(NSString*) value {
  resultRegUser.hasPhoneNum = YES;
  resultRegUser.phoneNum = value;
  return self;
}
- (RegUserBuilder*) clearPhoneNum {
  resultRegUser.hasPhoneNum = NO;
  resultRegUser.phoneNum = @"";
  return self;
}
- (BOOL) hasEmail {
  return resultRegUser.hasEmail;
}
- (NSString*) email {
  return resultRegUser.email;
}
- (RegUserBuilder*) setEmail:(NSString*) value {
  resultRegUser.hasEmail = YES;
  resultRegUser.email = value;
  return self;
}
- (RegUserBuilder*) clearEmail {
  resultRegUser.hasEmail = NO;
  resultRegUser.email = @"";
  return self;
}
- (BOOL) hasWx {
  return resultRegUser.hasWx;
}
- (NSString*) wx {
  return resultRegUser.wx;
}
- (RegUserBuilder*) setWx:(NSString*) value {
  resultRegUser.hasWx = YES;
  resultRegUser.wx = value;
  return self;
}
- (RegUserBuilder*) clearWx {
  resultRegUser.hasWx = NO;
  resultRegUser.wx = @"";
  return self;
}
- (BOOL) hasGender {
  return resultRegUser.hasGender;
}
- (GenderType) gender {
  return resultRegUser.gender;
}
- (RegUserBuilder*) setGender:(GenderType) value {
  resultRegUser.hasGender = YES;
  resultRegUser.gender = value;
  return self;
}
- (RegUserBuilder*) clearGender {
  resultRegUser.hasGender = NO;
  resultRegUser.gender = GenderTypeGenderUnknown;
  return self;
}
- (BOOL) hasQq {
  return resultRegUser.hasQq;
}
- (NSString*) qq {
  return resultRegUser.qq;
}
- (RegUserBuilder*) setQq:(NSString*) value {
  resultRegUser.hasQq = YES;
  resultRegUser.qq = value;
  return self;
}
- (RegUserBuilder*) clearQq {
  resultRegUser.hasQq = NO;
  resultRegUser.qq = @"";
  return self;
}
- (BOOL) hasBirthday {
  return resultRegUser.hasBirthday;
}
- (NSString*) birthday {
  return resultRegUser.birthday;
}
- (RegUserBuilder*) setBirthday:(NSString*) value {
  resultRegUser.hasBirthday = YES;
  resultRegUser.birthday = value;
  return self;
}
- (RegUserBuilder*) clearBirthday {
  resultRegUser.hasBirthday = NO;
  resultRegUser.birthday = @"";
  return self;
}
- (BOOL) hasNickname {
  return resultRegUser.hasNickname;
}
- (NSString*) nickname {
  return resultRegUser.nickname;
}
- (RegUserBuilder*) setNickname:(NSString*) value {
  resultRegUser.hasNickname = YES;
  resultRegUser.nickname = value;
  return self;
}
- (RegUserBuilder*) clearNickname {
  resultRegUser.hasNickname = NO;
  resultRegUser.nickname = @"";
  return self;
}
- (BOOL) hasLocalArea {
  return resultRegUser.hasLocalArea;
}
- (NSString*) localArea {
  return resultRegUser.localArea;
}
- (RegUserBuilder*) setLocalArea:(NSString*) value {
  resultRegUser.hasLocalArea = YES;
  resultRegUser.localArea = value;
  return self;
}
- (RegUserBuilder*) clearLocalArea {
  resultRegUser.hasLocalArea = NO;
  resultRegUser.localArea = @"";
  return self;
}
- (BOOL) hasRegisterTime {
  return resultRegUser.hasRegisterTime;
}
- (UInt32) registerTime {
  return resultRegUser.registerTime;
}
- (RegUserBuilder*) setRegisterTime:(UInt32) value {
  resultRegUser.hasRegisterTime = YES;
  resultRegUser.registerTime = value;
  return self;
}
- (RegUserBuilder*) clearRegisterTime {
  resultRegUser.hasRegisterTime = NO;
  resultRegUser.registerTime = 0;
  return self;
}
- (BOOL) hasIcon {
  return resultRegUser.hasIcon;
}
- (NSString*) icon {
  return resultRegUser.icon;
}
- (RegUserBuilder*) setIcon:(NSString*) value {
  resultRegUser.hasIcon = YES;
  resultRegUser.icon = value;
  return self;
}
- (RegUserBuilder*) clearIcon {
  resultRegUser.hasIcon = NO;
  resultRegUser.icon = @"";
  return self;
}
- (BOOL) hasSetpw {
  return resultRegUser.hasSetpw;
}
- (RegUserSetPw) setpw {
  return resultRegUser.setpw;
}
- (RegUserBuilder*) setSetpw:(RegUserSetPw) value {
  resultRegUser.hasSetpw = YES;
  resultRegUser.setpw = value;
  return self;
}
- (RegUserBuilder*) clearSetpw {
  resultRegUser.hasSetpw = NO;
  resultRegUser.setpw = RegUserSetPwNo;
  return self;
}
- (BOOL) hasIconB {
  return resultRegUser.hasIconB;
}
- (NSData*) iconB {
  return resultRegUser.iconB;
}
- (RegUserBuilder*) setIconB:(NSData*) value {
  resultRegUser.hasIconB = YES;
  resultRegUser.iconB = value;
  return self;
}
- (RegUserBuilder*) clearIconB {
  resultRegUser.hasIconB = NO;
  resultRegUser.iconB = [NSData data];
  return self;
}
- (BOOL) hasWxNickname {
  return resultRegUser.hasWxNickname;
}
- (NSString*) wxNickname {
  return resultRegUser.wxNickname;
}
- (RegUserBuilder*) setWxNickname:(NSString*) value {
  resultRegUser.hasWxNickname = YES;
  resultRegUser.wxNickname = value;
  return self;
}
- (RegUserBuilder*) clearWxNickname {
  resultRegUser.hasWxNickname = NO;
  resultRegUser.wxNickname = @"";
  return self;
}
- (BOOL) hasQqNickname {
  return resultRegUser.hasQqNickname;
}
- (NSString*) qqNickname {
  return resultRegUser.qqNickname;
}
- (RegUserBuilder*) setQqNickname:(NSString*) value {
  resultRegUser.hasQqNickname = YES;
  resultRegUser.qqNickname = value;
  return self;
}
- (RegUserBuilder*) clearQqNickname {
  resultRegUser.hasQqNickname = NO;
  resultRegUser.qqNickname = @"";
  return self;
}
@end

@interface LoginedRegUser ()
@property (strong) RegUser* user;
@property (strong) NSString* token;
@end

@implementation LoginedRegUser

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (instancetype) init {
  if ((self = [super init])) {
    self.user = [RegUser defaultInstance];
    self.token = @"";
  }
  return self;
}
static LoginedRegUser* defaultLoginedRegUserInstance = nil;
+ (void) initialize {
  if (self == [LoginedRegUser class]) {
    defaultLoginedRegUserInstance = [[LoginedRegUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLoginedRegUserInstance;
}
- (instancetype) defaultInstance {
  return defaultLoginedRegUserInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasToken) {
    [output writeString:3 value:self.token];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  if (self.hasToken) {
    size_ += computeStringSize(3, self.token);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginedRegUser*) parseFromData:(NSData*) data {
  return (LoginedRegUser*)[[[LoginedRegUser builder] mergeFromData:data] build];
}
+ (LoginedRegUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginedRegUser*)[[[LoginedRegUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginedRegUser*) parseFromInputStream:(NSInputStream*) input {
  return (LoginedRegUser*)[[[LoginedRegUser builder] mergeFromInputStream:input] build];
}
+ (LoginedRegUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginedRegUser*)[[[LoginedRegUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginedRegUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginedRegUser*)[[[LoginedRegUser builder] mergeFromCodedInputStream:input] build];
}
+ (LoginedRegUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginedRegUser*)[[[LoginedRegUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginedRegUserBuilder*) builder {
  return [[LoginedRegUserBuilder alloc] init];
}
+ (LoginedRegUserBuilder*) builderWithPrototype:(LoginedRegUser*) prototype {
  return [[LoginedRegUser builder] mergeFrom:prototype];
}
- (LoginedRegUserBuilder*) builder {
  return [LoginedRegUser builder];
}
- (LoginedRegUserBuilder*) toBuilder {
  return [LoginedRegUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginedRegUser class]]) {
    return NO;
  }
  LoginedRegUser *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginedRegUserBuilder()
@property (strong) LoginedRegUser* resultLoginedRegUser;
@end

@implementation LoginedRegUserBuilder
@synthesize resultLoginedRegUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginedRegUser = [[LoginedRegUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginedRegUser;
}
- (LoginedRegUserBuilder*) clear {
  self.resultLoginedRegUser = [[LoginedRegUser alloc] init];
  return self;
}
- (LoginedRegUserBuilder*) clone {
  return [LoginedRegUser builderWithPrototype:resultLoginedRegUser];
}
- (LoginedRegUser*) defaultInstance {
  return [LoginedRegUser defaultInstance];
}
- (LoginedRegUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginedRegUser*) buildPartial {
  LoginedRegUser* returnMe = resultLoginedRegUser;
  self.resultLoginedRegUser = nil;
  return returnMe;
}
- (LoginedRegUserBuilder*) mergeFrom:(LoginedRegUser*) other {
  if (other == [LoginedRegUser defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginedRegUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginedRegUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        RegUserBuilder* subBuilder = [RegUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultLoginedRegUser.hasUser;
}
- (RegUser*) user {
  return resultLoginedRegUser.user;
}
- (LoginedRegUserBuilder*) setUser:(RegUser*) value {
  resultLoginedRegUser.hasUser = YES;
  resultLoginedRegUser.user = value;
  return self;
}
- (LoginedRegUserBuilder*) setUserBuilder:(RegUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (LoginedRegUserBuilder*) mergeUser:(RegUser*) value {
  if (resultLoginedRegUser.hasUser &&
      resultLoginedRegUser.user != [RegUser defaultInstance]) {
    resultLoginedRegUser.user =
      [[[RegUser builderWithPrototype:resultLoginedRegUser.user] mergeFrom:value] buildPartial];
  } else {
    resultLoginedRegUser.user = value;
  }
  resultLoginedRegUser.hasUser = YES;
  return self;
}
- (LoginedRegUserBuilder*) clearUser {
  resultLoginedRegUser.hasUser = NO;
  resultLoginedRegUser.user = [RegUser defaultInstance];
  return self;
}
- (BOOL) hasToken {
  return resultLoginedRegUser.hasToken;
}
- (NSString*) token {
  return resultLoginedRegUser.token;
}
- (LoginedRegUserBuilder*) setToken:(NSString*) value {
  resultLoginedRegUser.hasToken = YES;
  resultLoginedRegUser.token = value;
  return self;
}
- (LoginedRegUserBuilder*) clearToken {
  resultLoginedRegUser.hasToken = NO;
  resultLoginedRegUser.token = @"";
  return self;
}
@end

@interface Gps ()
@property GpsCoordinateType coordinateType;
@property Float64 longitude;
@property Float64 latitude;
@property UInt32 timestamp;
@end

@implementation Gps

- (BOOL) hasCoordinateType {
  return !!hasCoordinateType_;
}
- (void) setHasCoordinateType:(BOOL) _value_ {
  hasCoordinateType_ = !!_value_;
}
@synthesize coordinateType;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) _value_ {
  hasLongitude_ = !!_value_;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.coordinateType = GpsCoordinateTypeWgs84;
    self.longitude = 0;
    self.latitude = 0;
    self.timestamp = 0;
  }
  return self;
}
static Gps* defaultGpsInstance = nil;
+ (void) initialize {
  if (self == [Gps class]) {
    defaultGpsInstance = [[Gps alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGpsInstance;
}
- (instancetype) defaultInstance {
  return defaultGpsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCoordinateType) {
    [output writeEnum:1 value:self.coordinateType];
  }
  if (self.hasLongitude) {
    [output writeDouble:2 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeDouble:3 value:self.latitude];
  }
  if (self.hasTimestamp) {
    [output writeUInt32:4 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCoordinateType) {
    size_ += computeEnumSize(1, self.coordinateType);
  }
  if (self.hasLongitude) {
    size_ += computeDoubleSize(2, self.longitude);
  }
  if (self.hasLatitude) {
    size_ += computeDoubleSize(3, self.latitude);
  }
  if (self.hasTimestamp) {
    size_ += computeUInt32Size(4, self.timestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Gps*) parseFromData:(NSData*) data {
  return (Gps*)[[[Gps builder] mergeFromData:data] build];
}
+ (Gps*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Gps*)[[[Gps builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Gps*) parseFromInputStream:(NSInputStream*) input {
  return (Gps*)[[[Gps builder] mergeFromInputStream:input] build];
}
+ (Gps*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Gps*)[[[Gps builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Gps*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Gps*)[[[Gps builder] mergeFromCodedInputStream:input] build];
}
+ (Gps*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Gps*)[[[Gps builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GpsBuilder*) builder {
  return [[GpsBuilder alloc] init];
}
+ (GpsBuilder*) builderWithPrototype:(Gps*) prototype {
  return [[Gps builder] mergeFrom:prototype];
}
- (GpsBuilder*) builder {
  return [Gps builder];
}
- (GpsBuilder*) toBuilder {
  return [Gps builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCoordinateType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coordinateType", NSStringFromGpsCoordinateType(self.coordinateType)];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithDouble:self.longitude]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithDouble:self.latitude]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithInteger:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCoordinateType) {
    [dictionary setObject: @(self.coordinateType) forKey: @"coordinateType"];
  }
  if (self.hasLongitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.longitude] forKey: @"longitude"];
  }
  if (self.hasLatitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.latitude] forKey: @"latitude"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithInteger:self.timestamp] forKey: @"timestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Gps class]]) {
    return NO;
  }
  Gps *otherMessage = other;
  return
      self.hasCoordinateType == otherMessage.hasCoordinateType &&
      (!self.hasCoordinateType || self.coordinateType == otherMessage.coordinateType) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCoordinateType) {
    hashCode = hashCode * 31 + self.coordinateType;
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.longitude] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.latitude] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL GpsCoordinateTypeIsValidValue(GpsCoordinateType value) {
  switch (value) {
    case GpsCoordinateTypeWgs84:
    case GpsCoordinateTypeGcj02:
    case GpsCoordinateTypeBd09:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromGpsCoordinateType(GpsCoordinateType value) {
  switch (value) {
    case GpsCoordinateTypeWgs84:
      return @"GpsCoordinateTypeWgs84";
    case GpsCoordinateTypeGcj02:
      return @"GpsCoordinateTypeGcj02";
    case GpsCoordinateTypeBd09:
      return @"GpsCoordinateTypeBd09";
    default:
      return nil;
  }
}

@interface GpsBuilder()
@property (strong) Gps* resultGps;
@end

@implementation GpsBuilder
@synthesize resultGps;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGps = [[Gps alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGps;
}
- (GpsBuilder*) clear {
  self.resultGps = [[Gps alloc] init];
  return self;
}
- (GpsBuilder*) clone {
  return [Gps builderWithPrototype:resultGps];
}
- (Gps*) defaultInstance {
  return [Gps defaultInstance];
}
- (Gps*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Gps*) buildPartial {
  Gps* returnMe = resultGps;
  self.resultGps = nil;
  return returnMe;
}
- (GpsBuilder*) mergeFrom:(Gps*) other {
  if (other == [Gps defaultInstance]) {
    return self;
  }
  if (other.hasCoordinateType) {
    [self setCoordinateType:other.coordinateType];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GpsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GpsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        GpsCoordinateType value = (GpsCoordinateType)[input readEnum];
        if (GpsCoordinateTypeIsValidValue(value)) {
          [self setCoordinateType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 17: {
        [self setLongitude:[input readDouble]];
        break;
      }
      case 25: {
        [self setLatitude:[input readDouble]];
        break;
      }
      case 32: {
        [self setTimestamp:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCoordinateType {
  return resultGps.hasCoordinateType;
}
- (GpsCoordinateType) coordinateType {
  return resultGps.coordinateType;
}
- (GpsBuilder*) setCoordinateType:(GpsCoordinateType) value {
  resultGps.hasCoordinateType = YES;
  resultGps.coordinateType = value;
  return self;
}
- (GpsBuilder*) clearCoordinateType {
  resultGps.hasCoordinateType = NO;
  resultGps.coordinateType = GpsCoordinateTypeWgs84;
  return self;
}
- (BOOL) hasLongitude {
  return resultGps.hasLongitude;
}
- (Float64) longitude {
  return resultGps.longitude;
}
- (GpsBuilder*) setLongitude:(Float64) value {
  resultGps.hasLongitude = YES;
  resultGps.longitude = value;
  return self;
}
- (GpsBuilder*) clearLongitude {
  resultGps.hasLongitude = NO;
  resultGps.longitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return resultGps.hasLatitude;
}
- (Float64) latitude {
  return resultGps.latitude;
}
- (GpsBuilder*) setLatitude:(Float64) value {
  resultGps.hasLatitude = YES;
  resultGps.latitude = value;
  return self;
}
- (GpsBuilder*) clearLatitude {
  resultGps.hasLatitude = NO;
  resultGps.latitude = 0;
  return self;
}
- (BOOL) hasTimestamp {
  return resultGps.hasTimestamp;
}
- (UInt32) timestamp {
  return resultGps.timestamp;
}
- (GpsBuilder*) setTimestamp:(UInt32) value {
  resultGps.hasTimestamp = YES;
  resultGps.timestamp = value;
  return self;
}
- (GpsBuilder*) clearTimestamp {
  resultGps.hasTimestamp = NO;
  resultGps.timestamp = 0;
  return self;
}
@end

@interface Device ()
@property DeviceDeviceType deviceType;
@property DeviceOsType osType;
@property (strong) NSString* osVersion;
@property (strong) NSData* vendor;
@property (strong) NSData* model;
@property (strong) DeviceUdId* udid;
@property (strong) DeviceSize* screenSize;
@end

@implementation Device

- (BOOL) hasDeviceType {
  return !!hasDeviceType_;
}
- (void) setHasDeviceType:(BOOL) _value_ {
  hasDeviceType_ = !!_value_;
}
@synthesize deviceType;
- (BOOL) hasOsType {
  return !!hasOsType_;
}
- (void) setHasOsType:(BOOL) _value_ {
  hasOsType_ = !!_value_;
}
@synthesize osType;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) _value_ {
  hasOsVersion_ = !!_value_;
}
@synthesize osVersion;
- (BOOL) hasVendor {
  return !!hasVendor_;
}
- (void) setHasVendor:(BOOL) _value_ {
  hasVendor_ = !!_value_;
}
@synthesize vendor;
- (BOOL) hasModel {
  return !!hasModel_;
}
- (void) setHasModel:(BOOL) _value_ {
  hasModel_ = !!_value_;
}
@synthesize model;
- (BOOL) hasUdid {
  return !!hasUdid_;
}
- (void) setHasUdid:(BOOL) _value_ {
  hasUdid_ = !!_value_;
}
@synthesize udid;
- (BOOL) hasScreenSize {
  return !!hasScreenSize_;
}
- (void) setHasScreenSize:(BOOL) _value_ {
  hasScreenSize_ = !!_value_;
}
@synthesize screenSize;
- (instancetype) init {
  if ((self = [super init])) {
    self.deviceType = DeviceDeviceTypeDeviceUnknown;
    self.osType = DeviceOsTypeWin;
    self.osVersion = @"";
    self.vendor = [NSData data];
    self.model = [NSData data];
    self.udid = [DeviceUdId defaultInstance];
    self.screenSize = [DeviceSize defaultInstance];
  }
  return self;
}
static Device* defaultDeviceInstance = nil;
+ (void) initialize {
  if (self == [Device class]) {
    defaultDeviceInstance = [[Device alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDeviceInstance;
}
- (instancetype) defaultInstance {
  return defaultDeviceInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeviceType) {
    [output writeEnum:1 value:self.deviceType];
  }
  if (self.hasOsType) {
    [output writeEnum:2 value:self.osType];
  }
  if (self.hasOsVersion) {
    [output writeString:3 value:self.osVersion];
  }
  if (self.hasVendor) {
    [output writeData:4 value:self.vendor];
  }
  if (self.hasModel) {
    [output writeData:5 value:self.model];
  }
  if (self.hasUdid) {
    [output writeMessage:6 value:self.udid];
  }
  if (self.hasScreenSize) {
    [output writeMessage:7 value:self.screenSize];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDeviceType) {
    size_ += computeEnumSize(1, self.deviceType);
  }
  if (self.hasOsType) {
    size_ += computeEnumSize(2, self.osType);
  }
  if (self.hasOsVersion) {
    size_ += computeStringSize(3, self.osVersion);
  }
  if (self.hasVendor) {
    size_ += computeDataSize(4, self.vendor);
  }
  if (self.hasModel) {
    size_ += computeDataSize(5, self.model);
  }
  if (self.hasUdid) {
    size_ += computeMessageSize(6, self.udid);
  }
  if (self.hasScreenSize) {
    size_ += computeMessageSize(7, self.screenSize);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Device*) parseFromData:(NSData*) data {
  return (Device*)[[[Device builder] mergeFromData:data] build];
}
+ (Device*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Device*) parseFromInputStream:(NSInputStream*) input {
  return (Device*)[[[Device builder] mergeFromInputStream:input] build];
}
+ (Device*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Device*)[[[Device builder] mergeFromCodedInputStream:input] build];
}
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceBuilder*) builder {
  return [[DeviceBuilder alloc] init];
}
+ (DeviceBuilder*) builderWithPrototype:(Device*) prototype {
  return [[Device builder] mergeFrom:prototype];
}
- (DeviceBuilder*) builder {
  return [Device builder];
}
- (DeviceBuilder*) toBuilder {
  return [Device builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDeviceType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceType", NSStringFromDeviceDeviceType(self.deviceType)];
  }
  if (self.hasOsType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osType", NSStringFromDeviceOsType(self.osType)];
  }
  if (self.hasOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"osVersion", self.osVersion];
  }
  if (self.hasVendor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vendor", self.vendor];
  }
  if (self.hasModel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"model", self.model];
  }
  if (self.hasUdid) {
    [output appendFormat:@"%@%@ {\n", indent, @"udid"];
    [self.udid writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasScreenSize) {
    [output appendFormat:@"%@%@ {\n", indent, @"screenSize"];
    [self.screenSize writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDeviceType) {
    [dictionary setObject: @(self.deviceType) forKey: @"deviceType"];
  }
  if (self.hasOsType) {
    [dictionary setObject: @(self.osType) forKey: @"osType"];
  }
  if (self.hasOsVersion) {
    [dictionary setObject: self.osVersion forKey: @"osVersion"];
  }
  if (self.hasVendor) {
    [dictionary setObject: self.vendor forKey: @"vendor"];
  }
  if (self.hasModel) {
    [dictionary setObject: self.model forKey: @"model"];
  }
  if (self.hasUdid) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.udid storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"udid"];
  }
  if (self.hasScreenSize) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.screenSize storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"screenSize"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Device class]]) {
    return NO;
  }
  Device *otherMessage = other;
  return
      self.hasDeviceType == otherMessage.hasDeviceType &&
      (!self.hasDeviceType || self.deviceType == otherMessage.deviceType) &&
      self.hasOsType == otherMessage.hasOsType &&
      (!self.hasOsType || self.osType == otherMessage.osType) &&
      self.hasOsVersion == otherMessage.hasOsVersion &&
      (!self.hasOsVersion || [self.osVersion isEqual:otherMessage.osVersion]) &&
      self.hasVendor == otherMessage.hasVendor &&
      (!self.hasVendor || [self.vendor isEqual:otherMessage.vendor]) &&
      self.hasModel == otherMessage.hasModel &&
      (!self.hasModel || [self.model isEqual:otherMessage.model]) &&
      self.hasUdid == otherMessage.hasUdid &&
      (!self.hasUdid || [self.udid isEqual:otherMessage.udid]) &&
      self.hasScreenSize == otherMessage.hasScreenSize &&
      (!self.hasScreenSize || [self.screenSize isEqual:otherMessage.screenSize]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDeviceType) {
    hashCode = hashCode * 31 + self.deviceType;
  }
  if (self.hasOsType) {
    hashCode = hashCode * 31 + self.osType;
  }
  if (self.hasOsVersion) {
    hashCode = hashCode * 31 + [self.osVersion hash];
  }
  if (self.hasVendor) {
    hashCode = hashCode * 31 + [self.vendor hash];
  }
  if (self.hasModel) {
    hashCode = hashCode * 31 + [self.model hash];
  }
  if (self.hasUdid) {
    hashCode = hashCode * 31 + [self.udid hash];
  }
  if (self.hasScreenSize) {
    hashCode = hashCode * 31 + [self.screenSize hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL DeviceDeviceTypeIsValidValue(DeviceDeviceType value) {
  switch (value) {
    case DeviceDeviceTypeDeviceUnknown:
    case DeviceDeviceTypeDevicePhone:
    case DeviceDeviceTypeDeviceTablet:
    case DeviceDeviceTypeDeviceWear:
    case DeviceDeviceTypeDevicePc:
    case DeviceDeviceTypeDeviceOther:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromDeviceDeviceType(DeviceDeviceType value) {
  switch (value) {
    case DeviceDeviceTypeDeviceUnknown:
      return @"DeviceDeviceTypeDeviceUnknown";
    case DeviceDeviceTypeDevicePhone:
      return @"DeviceDeviceTypeDevicePhone";
    case DeviceDeviceTypeDeviceTablet:
      return @"DeviceDeviceTypeDeviceTablet";
    case DeviceDeviceTypeDeviceWear:
      return @"DeviceDeviceTypeDeviceWear";
    case DeviceDeviceTypeDevicePc:
      return @"DeviceDeviceTypeDevicePc";
    case DeviceDeviceTypeDeviceOther:
      return @"DeviceDeviceTypeDeviceOther";
    default:
      return nil;
  }
}

BOOL DeviceOsTypeIsValidValue(DeviceOsType value) {
  switch (value) {
    case DeviceOsTypeWin:
    case DeviceOsTypeAndroid:
    case DeviceOsTypeIos:
    case DeviceOsTypeWp:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromDeviceOsType(DeviceOsType value) {
  switch (value) {
    case DeviceOsTypeWin:
      return @"DeviceOsTypeWin";
    case DeviceOsTypeAndroid:
      return @"DeviceOsTypeAndroid";
    case DeviceOsTypeIos:
      return @"DeviceOsTypeIos";
    case DeviceOsTypeWp:
      return @"DeviceOsTypeWp";
    default:
      return nil;
  }
}

@interface DeviceSize ()
@property UInt32 width;
@property UInt32 height;
@end

@implementation DeviceSize

- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (instancetype) init {
  if ((self = [super init])) {
    self.width = 0;
    self.height = 0;
  }
  return self;
}
static DeviceSize* defaultDeviceSizeInstance = nil;
+ (void) initialize {
  if (self == [DeviceSize class]) {
    defaultDeviceSizeInstance = [[DeviceSize alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDeviceSizeInstance;
}
- (instancetype) defaultInstance {
  return defaultDeviceSizeInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWidth) {
    [output writeUInt32:1 value:self.width];
  }
  if (self.hasHeight) {
    [output writeUInt32:2 value:self.height];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWidth) {
    size_ += computeUInt32Size(1, self.width);
  }
  if (self.hasHeight) {
    size_ += computeUInt32Size(2, self.height);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DeviceSize*) parseFromData:(NSData*) data {
  return (DeviceSize*)[[[DeviceSize builder] mergeFromData:data] build];
}
+ (DeviceSize*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceSize*)[[[DeviceSize builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DeviceSize*) parseFromInputStream:(NSInputStream*) input {
  return (DeviceSize*)[[[DeviceSize builder] mergeFromInputStream:input] build];
}
+ (DeviceSize*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceSize*)[[[DeviceSize builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceSize*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DeviceSize*)[[[DeviceSize builder] mergeFromCodedInputStream:input] build];
}
+ (DeviceSize*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceSize*)[[[DeviceSize builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceSizeBuilder*) builder {
  return [[DeviceSizeBuilder alloc] init];
}
+ (DeviceSizeBuilder*) builderWithPrototype:(DeviceSize*) prototype {
  return [[DeviceSize builder] mergeFrom:prototype];
}
- (DeviceSizeBuilder*) builder {
  return [DeviceSize builder];
}
- (DeviceSizeBuilder*) toBuilder {
  return [DeviceSize builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithInteger:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithInteger:self.height]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasWidth) {
    [dictionary setObject: [NSNumber numberWithInteger:self.width] forKey: @"width"];
  }
  if (self.hasHeight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.height] forKey: @"height"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DeviceSize class]]) {
    return NO;
  }
  DeviceSize *otherMessage = other;
  return
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.height] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DeviceSizeBuilder()
@property (strong) DeviceSize* resultSize;
@end

@implementation DeviceSizeBuilder
@synthesize resultSize;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSize = [[DeviceSize alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSize;
}
- (DeviceSizeBuilder*) clear {
  self.resultSize = [[DeviceSize alloc] init];
  return self;
}
- (DeviceSizeBuilder*) clone {
  return [DeviceSize builderWithPrototype:resultSize];
}
- (DeviceSize*) defaultInstance {
  return [DeviceSize defaultInstance];
}
- (DeviceSize*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DeviceSize*) buildPartial {
  DeviceSize* returnMe = resultSize;
  self.resultSize = nil;
  return returnMe;
}
- (DeviceSizeBuilder*) mergeFrom:(DeviceSize*) other {
  if (other == [DeviceSize defaultInstance]) {
    return self;
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DeviceSizeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DeviceSizeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setWidth:[input readUInt32]];
        break;
      }
      case 16: {
        [self setHeight:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasWidth {
  return resultSize.hasWidth;
}
- (UInt32) width {
  return resultSize.width;
}
- (DeviceSizeBuilder*) setWidth:(UInt32) value {
  resultSize.hasWidth = YES;
  resultSize.width = value;
  return self;
}
- (DeviceSizeBuilder*) clearWidth {
  resultSize.hasWidth = NO;
  resultSize.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return resultSize.hasHeight;
}
- (UInt32) height {
  return resultSize.height;
}
- (DeviceSizeBuilder*) setHeight:(UInt32) value {
  resultSize.hasHeight = YES;
  resultSize.height = value;
  return self;
}
- (DeviceSizeBuilder*) clearHeight {
  resultSize.hasHeight = NO;
  resultSize.height = 0;
  return self;
}
@end

@interface DeviceUdId ()
@property (strong) NSString* uuid;
@property (strong) NSString* imei;
@property (strong) NSString* mac;
@property (strong) NSString* androidId;
@property (strong) NSString* customId;
@end

@implementation DeviceUdId

- (BOOL) hasUuid {
  return !!hasUuid_;
}
- (void) setHasUuid:(BOOL) _value_ {
  hasUuid_ = !!_value_;
}
@synthesize uuid;
- (BOOL) hasImei {
  return !!hasImei_;
}
- (void) setHasImei:(BOOL) _value_ {
  hasImei_ = !!_value_;
}
@synthesize imei;
- (BOOL) hasMac {
  return !!hasMac_;
}
- (void) setHasMac:(BOOL) _value_ {
  hasMac_ = !!_value_;
}
@synthesize mac;
- (BOOL) hasAndroidId {
  return !!hasAndroidId_;
}
- (void) setHasAndroidId:(BOOL) _value_ {
  hasAndroidId_ = !!_value_;
}
@synthesize androidId;
- (BOOL) hasCustomId {
  return !!hasCustomId_;
}
- (void) setHasCustomId:(BOOL) _value_ {
  hasCustomId_ = !!_value_;
}
@synthesize customId;
- (instancetype) init {
  if ((self = [super init])) {
    self.uuid = @"";
    self.imei = @"";
    self.mac = @"";
    self.androidId = @"";
    self.customId = @"";
  }
  return self;
}
static DeviceUdId* defaultDeviceUdIdInstance = nil;
+ (void) initialize {
  if (self == [DeviceUdId class]) {
    defaultDeviceUdIdInstance = [[DeviceUdId alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDeviceUdIdInstance;
}
- (instancetype) defaultInstance {
  return defaultDeviceUdIdInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUuid) {
    [output writeString:1 value:self.uuid];
  }
  if (self.hasImei) {
    [output writeString:2 value:self.imei];
  }
  if (self.hasMac) {
    [output writeString:3 value:self.mac];
  }
  if (self.hasAndroidId) {
    [output writeString:5 value:self.androidId];
  }
  if (self.hasCustomId) {
    [output writeString:6 value:self.customId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUuid) {
    size_ += computeStringSize(1, self.uuid);
  }
  if (self.hasImei) {
    size_ += computeStringSize(2, self.imei);
  }
  if (self.hasMac) {
    size_ += computeStringSize(3, self.mac);
  }
  if (self.hasAndroidId) {
    size_ += computeStringSize(5, self.androidId);
  }
  if (self.hasCustomId) {
    size_ += computeStringSize(6, self.customId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DeviceUdId*) parseFromData:(NSData*) data {
  return (DeviceUdId*)[[[DeviceUdId builder] mergeFromData:data] build];
}
+ (DeviceUdId*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceUdId*)[[[DeviceUdId builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DeviceUdId*) parseFromInputStream:(NSInputStream*) input {
  return (DeviceUdId*)[[[DeviceUdId builder] mergeFromInputStream:input] build];
}
+ (DeviceUdId*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceUdId*)[[[DeviceUdId builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceUdId*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DeviceUdId*)[[[DeviceUdId builder] mergeFromCodedInputStream:input] build];
}
+ (DeviceUdId*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeviceUdId*)[[[DeviceUdId builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeviceUdIdBuilder*) builder {
  return [[DeviceUdIdBuilder alloc] init];
}
+ (DeviceUdIdBuilder*) builderWithPrototype:(DeviceUdId*) prototype {
  return [[DeviceUdId builder] mergeFrom:prototype];
}
- (DeviceUdIdBuilder*) builder {
  return [DeviceUdId builder];
}
- (DeviceUdIdBuilder*) toBuilder {
  return [DeviceUdId builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uuid", self.uuid];
  }
  if (self.hasImei) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imei", self.imei];
  }
  if (self.hasMac) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mac", self.mac];
  }
  if (self.hasAndroidId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"androidId", self.androidId];
  }
  if (self.hasCustomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"customId", self.customId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUuid) {
    [dictionary setObject: self.uuid forKey: @"uuid"];
  }
  if (self.hasImei) {
    [dictionary setObject: self.imei forKey: @"imei"];
  }
  if (self.hasMac) {
    [dictionary setObject: self.mac forKey: @"mac"];
  }
  if (self.hasAndroidId) {
    [dictionary setObject: self.androidId forKey: @"androidId"];
  }
  if (self.hasCustomId) {
    [dictionary setObject: self.customId forKey: @"customId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DeviceUdId class]]) {
    return NO;
  }
  DeviceUdId *otherMessage = other;
  return
      self.hasUuid == otherMessage.hasUuid &&
      (!self.hasUuid || [self.uuid isEqual:otherMessage.uuid]) &&
      self.hasImei == otherMessage.hasImei &&
      (!self.hasImei || [self.imei isEqual:otherMessage.imei]) &&
      self.hasMac == otherMessage.hasMac &&
      (!self.hasMac || [self.mac isEqual:otherMessage.mac]) &&
      self.hasAndroidId == otherMessage.hasAndroidId &&
      (!self.hasAndroidId || [self.androidId isEqual:otherMessage.androidId]) &&
      self.hasCustomId == otherMessage.hasCustomId &&
      (!self.hasCustomId || [self.customId isEqual:otherMessage.customId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUuid) {
    hashCode = hashCode * 31 + [self.uuid hash];
  }
  if (self.hasImei) {
    hashCode = hashCode * 31 + [self.imei hash];
  }
  if (self.hasMac) {
    hashCode = hashCode * 31 + [self.mac hash];
  }
  if (self.hasAndroidId) {
    hashCode = hashCode * 31 + [self.androidId hash];
  }
  if (self.hasCustomId) {
    hashCode = hashCode * 31 + [self.customId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DeviceUdIdBuilder()
@property (strong) DeviceUdId* resultUdId;
@end

@implementation DeviceUdIdBuilder
@synthesize resultUdId;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUdId = [[DeviceUdId alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUdId;
}
- (DeviceUdIdBuilder*) clear {
  self.resultUdId = [[DeviceUdId alloc] init];
  return self;
}
- (DeviceUdIdBuilder*) clone {
  return [DeviceUdId builderWithPrototype:resultUdId];
}
- (DeviceUdId*) defaultInstance {
  return [DeviceUdId defaultInstance];
}
- (DeviceUdId*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DeviceUdId*) buildPartial {
  DeviceUdId* returnMe = resultUdId;
  self.resultUdId = nil;
  return returnMe;
}
- (DeviceUdIdBuilder*) mergeFrom:(DeviceUdId*) other {
  if (other == [DeviceUdId defaultInstance]) {
    return self;
  }
  if (other.hasUuid) {
    [self setUuid:other.uuid];
  }
  if (other.hasImei) {
    [self setImei:other.imei];
  }
  if (other.hasMac) {
    [self setMac:other.mac];
  }
  if (other.hasAndroidId) {
    [self setAndroidId:other.androidId];
  }
  if (other.hasCustomId) {
    [self setCustomId:other.customId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DeviceUdIdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DeviceUdIdBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUuid:[input readString]];
        break;
      }
      case 18: {
        [self setImei:[input readString]];
        break;
      }
      case 26: {
        [self setMac:[input readString]];
        break;
      }
      case 42: {
        [self setAndroidId:[input readString]];
        break;
      }
      case 50: {
        [self setCustomId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUuid {
  return resultUdId.hasUuid;
}
- (NSString*) uuid {
  return resultUdId.uuid;
}
- (DeviceUdIdBuilder*) setUuid:(NSString*) value {
  resultUdId.hasUuid = YES;
  resultUdId.uuid = value;
  return self;
}
- (DeviceUdIdBuilder*) clearUuid {
  resultUdId.hasUuid = NO;
  resultUdId.uuid = @"";
  return self;
}
- (BOOL) hasImei {
  return resultUdId.hasImei;
}
- (NSString*) imei {
  return resultUdId.imei;
}
- (DeviceUdIdBuilder*) setImei:(NSString*) value {
  resultUdId.hasImei = YES;
  resultUdId.imei = value;
  return self;
}
- (DeviceUdIdBuilder*) clearImei {
  resultUdId.hasImei = NO;
  resultUdId.imei = @"";
  return self;
}
- (BOOL) hasMac {
  return resultUdId.hasMac;
}
- (NSString*) mac {
  return resultUdId.mac;
}
- (DeviceUdIdBuilder*) setMac:(NSString*) value {
  resultUdId.hasMac = YES;
  resultUdId.mac = value;
  return self;
}
- (DeviceUdIdBuilder*) clearMac {
  resultUdId.hasMac = NO;
  resultUdId.mac = @"";
  return self;
}
- (BOOL) hasAndroidId {
  return resultUdId.hasAndroidId;
}
- (NSString*) androidId {
  return resultUdId.androidId;
}
- (DeviceUdIdBuilder*) setAndroidId:(NSString*) value {
  resultUdId.hasAndroidId = YES;
  resultUdId.androidId = value;
  return self;
}
- (DeviceUdIdBuilder*) clearAndroidId {
  resultUdId.hasAndroidId = NO;
  resultUdId.androidId = @"";
  return self;
}
- (BOOL) hasCustomId {
  return resultUdId.hasCustomId;
}
- (NSString*) customId {
  return resultUdId.customId;
}
- (DeviceUdIdBuilder*) setCustomId:(NSString*) value {
  resultUdId.hasCustomId = YES;
  resultUdId.customId = value;
  return self;
}
- (DeviceUdIdBuilder*) clearCustomId {
  resultUdId.hasCustomId = NO;
  resultUdId.customId = @"";
  return self;
}
@end

@interface DeviceBuilder()
@property (strong) Device* resultDevice;
@end

@implementation DeviceBuilder
@synthesize resultDevice;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDevice = [[Device alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDevice;
}
- (DeviceBuilder*) clear {
  self.resultDevice = [[Device alloc] init];
  return self;
}
- (DeviceBuilder*) clone {
  return [Device builderWithPrototype:resultDevice];
}
- (Device*) defaultInstance {
  return [Device defaultInstance];
}
- (Device*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Device*) buildPartial {
  Device* returnMe = resultDevice;
  self.resultDevice = nil;
  return returnMe;
}
- (DeviceBuilder*) mergeFrom:(Device*) other {
  if (other == [Device defaultInstance]) {
    return self;
  }
  if (other.hasDeviceType) {
    [self setDeviceType:other.deviceType];
  }
  if (other.hasOsType) {
    [self setOsType:other.osType];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  if (other.hasVendor) {
    [self setVendor:other.vendor];
  }
  if (other.hasModel) {
    [self setModel:other.model];
  }
  if (other.hasUdid) {
    [self mergeUdid:other.udid];
  }
  if (other.hasScreenSize) {
    [self mergeScreenSize:other.screenSize];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DeviceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DeviceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        DeviceDeviceType value = (DeviceDeviceType)[input readEnum];
        if (DeviceDeviceTypeIsValidValue(value)) {
          [self setDeviceType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        DeviceOsType value = (DeviceOsType)[input readEnum];
        if (DeviceOsTypeIsValidValue(value)) {
          [self setOsType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setOsVersion:[input readString]];
        break;
      }
      case 34: {
        [self setVendor:[input readData]];
        break;
      }
      case 42: {
        [self setModel:[input readData]];
        break;
      }
      case 50: {
        DeviceUdIdBuilder* subBuilder = [DeviceUdId builder];
        if (self.hasUdid) {
          [subBuilder mergeFrom:self.udid];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUdid:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        DeviceSizeBuilder* subBuilder = [DeviceSize builder];
        if (self.hasScreenSize) {
          [subBuilder mergeFrom:self.screenSize];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setScreenSize:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDeviceType {
  return resultDevice.hasDeviceType;
}
- (DeviceDeviceType) deviceType {
  return resultDevice.deviceType;
}
- (DeviceBuilder*) setDeviceType:(DeviceDeviceType) value {
  resultDevice.hasDeviceType = YES;
  resultDevice.deviceType = value;
  return self;
}
- (DeviceBuilder*) clearDeviceType {
  resultDevice.hasDeviceType = NO;
  resultDevice.deviceType = DeviceDeviceTypeDeviceUnknown;
  return self;
}
- (BOOL) hasOsType {
  return resultDevice.hasOsType;
}
- (DeviceOsType) osType {
  return resultDevice.osType;
}
- (DeviceBuilder*) setOsType:(DeviceOsType) value {
  resultDevice.hasOsType = YES;
  resultDevice.osType = value;
  return self;
}
- (DeviceBuilder*) clearOsType {
  resultDevice.hasOsType = NO;
  resultDevice.osType = DeviceOsTypeWin;
  return self;
}
- (BOOL) hasOsVersion {
  return resultDevice.hasOsVersion;
}
- (NSString*) osVersion {
  return resultDevice.osVersion;
}
- (DeviceBuilder*) setOsVersion:(NSString*) value {
  resultDevice.hasOsVersion = YES;
  resultDevice.osVersion = value;
  return self;
}
- (DeviceBuilder*) clearOsVersion {
  resultDevice.hasOsVersion = NO;
  resultDevice.osVersion = @"";
  return self;
}
- (BOOL) hasVendor {
  return resultDevice.hasVendor;
}
- (NSData*) vendor {
  return resultDevice.vendor;
}
- (DeviceBuilder*) setVendor:(NSData*) value {
  resultDevice.hasVendor = YES;
  resultDevice.vendor = value;
  return self;
}
- (DeviceBuilder*) clearVendor {
  resultDevice.hasVendor = NO;
  resultDevice.vendor = [NSData data];
  return self;
}
- (BOOL) hasModel {
  return resultDevice.hasModel;
}
- (NSData*) model {
  return resultDevice.model;
}
- (DeviceBuilder*) setModel:(NSData*) value {
  resultDevice.hasModel = YES;
  resultDevice.model = value;
  return self;
}
- (DeviceBuilder*) clearModel {
  resultDevice.hasModel = NO;
  resultDevice.model = [NSData data];
  return self;
}
- (BOOL) hasUdid {
  return resultDevice.hasUdid;
}
- (DeviceUdId*) udid {
  return resultDevice.udid;
}
- (DeviceBuilder*) setUdid:(DeviceUdId*) value {
  resultDevice.hasUdid = YES;
  resultDevice.udid = value;
  return self;
}
- (DeviceBuilder*) setUdidBuilder:(DeviceUdIdBuilder*) builderForValue {
  return [self setUdid:[builderForValue build]];
}
- (DeviceBuilder*) mergeUdid:(DeviceUdId*) value {
  if (resultDevice.hasUdid &&
      resultDevice.udid != [DeviceUdId defaultInstance]) {
    resultDevice.udid =
      [[[DeviceUdId builderWithPrototype:resultDevice.udid] mergeFrom:value] buildPartial];
  } else {
    resultDevice.udid = value;
  }
  resultDevice.hasUdid = YES;
  return self;
}
- (DeviceBuilder*) clearUdid {
  resultDevice.hasUdid = NO;
  resultDevice.udid = [DeviceUdId defaultInstance];
  return self;
}
- (BOOL) hasScreenSize {
  return resultDevice.hasScreenSize;
}
- (DeviceSize*) screenSize {
  return resultDevice.screenSize;
}
- (DeviceBuilder*) setScreenSize:(DeviceSize*) value {
  resultDevice.hasScreenSize = YES;
  resultDevice.screenSize = value;
  return self;
}
- (DeviceBuilder*) setScreenSizeBuilder:(DeviceSizeBuilder*) builderForValue {
  return [self setScreenSize:[builderForValue build]];
}
- (DeviceBuilder*) mergeScreenSize:(DeviceSize*) value {
  if (resultDevice.hasScreenSize &&
      resultDevice.screenSize != [DeviceSize defaultInstance]) {
    resultDevice.screenSize =
      [[[DeviceSize builderWithPrototype:resultDevice.screenSize] mergeFrom:value] buildPartial];
  } else {
    resultDevice.screenSize = value;
  }
  resultDevice.hasScreenSize = YES;
  return self;
}
- (DeviceBuilder*) clearScreenSize {
  resultDevice.hasScreenSize = NO;
  resultDevice.screenSize = [DeviceSize defaultInstance];
  return self;
}
@end

@interface QiWenApiReq ()
@property UInt32 cmd;
@property (strong) Device* device;
@property (strong) NSData* body;
@property (strong) LoginedRegUser* loginedUser;
@property (strong) Gps* gps;
@property (strong) NSString* verName;
@end

@implementation QiWenApiReq

- (BOOL) hasCmd {
  return !!hasCmd_;
}
- (void) setHasCmd:(BOOL) _value_ {
  hasCmd_ = !!_value_;
}
@synthesize cmd;
- (BOOL) hasDevice {
  return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) _value_ {
  hasDevice_ = !!_value_;
}
@synthesize device;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (BOOL) hasLoginedUser {
  return !!hasLoginedUser_;
}
- (void) setHasLoginedUser:(BOOL) _value_ {
  hasLoginedUser_ = !!_value_;
}
@synthesize loginedUser;
- (BOOL) hasGps {
  return !!hasGps_;
}
- (void) setHasGps:(BOOL) _value_ {
  hasGps_ = !!_value_;
}
@synthesize gps;
- (BOOL) hasVerName {
  return !!hasVerName_;
}
- (void) setHasVerName:(BOOL) _value_ {
  hasVerName_ = !!_value_;
}
@synthesize verName;
- (instancetype) init {
  if ((self = [super init])) {
    self.cmd = 0;
    self.device = [Device defaultInstance];
    self.body = [NSData data];
    self.loginedUser = [LoginedRegUser defaultInstance];
    self.gps = [Gps defaultInstance];
    self.verName = @"";
  }
  return self;
}
static QiWenApiReq* defaultQiWenApiReqInstance = nil;
+ (void) initialize {
  if (self == [QiWenApiReq class]) {
    defaultQiWenApiReqInstance = [[QiWenApiReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultQiWenApiReqInstance;
}
- (instancetype) defaultInstance {
  return defaultQiWenApiReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCmd) {
    return NO;
  }
  if (!self.hasDevice) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmd) {
    [output writeUInt32:1 value:self.cmd];
  }
  if (self.hasDevice) {
    [output writeMessage:2 value:self.device];
  }
  if (self.hasBody) {
    [output writeData:3 value:self.body];
  }
  if (self.hasLoginedUser) {
    [output writeMessage:4 value:self.loginedUser];
  }
  if (self.hasGps) {
    [output writeMessage:5 value:self.gps];
  }
  if (self.hasVerName) {
    [output writeString:7 value:self.verName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmd) {
    size_ += computeUInt32Size(1, self.cmd);
  }
  if (self.hasDevice) {
    size_ += computeMessageSize(2, self.device);
  }
  if (self.hasBody) {
    size_ += computeDataSize(3, self.body);
  }
  if (self.hasLoginedUser) {
    size_ += computeMessageSize(4, self.loginedUser);
  }
  if (self.hasGps) {
    size_ += computeMessageSize(5, self.gps);
  }
  if (self.hasVerName) {
    size_ += computeStringSize(7, self.verName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (QiWenApiReq*) parseFromData:(NSData*) data {
  return (QiWenApiReq*)[[[QiWenApiReq builder] mergeFromData:data] build];
}
+ (QiWenApiReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenApiReq*)[[[QiWenApiReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QiWenApiReq*) parseFromInputStream:(NSInputStream*) input {
  return (QiWenApiReq*)[[[QiWenApiReq builder] mergeFromInputStream:input] build];
}
+ (QiWenApiReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenApiReq*)[[[QiWenApiReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiWenApiReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QiWenApiReq*)[[[QiWenApiReq builder] mergeFromCodedInputStream:input] build];
}
+ (QiWenApiReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenApiReq*)[[[QiWenApiReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiWenApiReqBuilder*) builder {
  return [[QiWenApiReqBuilder alloc] init];
}
+ (QiWenApiReqBuilder*) builderWithPrototype:(QiWenApiReq*) prototype {
  return [[QiWenApiReq builder] mergeFrom:prototype];
}
- (QiWenApiReqBuilder*) builder {
  return [QiWenApiReq builder];
}
- (QiWenApiReqBuilder*) toBuilder {
  return [QiWenApiReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmd", [NSNumber numberWithInteger:self.cmd]];
  }
  if (self.hasDevice) {
    [output appendFormat:@"%@%@ {\n", indent, @"device"];
    [self.device writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"body", self.body];
  }
  if (self.hasLoginedUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginedUser"];
    [self.loginedUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGps) {
    [output appendFormat:@"%@%@ {\n", indent, @"gps"];
    [self.gps writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasVerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verName", self.verName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCmd) {
    [dictionary setObject: [NSNumber numberWithInteger:self.cmd] forKey: @"cmd"];
  }
  if (self.hasDevice) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.device storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"device"];
  }
  if (self.hasBody) {
    [dictionary setObject: self.body forKey: @"body"];
  }
  if (self.hasLoginedUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginedUser storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginedUser"];
  }
  if (self.hasGps) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.gps storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"gps"];
  }
  if (self.hasVerName) {
    [dictionary setObject: self.verName forKey: @"verName"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[QiWenApiReq class]]) {
    return NO;
  }
  QiWenApiReq *otherMessage = other;
  return
      self.hasCmd == otherMessage.hasCmd &&
      (!self.hasCmd || self.cmd == otherMessage.cmd) &&
      self.hasDevice == otherMessage.hasDevice &&
      (!self.hasDevice || [self.device isEqual:otherMessage.device]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      self.hasLoginedUser == otherMessage.hasLoginedUser &&
      (!self.hasLoginedUser || [self.loginedUser isEqual:otherMessage.loginedUser]) &&
      self.hasGps == otherMessage.hasGps &&
      (!self.hasGps || [self.gps isEqual:otherMessage.gps]) &&
      self.hasVerName == otherMessage.hasVerName &&
      (!self.hasVerName || [self.verName isEqual:otherMessage.verName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmd] hash];
  }
  if (self.hasDevice) {
    hashCode = hashCode * 31 + [self.device hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  if (self.hasLoginedUser) {
    hashCode = hashCode * 31 + [self.loginedUser hash];
  }
  if (self.hasGps) {
    hashCode = hashCode * 31 + [self.gps hash];
  }
  if (self.hasVerName) {
    hashCode = hashCode * 31 + [self.verName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface QiWenApiReqBuilder()
@property (strong) QiWenApiReq* resultQiWenApiReq;
@end

@implementation QiWenApiReqBuilder
@synthesize resultQiWenApiReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQiWenApiReq = [[QiWenApiReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQiWenApiReq;
}
- (QiWenApiReqBuilder*) clear {
  self.resultQiWenApiReq = [[QiWenApiReq alloc] init];
  return self;
}
- (QiWenApiReqBuilder*) clone {
  return [QiWenApiReq builderWithPrototype:resultQiWenApiReq];
}
- (QiWenApiReq*) defaultInstance {
  return [QiWenApiReq defaultInstance];
}
- (QiWenApiReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QiWenApiReq*) buildPartial {
  QiWenApiReq* returnMe = resultQiWenApiReq;
  self.resultQiWenApiReq = nil;
  return returnMe;
}
- (QiWenApiReqBuilder*) mergeFrom:(QiWenApiReq*) other {
  if (other == [QiWenApiReq defaultInstance]) {
    return self;
  }
  if (other.hasCmd) {
    [self setCmd:other.cmd];
  }
  if (other.hasDevice) {
    [self mergeDevice:other.device];
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  if (other.hasLoginedUser) {
    [self mergeLoginedUser:other.loginedUser];
  }
  if (other.hasGps) {
    [self mergeGps:other.gps];
  }
  if (other.hasVerName) {
    [self setVerName:other.verName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QiWenApiReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QiWenApiReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmd:[input readUInt32]];
        break;
      }
      case 18: {
        DeviceBuilder* subBuilder = [Device builder];
        if (self.hasDevice) {
          [subBuilder mergeFrom:self.device];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDevice:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setBody:[input readData]];
        break;
      }
      case 34: {
        LoginedRegUserBuilder* subBuilder = [LoginedRegUser builder];
        if (self.hasLoginedUser) {
          [subBuilder mergeFrom:self.loginedUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginedUser:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        GpsBuilder* subBuilder = [Gps builder];
        if (self.hasGps) {
          [subBuilder mergeFrom:self.gps];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGps:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setVerName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCmd {
  return resultQiWenApiReq.hasCmd;
}
- (UInt32) cmd {
  return resultQiWenApiReq.cmd;
}
- (QiWenApiReqBuilder*) setCmd:(UInt32) value {
  resultQiWenApiReq.hasCmd = YES;
  resultQiWenApiReq.cmd = value;
  return self;
}
- (QiWenApiReqBuilder*) clearCmd {
  resultQiWenApiReq.hasCmd = NO;
  resultQiWenApiReq.cmd = 0;
  return self;
}
- (BOOL) hasDevice {
  return resultQiWenApiReq.hasDevice;
}
- (Device*) device {
  return resultQiWenApiReq.device;
}
- (QiWenApiReqBuilder*) setDevice:(Device*) value {
  resultQiWenApiReq.hasDevice = YES;
  resultQiWenApiReq.device = value;
  return self;
}
- (QiWenApiReqBuilder*) setDeviceBuilder:(DeviceBuilder*) builderForValue {
  return [self setDevice:[builderForValue build]];
}
- (QiWenApiReqBuilder*) mergeDevice:(Device*) value {
  if (resultQiWenApiReq.hasDevice &&
      resultQiWenApiReq.device != [Device defaultInstance]) {
    resultQiWenApiReq.device =
      [[[Device builderWithPrototype:resultQiWenApiReq.device] mergeFrom:value] buildPartial];
  } else {
    resultQiWenApiReq.device = value;
  }
  resultQiWenApiReq.hasDevice = YES;
  return self;
}
- (QiWenApiReqBuilder*) clearDevice {
  resultQiWenApiReq.hasDevice = NO;
  resultQiWenApiReq.device = [Device defaultInstance];
  return self;
}
- (BOOL) hasBody {
  return resultQiWenApiReq.hasBody;
}
- (NSData*) body {
  return resultQiWenApiReq.body;
}
- (QiWenApiReqBuilder*) setBody:(NSData*) value {
  resultQiWenApiReq.hasBody = YES;
  resultQiWenApiReq.body = value;
  return self;
}
- (QiWenApiReqBuilder*) clearBody {
  resultQiWenApiReq.hasBody = NO;
  resultQiWenApiReq.body = [NSData data];
  return self;
}
- (BOOL) hasLoginedUser {
  return resultQiWenApiReq.hasLoginedUser;
}
- (LoginedRegUser*) loginedUser {
  return resultQiWenApiReq.loginedUser;
}
- (QiWenApiReqBuilder*) setLoginedUser:(LoginedRegUser*) value {
  resultQiWenApiReq.hasLoginedUser = YES;
  resultQiWenApiReq.loginedUser = value;
  return self;
}
- (QiWenApiReqBuilder*) setLoginedUserBuilder:(LoginedRegUserBuilder*) builderForValue {
  return [self setLoginedUser:[builderForValue build]];
}
- (QiWenApiReqBuilder*) mergeLoginedUser:(LoginedRegUser*) value {
  if (resultQiWenApiReq.hasLoginedUser &&
      resultQiWenApiReq.loginedUser != [LoginedRegUser defaultInstance]) {
    resultQiWenApiReq.loginedUser =
      [[[LoginedRegUser builderWithPrototype:resultQiWenApiReq.loginedUser] mergeFrom:value] buildPartial];
  } else {
    resultQiWenApiReq.loginedUser = value;
  }
  resultQiWenApiReq.hasLoginedUser = YES;
  return self;
}
- (QiWenApiReqBuilder*) clearLoginedUser {
  resultQiWenApiReq.hasLoginedUser = NO;
  resultQiWenApiReq.loginedUser = [LoginedRegUser defaultInstance];
  return self;
}
- (BOOL) hasGps {
  return resultQiWenApiReq.hasGps;
}
- (Gps*) gps {
  return resultQiWenApiReq.gps;
}
- (QiWenApiReqBuilder*) setGps:(Gps*) value {
  resultQiWenApiReq.hasGps = YES;
  resultQiWenApiReq.gps = value;
  return self;
}
- (QiWenApiReqBuilder*) setGpsBuilder:(GpsBuilder*) builderForValue {
  return [self setGps:[builderForValue build]];
}
- (QiWenApiReqBuilder*) mergeGps:(Gps*) value {
  if (resultQiWenApiReq.hasGps &&
      resultQiWenApiReq.gps != [Gps defaultInstance]) {
    resultQiWenApiReq.gps =
      [[[Gps builderWithPrototype:resultQiWenApiReq.gps] mergeFrom:value] buildPartial];
  } else {
    resultQiWenApiReq.gps = value;
  }
  resultQiWenApiReq.hasGps = YES;
  return self;
}
- (QiWenApiReqBuilder*) clearGps {
  resultQiWenApiReq.hasGps = NO;
  resultQiWenApiReq.gps = [Gps defaultInstance];
  return self;
}
- (BOOL) hasVerName {
  return resultQiWenApiReq.hasVerName;
}
- (NSString*) verName {
  return resultQiWenApiReq.verName;
}
- (QiWenApiReqBuilder*) setVerName:(NSString*) value {
  resultQiWenApiReq.hasVerName = YES;
  resultQiWenApiReq.verName = value;
  return self;
}
- (QiWenApiReqBuilder*) clearVerName {
  resultQiWenApiReq.hasVerName = NO;
  resultQiWenApiReq.verName = @"";
  return self;
}
@end

@interface QiWenApiRes ()
@property UInt32 cmd;
@property ErrCode err;
@property (strong) NSData* body;
@end

@implementation QiWenApiRes

- (BOOL) hasCmd {
  return !!hasCmd_;
}
- (void) setHasCmd:(BOOL) _value_ {
  hasCmd_ = !!_value_;
}
@synthesize cmd;
- (BOOL) hasErr {
  return !!hasErr_;
}
- (void) setHasErr:(BOOL) _value_ {
  hasErr_ = !!_value_;
}
@synthesize err;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (instancetype) init {
  if ((self = [super init])) {
    self.cmd = 0;
    self.err = ErrCodeErrNone;
    self.body = [NSData data];
  }
  return self;
}
static QiWenApiRes* defaultQiWenApiResInstance = nil;
+ (void) initialize {
  if (self == [QiWenApiRes class]) {
    defaultQiWenApiResInstance = [[QiWenApiRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultQiWenApiResInstance;
}
- (instancetype) defaultInstance {
  return defaultQiWenApiResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCmd) {
    return NO;
  }
  if (!self.hasErr) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmd) {
    [output writeUInt32:1 value:self.cmd];
  }
  if (self.hasErr) {
    [output writeEnum:2 value:self.err];
  }
  if (self.hasBody) {
    [output writeData:3 value:self.body];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmd) {
    size_ += computeUInt32Size(1, self.cmd);
  }
  if (self.hasErr) {
    size_ += computeEnumSize(2, self.err);
  }
  if (self.hasBody) {
    size_ += computeDataSize(3, self.body);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (QiWenApiRes*) parseFromData:(NSData*) data {
  return (QiWenApiRes*)[[[QiWenApiRes builder] mergeFromData:data] build];
}
+ (QiWenApiRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenApiRes*)[[[QiWenApiRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QiWenApiRes*) parseFromInputStream:(NSInputStream*) input {
  return (QiWenApiRes*)[[[QiWenApiRes builder] mergeFromInputStream:input] build];
}
+ (QiWenApiRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenApiRes*)[[[QiWenApiRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiWenApiRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QiWenApiRes*)[[[QiWenApiRes builder] mergeFromCodedInputStream:input] build];
}
+ (QiWenApiRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenApiRes*)[[[QiWenApiRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiWenApiResBuilder*) builder {
  return [[QiWenApiResBuilder alloc] init];
}
+ (QiWenApiResBuilder*) builderWithPrototype:(QiWenApiRes*) prototype {
  return [[QiWenApiRes builder] mergeFrom:prototype];
}
- (QiWenApiResBuilder*) builder {
  return [QiWenApiRes builder];
}
- (QiWenApiResBuilder*) toBuilder {
  return [QiWenApiRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmd", [NSNumber numberWithInteger:self.cmd]];
  }
  if (self.hasErr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"err", NSStringFromErrCode(self.err)];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"body", self.body];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCmd) {
    [dictionary setObject: [NSNumber numberWithInteger:self.cmd] forKey: @"cmd"];
  }
  if (self.hasErr) {
    [dictionary setObject: @(self.err) forKey: @"err"];
  }
  if (self.hasBody) {
    [dictionary setObject: self.body forKey: @"body"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[QiWenApiRes class]]) {
    return NO;
  }
  QiWenApiRes *otherMessage = other;
  return
      self.hasCmd == otherMessage.hasCmd &&
      (!self.hasCmd || self.cmd == otherMessage.cmd) &&
      self.hasErr == otherMessage.hasErr &&
      (!self.hasErr || self.err == otherMessage.err) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cmd] hash];
  }
  if (self.hasErr) {
    hashCode = hashCode * 31 + self.err;
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface QiWenApiResBuilder()
@property (strong) QiWenApiRes* resultQiWenApiRes;
@end

@implementation QiWenApiResBuilder
@synthesize resultQiWenApiRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQiWenApiRes = [[QiWenApiRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQiWenApiRes;
}
- (QiWenApiResBuilder*) clear {
  self.resultQiWenApiRes = [[QiWenApiRes alloc] init];
  return self;
}
- (QiWenApiResBuilder*) clone {
  return [QiWenApiRes builderWithPrototype:resultQiWenApiRes];
}
- (QiWenApiRes*) defaultInstance {
  return [QiWenApiRes defaultInstance];
}
- (QiWenApiRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QiWenApiRes*) buildPartial {
  QiWenApiRes* returnMe = resultQiWenApiRes;
  self.resultQiWenApiRes = nil;
  return returnMe;
}
- (QiWenApiResBuilder*) mergeFrom:(QiWenApiRes*) other {
  if (other == [QiWenApiRes defaultInstance]) {
    return self;
  }
  if (other.hasCmd) {
    [self setCmd:other.cmd];
  }
  if (other.hasErr) {
    [self setErr:other.err];
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QiWenApiResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QiWenApiResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCmd:[input readUInt32]];
        break;
      }
      case 16: {
        ErrCode value = (ErrCode)[input readEnum];
        if (ErrCodeIsValidValue(value)) {
          [self setErr:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setBody:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasCmd {
  return resultQiWenApiRes.hasCmd;
}
- (UInt32) cmd {
  return resultQiWenApiRes.cmd;
}
- (QiWenApiResBuilder*) setCmd:(UInt32) value {
  resultQiWenApiRes.hasCmd = YES;
  resultQiWenApiRes.cmd = value;
  return self;
}
- (QiWenApiResBuilder*) clearCmd {
  resultQiWenApiRes.hasCmd = NO;
  resultQiWenApiRes.cmd = 0;
  return self;
}
- (BOOL) hasErr {
  return resultQiWenApiRes.hasErr;
}
- (ErrCode) err {
  return resultQiWenApiRes.err;
}
- (QiWenApiResBuilder*) setErr:(ErrCode) value {
  resultQiWenApiRes.hasErr = YES;
  resultQiWenApiRes.err = value;
  return self;
}
- (QiWenApiResBuilder*) clearErr {
  resultQiWenApiRes.hasErr = NO;
  resultQiWenApiRes.err = ErrCodeErrNone;
  return self;
}
- (BOOL) hasBody {
  return resultQiWenApiRes.hasBody;
}
- (NSData*) body {
  return resultQiWenApiRes.body;
}
- (QiWenApiResBuilder*) setBody:(NSData*) value {
  resultQiWenApiRes.hasBody = YES;
  resultQiWenApiRes.body = value;
  return self;
}
- (QiWenApiResBuilder*) clearBody {
  resultQiWenApiRes.hasBody = NO;
  resultQiWenApiRes.body = [NSData data];
  return self;
}
@end

@interface QiWenDetailReq ()
@property UInt32 id;
@end

@implementation QiWenDetailReq

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
  }
  return self;
}
static QiWenDetailReq* defaultQiWenDetailReqInstance = nil;
+ (void) initialize {
  if (self == [QiWenDetailReq class]) {
    defaultQiWenDetailReqInstance = [[QiWenDetailReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultQiWenDetailReqInstance;
}
- (instancetype) defaultInstance {
  return defaultQiWenDetailReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (QiWenDetailReq*) parseFromData:(NSData*) data {
  return (QiWenDetailReq*)[[[QiWenDetailReq builder] mergeFromData:data] build];
}
+ (QiWenDetailReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenDetailReq*)[[[QiWenDetailReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QiWenDetailReq*) parseFromInputStream:(NSInputStream*) input {
  return (QiWenDetailReq*)[[[QiWenDetailReq builder] mergeFromInputStream:input] build];
}
+ (QiWenDetailReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenDetailReq*)[[[QiWenDetailReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiWenDetailReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QiWenDetailReq*)[[[QiWenDetailReq builder] mergeFromCodedInputStream:input] build];
}
+ (QiWenDetailReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenDetailReq*)[[[QiWenDetailReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiWenDetailReqBuilder*) builder {
  return [[QiWenDetailReqBuilder alloc] init];
}
+ (QiWenDetailReqBuilder*) builderWithPrototype:(QiWenDetailReq*) prototype {
  return [[QiWenDetailReq builder] mergeFrom:prototype];
}
- (QiWenDetailReqBuilder*) builder {
  return [QiWenDetailReq builder];
}
- (QiWenDetailReqBuilder*) toBuilder {
  return [QiWenDetailReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[QiWenDetailReq class]]) {
    return NO;
  }
  QiWenDetailReq *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface QiWenDetailReqBuilder()
@property (strong) QiWenDetailReq* resultQiWenDetailReq;
@end

@implementation QiWenDetailReqBuilder
@synthesize resultQiWenDetailReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQiWenDetailReq = [[QiWenDetailReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQiWenDetailReq;
}
- (QiWenDetailReqBuilder*) clear {
  self.resultQiWenDetailReq = [[QiWenDetailReq alloc] init];
  return self;
}
- (QiWenDetailReqBuilder*) clone {
  return [QiWenDetailReq builderWithPrototype:resultQiWenDetailReq];
}
- (QiWenDetailReq*) defaultInstance {
  return [QiWenDetailReq defaultInstance];
}
- (QiWenDetailReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QiWenDetailReq*) buildPartial {
  QiWenDetailReq* returnMe = resultQiWenDetailReq;
  self.resultQiWenDetailReq = nil;
  return returnMe;
}
- (QiWenDetailReqBuilder*) mergeFrom:(QiWenDetailReq*) other {
  if (other == [QiWenDetailReq defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QiWenDetailReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QiWenDetailReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultQiWenDetailReq.hasId;
}
- (UInt32) id {
  return resultQiWenDetailReq.id;
}
- (QiWenDetailReqBuilder*) setId:(UInt32) value {
  resultQiWenDetailReq.hasId = YES;
  resultQiWenDetailReq.id = value;
  return self;
}
- (QiWenDetailReqBuilder*) clearId {
  resultQiWenDetailReq.hasId = NO;
  resultQiWenDetailReq.id = 0;
  return self;
}
@end

@interface QiWenDetailRes ()
@property (strong) NSMutableArray<TextPicVideo*> * qiwenArray;
@property (strong) NSString* title;
@property (strong) NSString* simpleText;
@property UInt64 commentCount;
@property (strong) NSMutableArray * labelsArray;
@property (strong) NSMutableArray<Comment*> * commentsArray;
@property (strong) Source* source;
@property UInt64 t;
@property UInt32 isBookmark;
@property (strong) NSMutableArray<ArticleSimple*> * relationArticleArray;
@property (strong) NSString* shareUrl;
@end

@implementation QiWenDetailRes

@synthesize qiwenArray;
@dynamic qiwen;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasSimpleText {
  return !!hasSimpleText_;
}
- (void) setHasSimpleText:(BOOL) _value_ {
  hasSimpleText_ = !!_value_;
}
@synthesize simpleText;
- (BOOL) hasCommentCount {
  return !!hasCommentCount_;
}
- (void) setHasCommentCount:(BOOL) _value_ {
  hasCommentCount_ = !!_value_;
}
@synthesize commentCount;
@synthesize labelsArray;
@dynamic labels;
@synthesize commentsArray;
@dynamic comments;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) _value_ {
  hasSource_ = !!_value_;
}
@synthesize source;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasIsBookmark {
  return !!hasIsBookmark_;
}
- (void) setHasIsBookmark:(BOOL) _value_ {
  hasIsBookmark_ = !!_value_;
}
@synthesize isBookmark;
@synthesize relationArticleArray;
@dynamic relationArticle;
- (BOOL) hasShareUrl {
  return !!hasShareUrl_;
}
- (void) setHasShareUrl:(BOOL) _value_ {
  hasShareUrl_ = !!_value_;
}
@synthesize shareUrl;
- (instancetype) init {
  if ((self = [super init])) {
    self.title = @"";
    self.simpleText = @"";
    self.commentCount = 0L;
    self.source = [Source defaultInstance];
    self.t = 0L;
    self.isBookmark = 0;
    self.shareUrl = @"";
  }
  return self;
}
static QiWenDetailRes* defaultQiWenDetailResInstance = nil;
+ (void) initialize {
  if (self == [QiWenDetailRes class]) {
    defaultQiWenDetailResInstance = [[QiWenDetailRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultQiWenDetailResInstance;
}
- (instancetype) defaultInstance {
  return defaultQiWenDetailResInstance;
}
- (NSArray<TextPicVideo*> *)qiwen {
  return qiwenArray;
}
- (TextPicVideo*)qiwenAtIndex:(NSUInteger)index {
  return [qiwenArray objectAtIndex:index];
}
- (NSArray *)labels {
  return labelsArray;
}
- (NSString*)labelsAtIndex:(NSUInteger)index {
  return [labelsArray objectAtIndex:index];
}
- (NSArray<Comment*> *)comments {
  return commentsArray;
}
- (Comment*)commentsAtIndex:(NSUInteger)index {
  return [commentsArray objectAtIndex:index];
}
- (NSArray<ArticleSimple*> *)relationArticle {
  return relationArticleArray;
}
- (ArticleSimple*)relationArticleAtIndex:(NSUInteger)index {
  return [relationArticleArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTitle) {
    return NO;
  }
  __block BOOL isInitcomments = YES;
   [self.comments enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcomments = NO;
      *stop = YES;
    }
  }];
  if (!isInitcomments) return isInitcomments;
  if (self.hasSource) {
    if (!self.source.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitrelationArticle = YES;
   [self.relationArticle enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitrelationArticle = NO;
      *stop = YES;
    }
  }];
  if (!isInitrelationArticle) return isInitrelationArticle;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.qiwenArray enumerateObjectsUsingBlock:^(TextPicVideo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasSimpleText) {
    [output writeString:5 value:self.simpleText];
  }
  if (self.hasCommentCount) {
    [output writeUInt64:7 value:self.commentCount];
  }
  [self.labelsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:9 value:element];
  }];
  [self.commentsArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  if (self.hasSource) {
    [output writeMessage:11 value:self.source];
  }
  if (self.hasT) {
    [output writeUInt64:13 value:self.t];
  }
  if (self.hasIsBookmark) {
    [output writeUInt32:15 value:self.isBookmark];
  }
  [self.relationArticleArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:17 value:element];
  }];
  if (self.hasShareUrl) {
    [output writeString:19 value:self.shareUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.qiwenArray enumerateObjectsUsingBlock:^(TextPicVideo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasSimpleText) {
    size_ += computeStringSize(5, self.simpleText);
  }
  if (self.hasCommentCount) {
    size_ += computeUInt64Size(7, self.commentCount);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.labelsArray.count;
    [self.labelsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.commentsArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  if (self.hasSource) {
    size_ += computeMessageSize(11, self.source);
  }
  if (self.hasT) {
    size_ += computeUInt64Size(13, self.t);
  }
  if (self.hasIsBookmark) {
    size_ += computeUInt32Size(15, self.isBookmark);
  }
  [self.relationArticleArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(17, element);
  }];
  if (self.hasShareUrl) {
    size_ += computeStringSize(19, self.shareUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (QiWenDetailRes*) parseFromData:(NSData*) data {
  return (QiWenDetailRes*)[[[QiWenDetailRes builder] mergeFromData:data] build];
}
+ (QiWenDetailRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenDetailRes*)[[[QiWenDetailRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QiWenDetailRes*) parseFromInputStream:(NSInputStream*) input {
  return (QiWenDetailRes*)[[[QiWenDetailRes builder] mergeFromInputStream:input] build];
}
+ (QiWenDetailRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenDetailRes*)[[[QiWenDetailRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiWenDetailRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QiWenDetailRes*)[[[QiWenDetailRes builder] mergeFromCodedInputStream:input] build];
}
+ (QiWenDetailRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiWenDetailRes*)[[[QiWenDetailRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiWenDetailResBuilder*) builder {
  return [[QiWenDetailResBuilder alloc] init];
}
+ (QiWenDetailResBuilder*) builderWithPrototype:(QiWenDetailRes*) prototype {
  return [[QiWenDetailRes builder] mergeFrom:prototype];
}
- (QiWenDetailResBuilder*) builder {
  return [QiWenDetailRes builder];
}
- (QiWenDetailResBuilder*) toBuilder {
  return [QiWenDetailRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.qiwenArray enumerateObjectsUsingBlock:^(TextPicVideo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"qiwen"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasSimpleText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"simpleText", self.simpleText];
  }
  if (self.hasCommentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commentCount", [NSNumber numberWithLongLong:self.commentCount]];
  }
  [self.labelsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"labels", obj];
  }];
  [self.commentsArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"comments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSource) {
    [output appendFormat:@"%@%@ {\n", indent, @"source"];
    [self.source writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasIsBookmark) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isBookmark", [NSNumber numberWithInteger:self.isBookmark]];
  }
  [self.relationArticleArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"relationArticle"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasShareUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shareUrl", self.shareUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (TextPicVideo* element in self.qiwenArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"qiwen"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasSimpleText) {
    [dictionary setObject: self.simpleText forKey: @"simpleText"];
  }
  if (self.hasCommentCount) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.commentCount] forKey: @"commentCount"];
  }
  [dictionary setObject:self.labels forKey: @"labels"];
  for (Comment* element in self.commentsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"comments"];
  }
  if (self.hasSource) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.source storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"source"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasIsBookmark) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isBookmark] forKey: @"isBookmark"];
  }
  for (ArticleSimple* element in self.relationArticleArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"relationArticle"];
  }
  if (self.hasShareUrl) {
    [dictionary setObject: self.shareUrl forKey: @"shareUrl"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[QiWenDetailRes class]]) {
    return NO;
  }
  QiWenDetailRes *otherMessage = other;
  return
      [self.qiwenArray isEqualToArray:otherMessage.qiwenArray] &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasSimpleText == otherMessage.hasSimpleText &&
      (!self.hasSimpleText || [self.simpleText isEqual:otherMessage.simpleText]) &&
      self.hasCommentCount == otherMessage.hasCommentCount &&
      (!self.hasCommentCount || self.commentCount == otherMessage.commentCount) &&
      [self.labelsArray isEqualToArray:otherMessage.labelsArray] &&
      [self.commentsArray isEqualToArray:otherMessage.commentsArray] &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasIsBookmark == otherMessage.hasIsBookmark &&
      (!self.hasIsBookmark || self.isBookmark == otherMessage.isBookmark) &&
      [self.relationArticleArray isEqualToArray:otherMessage.relationArticleArray] &&
      self.hasShareUrl == otherMessage.hasShareUrl &&
      (!self.hasShareUrl || [self.shareUrl isEqual:otherMessage.shareUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.qiwenArray enumerateObjectsUsingBlock:^(TextPicVideo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasSimpleText) {
    hashCode = hashCode * 31 + [self.simpleText hash];
  }
  if (self.hasCommentCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.commentCount] hash];
  }
  [self.labelsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.commentsArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasIsBookmark) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isBookmark] hash];
  }
  [self.relationArticleArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasShareUrl) {
    hashCode = hashCode * 31 + [self.shareUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface QiWenDetailResBuilder()
@property (strong) QiWenDetailRes* resultQiWenDetailRes;
@end

@implementation QiWenDetailResBuilder
@synthesize resultQiWenDetailRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQiWenDetailRes = [[QiWenDetailRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQiWenDetailRes;
}
- (QiWenDetailResBuilder*) clear {
  self.resultQiWenDetailRes = [[QiWenDetailRes alloc] init];
  return self;
}
- (QiWenDetailResBuilder*) clone {
  return [QiWenDetailRes builderWithPrototype:resultQiWenDetailRes];
}
- (QiWenDetailRes*) defaultInstance {
  return [QiWenDetailRes defaultInstance];
}
- (QiWenDetailRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QiWenDetailRes*) buildPartial {
  QiWenDetailRes* returnMe = resultQiWenDetailRes;
  self.resultQiWenDetailRes = nil;
  return returnMe;
}
- (QiWenDetailResBuilder*) mergeFrom:(QiWenDetailRes*) other {
  if (other == [QiWenDetailRes defaultInstance]) {
    return self;
  }
  if (other.qiwenArray.count > 0) {
    if (resultQiWenDetailRes.qiwenArray == nil) {
      resultQiWenDetailRes.qiwenArray = [[NSMutableArray alloc] initWithArray:other.qiwenArray];
    } else {
      [resultQiWenDetailRes.qiwenArray addObjectsFromArray:other.qiwenArray];
    }
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasSimpleText) {
    [self setSimpleText:other.simpleText];
  }
  if (other.hasCommentCount) {
    [self setCommentCount:other.commentCount];
  }
  if (other.labelsArray.count > 0) {
    if (resultQiWenDetailRes.labelsArray == nil) {
      resultQiWenDetailRes.labelsArray = [[NSMutableArray alloc] initWithArray:other.labelsArray];
    } else {
      [resultQiWenDetailRes.labelsArray addObjectsFromArray:other.labelsArray];
    }
  }
  if (other.commentsArray.count > 0) {
    if (resultQiWenDetailRes.commentsArray == nil) {
      resultQiWenDetailRes.commentsArray = [[NSMutableArray alloc] initWithArray:other.commentsArray];
    } else {
      [resultQiWenDetailRes.commentsArray addObjectsFromArray:other.commentsArray];
    }
  }
  if (other.hasSource) {
    [self mergeSource:other.source];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasIsBookmark) {
    [self setIsBookmark:other.isBookmark];
  }
  if (other.relationArticleArray.count > 0) {
    if (resultQiWenDetailRes.relationArticleArray == nil) {
      resultQiWenDetailRes.relationArticleArray = [[NSMutableArray alloc] initWithArray:other.relationArticleArray];
    } else {
      [resultQiWenDetailRes.relationArticleArray addObjectsFromArray:other.relationArticleArray];
    }
  }
  if (other.hasShareUrl) {
    [self setShareUrl:other.shareUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QiWenDetailResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QiWenDetailResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        TextPicVideoBuilder* subBuilder = [TextPicVideo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQiwen:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 42: {
        [self setSimpleText:[input readString]];
        break;
      }
      case 56: {
        [self setCommentCount:[input readUInt64]];
        break;
      }
      case 74: {
        [self addLabels:[input readString]];
        break;
      }
      case 82: {
        CommentBuilder* subBuilder = [Comment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addComments:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        SourceBuilder* subBuilder = [Source builder];
        if (self.hasSource) {
          [subBuilder mergeFrom:self.source];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSource:[subBuilder buildPartial]];
        break;
      }
      case 104: {
        [self setT:[input readUInt64]];
        break;
      }
      case 120: {
        [self setIsBookmark:[input readUInt32]];
        break;
      }
      case 138: {
        ArticleSimpleBuilder* subBuilder = [ArticleSimple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRelationArticle:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        [self setShareUrl:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray<TextPicVideo*> *)qiwen {
  return resultQiWenDetailRes.qiwenArray;
}
- (TextPicVideo*)qiwenAtIndex:(NSUInteger)index {
  return [resultQiWenDetailRes qiwenAtIndex:index];
}
- (QiWenDetailResBuilder *)addQiwen:(TextPicVideo*)value {
  if (resultQiWenDetailRes.qiwenArray == nil) {
    resultQiWenDetailRes.qiwenArray = [[NSMutableArray alloc]init];
  }
  [resultQiWenDetailRes.qiwenArray addObject:value];
  return self;
}
- (QiWenDetailResBuilder *)setQiwenArray:(NSArray<TextPicVideo*> *)array {
  resultQiWenDetailRes.qiwenArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (QiWenDetailResBuilder *)clearQiwen {
  resultQiWenDetailRes.qiwenArray = nil;
  return self;
}
- (BOOL) hasTitle {
  return resultQiWenDetailRes.hasTitle;
}
- (NSString*) title {
  return resultQiWenDetailRes.title;
}
- (QiWenDetailResBuilder*) setTitle:(NSString*) value {
  resultQiWenDetailRes.hasTitle = YES;
  resultQiWenDetailRes.title = value;
  return self;
}
- (QiWenDetailResBuilder*) clearTitle {
  resultQiWenDetailRes.hasTitle = NO;
  resultQiWenDetailRes.title = @"";
  return self;
}
- (BOOL) hasSimpleText {
  return resultQiWenDetailRes.hasSimpleText;
}
- (NSString*) simpleText {
  return resultQiWenDetailRes.simpleText;
}
- (QiWenDetailResBuilder*) setSimpleText:(NSString*) value {
  resultQiWenDetailRes.hasSimpleText = YES;
  resultQiWenDetailRes.simpleText = value;
  return self;
}
- (QiWenDetailResBuilder*) clearSimpleText {
  resultQiWenDetailRes.hasSimpleText = NO;
  resultQiWenDetailRes.simpleText = @"";
  return self;
}
- (BOOL) hasCommentCount {
  return resultQiWenDetailRes.hasCommentCount;
}
- (UInt64) commentCount {
  return resultQiWenDetailRes.commentCount;
}
- (QiWenDetailResBuilder*) setCommentCount:(UInt64) value {
  resultQiWenDetailRes.hasCommentCount = YES;
  resultQiWenDetailRes.commentCount = value;
  return self;
}
- (QiWenDetailResBuilder*) clearCommentCount {
  resultQiWenDetailRes.hasCommentCount = NO;
  resultQiWenDetailRes.commentCount = 0L;
  return self;
}
- (NSMutableArray *)labels {
  return resultQiWenDetailRes.labelsArray;
}
- (NSString*)labelsAtIndex:(NSUInteger)index {
  return [resultQiWenDetailRes labelsAtIndex:index];
}
- (QiWenDetailResBuilder *)addLabels:(NSString*)value {
  if (resultQiWenDetailRes.labelsArray == nil) {
    resultQiWenDetailRes.labelsArray = [[NSMutableArray alloc]init];
  }
  [resultQiWenDetailRes.labelsArray addObject:value];
  return self;
}
- (QiWenDetailResBuilder *)setLabelsArray:(NSArray *)array {
  resultQiWenDetailRes.labelsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (QiWenDetailResBuilder *)clearLabels {
  resultQiWenDetailRes.labelsArray = nil;
  return self;
}
- (NSMutableArray<Comment*> *)comments {
  return resultQiWenDetailRes.commentsArray;
}
- (Comment*)commentsAtIndex:(NSUInteger)index {
  return [resultQiWenDetailRes commentsAtIndex:index];
}
- (QiWenDetailResBuilder *)addComments:(Comment*)value {
  if (resultQiWenDetailRes.commentsArray == nil) {
    resultQiWenDetailRes.commentsArray = [[NSMutableArray alloc]init];
  }
  [resultQiWenDetailRes.commentsArray addObject:value];
  return self;
}
- (QiWenDetailResBuilder *)setCommentsArray:(NSArray<Comment*> *)array {
  resultQiWenDetailRes.commentsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (QiWenDetailResBuilder *)clearComments {
  resultQiWenDetailRes.commentsArray = nil;
  return self;
}
- (BOOL) hasSource {
  return resultQiWenDetailRes.hasSource;
}
- (Source*) source {
  return resultQiWenDetailRes.source;
}
- (QiWenDetailResBuilder*) setSource:(Source*) value {
  resultQiWenDetailRes.hasSource = YES;
  resultQiWenDetailRes.source = value;
  return self;
}
- (QiWenDetailResBuilder*) setSourceBuilder:(SourceBuilder*) builderForValue {
  return [self setSource:[builderForValue build]];
}
- (QiWenDetailResBuilder*) mergeSource:(Source*) value {
  if (resultQiWenDetailRes.hasSource &&
      resultQiWenDetailRes.source != [Source defaultInstance]) {
    resultQiWenDetailRes.source =
      [[[Source builderWithPrototype:resultQiWenDetailRes.source] mergeFrom:value] buildPartial];
  } else {
    resultQiWenDetailRes.source = value;
  }
  resultQiWenDetailRes.hasSource = YES;
  return self;
}
- (QiWenDetailResBuilder*) clearSource {
  resultQiWenDetailRes.hasSource = NO;
  resultQiWenDetailRes.source = [Source defaultInstance];
  return self;
}
- (BOOL) hasT {
  return resultQiWenDetailRes.hasT;
}
- (UInt64) t {
  return resultQiWenDetailRes.t;
}
- (QiWenDetailResBuilder*) setT:(UInt64) value {
  resultQiWenDetailRes.hasT = YES;
  resultQiWenDetailRes.t = value;
  return self;
}
- (QiWenDetailResBuilder*) clearT {
  resultQiWenDetailRes.hasT = NO;
  resultQiWenDetailRes.t = 0L;
  return self;
}
- (BOOL) hasIsBookmark {
  return resultQiWenDetailRes.hasIsBookmark;
}
- (UInt32) isBookmark {
  return resultQiWenDetailRes.isBookmark;
}
- (QiWenDetailResBuilder*) setIsBookmark:(UInt32) value {
  resultQiWenDetailRes.hasIsBookmark = YES;
  resultQiWenDetailRes.isBookmark = value;
  return self;
}
- (QiWenDetailResBuilder*) clearIsBookmark {
  resultQiWenDetailRes.hasIsBookmark = NO;
  resultQiWenDetailRes.isBookmark = 0;
  return self;
}
- (NSMutableArray<ArticleSimple*> *)relationArticle {
  return resultQiWenDetailRes.relationArticleArray;
}
- (ArticleSimple*)relationArticleAtIndex:(NSUInteger)index {
  return [resultQiWenDetailRes relationArticleAtIndex:index];
}
- (QiWenDetailResBuilder *)addRelationArticle:(ArticleSimple*)value {
  if (resultQiWenDetailRes.relationArticleArray == nil) {
    resultQiWenDetailRes.relationArticleArray = [[NSMutableArray alloc]init];
  }
  [resultQiWenDetailRes.relationArticleArray addObject:value];
  return self;
}
- (QiWenDetailResBuilder *)setRelationArticleArray:(NSArray<ArticleSimple*> *)array {
  resultQiWenDetailRes.relationArticleArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (QiWenDetailResBuilder *)clearRelationArticle {
  resultQiWenDetailRes.relationArticleArray = nil;
  return self;
}
- (BOOL) hasShareUrl {
  return resultQiWenDetailRes.hasShareUrl;
}
- (NSString*) shareUrl {
  return resultQiWenDetailRes.shareUrl;
}
- (QiWenDetailResBuilder*) setShareUrl:(NSString*) value {
  resultQiWenDetailRes.hasShareUrl = YES;
  resultQiWenDetailRes.shareUrl = value;
  return self;
}
- (QiWenDetailResBuilder*) clearShareUrl {
  resultQiWenDetailRes.hasShareUrl = NO;
  resultQiWenDetailRes.shareUrl = @"";
  return self;
}
@end

@interface TextPicVideo ()
@property (strong) NSString* text;
@property (strong) NSString* url;
@property UInt32 type;
@property (strong) NSString* gif;
@property UInt32 width;
@property UInt32 height;
@end

@implementation TextPicVideo

- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasGif {
  return !!hasGif_;
}
- (void) setHasGif:(BOOL) _value_ {
  hasGif_ = !!_value_;
}
@synthesize gif;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (instancetype) init {
  if ((self = [super init])) {
    self.text = @"";
    self.url = @"";
    self.type = 0;
    self.gif = @"";
    self.width = 0;
    self.height = 0;
  }
  return self;
}
static TextPicVideo* defaultTextPicVideoInstance = nil;
+ (void) initialize {
  if (self == [TextPicVideo class]) {
    defaultTextPicVideoInstance = [[TextPicVideo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTextPicVideoInstance;
}
- (instancetype) defaultInstance {
  return defaultTextPicVideoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasText) {
    [output writeString:1 value:self.text];
  }
  if (self.hasUrl) {
    [output writeString:2 value:self.url];
  }
  if (self.hasType) {
    [output writeUInt32:3 value:self.type];
  }
  if (self.hasGif) {
    [output writeString:4 value:self.gif];
  }
  if (self.hasWidth) {
    [output writeUInt32:5 value:self.width];
  }
  if (self.hasHeight) {
    [output writeUInt32:6 value:self.height];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasText) {
    size_ += computeStringSize(1, self.text);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(2, self.url);
  }
  if (self.hasType) {
    size_ += computeUInt32Size(3, self.type);
  }
  if (self.hasGif) {
    size_ += computeStringSize(4, self.gif);
  }
  if (self.hasWidth) {
    size_ += computeUInt32Size(5, self.width);
  }
  if (self.hasHeight) {
    size_ += computeUInt32Size(6, self.height);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TextPicVideo*) parseFromData:(NSData*) data {
  return (TextPicVideo*)[[[TextPicVideo builder] mergeFromData:data] build];
}
+ (TextPicVideo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TextPicVideo*)[[[TextPicVideo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TextPicVideo*) parseFromInputStream:(NSInputStream*) input {
  return (TextPicVideo*)[[[TextPicVideo builder] mergeFromInputStream:input] build];
}
+ (TextPicVideo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TextPicVideo*)[[[TextPicVideo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TextPicVideo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TextPicVideo*)[[[TextPicVideo builder] mergeFromCodedInputStream:input] build];
}
+ (TextPicVideo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TextPicVideo*)[[[TextPicVideo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TextPicVideoBuilder*) builder {
  return [[TextPicVideoBuilder alloc] init];
}
+ (TextPicVideoBuilder*) builderWithPrototype:(TextPicVideo*) prototype {
  return [[TextPicVideo builder] mergeFrom:prototype];
}
- (TextPicVideoBuilder*) builder {
  return [TextPicVideo builder];
}
- (TextPicVideoBuilder*) toBuilder {
  return [TextPicVideo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasGif) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gif", self.gif];
  }
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithInteger:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithInteger:self.height]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasText) {
    [dictionary setObject: self.text forKey: @"text"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasGif) {
    [dictionary setObject: self.gif forKey: @"gif"];
  }
  if (self.hasWidth) {
    [dictionary setObject: [NSNumber numberWithInteger:self.width] forKey: @"width"];
  }
  if (self.hasHeight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.height] forKey: @"height"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TextPicVideo class]]) {
    return NO;
  }
  TextPicVideo *otherMessage = other;
  return
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasGif == otherMessage.hasGif &&
      (!self.hasGif || [self.gif isEqual:otherMessage.gif]) &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasGif) {
    hashCode = hashCode * 31 + [self.gif hash];
  }
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.height] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TextPicVideoBuilder()
@property (strong) TextPicVideo* resultTextPicVideo;
@end

@implementation TextPicVideoBuilder
@synthesize resultTextPicVideo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTextPicVideo = [[TextPicVideo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTextPicVideo;
}
- (TextPicVideoBuilder*) clear {
  self.resultTextPicVideo = [[TextPicVideo alloc] init];
  return self;
}
- (TextPicVideoBuilder*) clone {
  return [TextPicVideo builderWithPrototype:resultTextPicVideo];
}
- (TextPicVideo*) defaultInstance {
  return [TextPicVideo defaultInstance];
}
- (TextPicVideo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TextPicVideo*) buildPartial {
  TextPicVideo* returnMe = resultTextPicVideo;
  self.resultTextPicVideo = nil;
  return returnMe;
}
- (TextPicVideoBuilder*) mergeFrom:(TextPicVideo*) other {
  if (other == [TextPicVideo defaultInstance]) {
    return self;
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasGif) {
    [self setGif:other.gif];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TextPicVideoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TextPicVideoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setText:[input readString]];
        break;
      }
      case 18: {
        [self setUrl:[input readString]];
        break;
      }
      case 24: {
        [self setType:[input readUInt32]];
        break;
      }
      case 34: {
        [self setGif:[input readString]];
        break;
      }
      case 40: {
        [self setWidth:[input readUInt32]];
        break;
      }
      case 48: {
        [self setHeight:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasText {
  return resultTextPicVideo.hasText;
}
- (NSString*) text {
  return resultTextPicVideo.text;
}
- (TextPicVideoBuilder*) setText:(NSString*) value {
  resultTextPicVideo.hasText = YES;
  resultTextPicVideo.text = value;
  return self;
}
- (TextPicVideoBuilder*) clearText {
  resultTextPicVideo.hasText = NO;
  resultTextPicVideo.text = @"";
  return self;
}
- (BOOL) hasUrl {
  return resultTextPicVideo.hasUrl;
}
- (NSString*) url {
  return resultTextPicVideo.url;
}
- (TextPicVideoBuilder*) setUrl:(NSString*) value {
  resultTextPicVideo.hasUrl = YES;
  resultTextPicVideo.url = value;
  return self;
}
- (TextPicVideoBuilder*) clearUrl {
  resultTextPicVideo.hasUrl = NO;
  resultTextPicVideo.url = @"";
  return self;
}
- (BOOL) hasType {
  return resultTextPicVideo.hasType;
}
- (UInt32) type {
  return resultTextPicVideo.type;
}
- (TextPicVideoBuilder*) setType:(UInt32) value {
  resultTextPicVideo.hasType = YES;
  resultTextPicVideo.type = value;
  return self;
}
- (TextPicVideoBuilder*) clearType {
  resultTextPicVideo.hasType = NO;
  resultTextPicVideo.type = 0;
  return self;
}
- (BOOL) hasGif {
  return resultTextPicVideo.hasGif;
}
- (NSString*) gif {
  return resultTextPicVideo.gif;
}
- (TextPicVideoBuilder*) setGif:(NSString*) value {
  resultTextPicVideo.hasGif = YES;
  resultTextPicVideo.gif = value;
  return self;
}
- (TextPicVideoBuilder*) clearGif {
  resultTextPicVideo.hasGif = NO;
  resultTextPicVideo.gif = @"";
  return self;
}
- (BOOL) hasWidth {
  return resultTextPicVideo.hasWidth;
}
- (UInt32) width {
  return resultTextPicVideo.width;
}
- (TextPicVideoBuilder*) setWidth:(UInt32) value {
  resultTextPicVideo.hasWidth = YES;
  resultTextPicVideo.width = value;
  return self;
}
- (TextPicVideoBuilder*) clearWidth {
  resultTextPicVideo.hasWidth = NO;
  resultTextPicVideo.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return resultTextPicVideo.hasHeight;
}
- (UInt32) height {
  return resultTextPicVideo.height;
}
- (TextPicVideoBuilder*) setHeight:(UInt32) value {
  resultTextPicVideo.hasHeight = YES;
  resultTextPicVideo.height = value;
  return self;
}
- (TextPicVideoBuilder*) clearHeight {
  resultTextPicVideo.hasHeight = NO;
  resultTextPicVideo.height = 0;
  return self;
}
@end

@interface Comment ()
@property UInt32 id;
@property UInt32 articleId;
@property (strong) NSString* text;
@property (strong) RegUser* user;
@property UInt32 prevId;
@property UInt32 prevUid;
@property (strong) RegUser* prevUser;
@property UInt32 upCount;
@property UInt32 downCount;
@property (strong) NSString* cT;
@property UInt32 isUp;
@property UInt32 isDown;
@end

@implementation Comment

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasArticleId {
  return !!hasArticleId_;
}
- (void) setHasArticleId:(BOOL) _value_ {
  hasArticleId_ = !!_value_;
}
@synthesize articleId;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasPrevId {
  return !!hasPrevId_;
}
- (void) setHasPrevId:(BOOL) _value_ {
  hasPrevId_ = !!_value_;
}
@synthesize prevId;
- (BOOL) hasPrevUid {
  return !!hasPrevUid_;
}
- (void) setHasPrevUid:(BOOL) _value_ {
  hasPrevUid_ = !!_value_;
}
@synthesize prevUid;
- (BOOL) hasPrevUser {
  return !!hasPrevUser_;
}
- (void) setHasPrevUser:(BOOL) _value_ {
  hasPrevUser_ = !!_value_;
}
@synthesize prevUser;
- (BOOL) hasUpCount {
  return !!hasUpCount_;
}
- (void) setHasUpCount:(BOOL) _value_ {
  hasUpCount_ = !!_value_;
}
@synthesize upCount;
- (BOOL) hasDownCount {
  return !!hasDownCount_;
}
- (void) setHasDownCount:(BOOL) _value_ {
  hasDownCount_ = !!_value_;
}
@synthesize downCount;
- (BOOL) hasCT {
  return !!hasCT_;
}
- (void) setHasCT:(BOOL) _value_ {
  hasCT_ = !!_value_;
}
@synthesize cT;
- (BOOL) hasIsUp {
  return !!hasIsUp_;
}
- (void) setHasIsUp:(BOOL) _value_ {
  hasIsUp_ = !!_value_;
}
@synthesize isUp;
- (BOOL) hasIsDown {
  return !!hasIsDown_;
}
- (void) setHasIsDown:(BOOL) _value_ {
  hasIsDown_ = !!_value_;
}
@synthesize isDown;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.articleId = 0;
    self.text = @"";
    self.user = [RegUser defaultInstance];
    self.prevId = 0;
    self.prevUid = 0;
    self.prevUser = [RegUser defaultInstance];
    self.upCount = 0;
    self.downCount = 0;
    self.cT = @"";
    self.isUp = 0;
    self.isDown = 0;
  }
  return self;
}
static Comment* defaultCommentInstance = nil;
+ (void) initialize {
  if (self == [Comment class]) {
    defaultCommentInstance = [[Comment alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCommentInstance;
}
- (instancetype) defaultInstance {
  return defaultCommentInstance;
}
- (BOOL) isInitialized {
  if (!self.hasArticleId) {
    return NO;
  }
  if (!self.hasText) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasArticleId) {
    [output writeUInt32:3 value:self.articleId];
  }
  if (self.hasText) {
    [output writeString:5 value:self.text];
  }
  if (self.hasUser) {
    [output writeMessage:7 value:self.user];
  }
  if (self.hasPrevId) {
    [output writeUInt32:9 value:self.prevId];
  }
  if (self.hasPrevUid) {
    [output writeUInt32:11 value:self.prevUid];
  }
  if (self.hasPrevUser) {
    [output writeMessage:12 value:self.prevUser];
  }
  if (self.hasUpCount) {
    [output writeUInt32:13 value:self.upCount];
  }
  if (self.hasDownCount) {
    [output writeUInt32:14 value:self.downCount];
  }
  if (self.hasCT) {
    [output writeString:15 value:self.cT];
  }
  if (self.hasIsUp) {
    [output writeUInt32:16 value:self.isUp];
  }
  if (self.hasIsDown) {
    [output writeUInt32:17 value:self.isDown];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasArticleId) {
    size_ += computeUInt32Size(3, self.articleId);
  }
  if (self.hasText) {
    size_ += computeStringSize(5, self.text);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(7, self.user);
  }
  if (self.hasPrevId) {
    size_ += computeUInt32Size(9, self.prevId);
  }
  if (self.hasPrevUid) {
    size_ += computeUInt32Size(11, self.prevUid);
  }
  if (self.hasPrevUser) {
    size_ += computeMessageSize(12, self.prevUser);
  }
  if (self.hasUpCount) {
    size_ += computeUInt32Size(13, self.upCount);
  }
  if (self.hasDownCount) {
    size_ += computeUInt32Size(14, self.downCount);
  }
  if (self.hasCT) {
    size_ += computeStringSize(15, self.cT);
  }
  if (self.hasIsUp) {
    size_ += computeUInt32Size(16, self.isUp);
  }
  if (self.hasIsDown) {
    size_ += computeUInt32Size(17, self.isDown);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Comment*) parseFromData:(NSData*) data {
  return (Comment*)[[[Comment builder] mergeFromData:data] build];
}
+ (Comment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Comment*)[[[Comment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Comment*) parseFromInputStream:(NSInputStream*) input {
  return (Comment*)[[[Comment builder] mergeFromInputStream:input] build];
}
+ (Comment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Comment*)[[[Comment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Comment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Comment*)[[[Comment builder] mergeFromCodedInputStream:input] build];
}
+ (Comment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Comment*)[[[Comment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommentBuilder*) builder {
  return [[CommentBuilder alloc] init];
}
+ (CommentBuilder*) builderWithPrototype:(Comment*) prototype {
  return [[Comment builder] mergeFrom:prototype];
}
- (CommentBuilder*) builder {
  return [Comment builder];
}
- (CommentBuilder*) toBuilder {
  return [Comment builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasArticleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleId", [NSNumber numberWithInteger:self.articleId]];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPrevId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prevId", [NSNumber numberWithInteger:self.prevId]];
  }
  if (self.hasPrevUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prevUid", [NSNumber numberWithInteger:self.prevUid]];
  }
  if (self.hasPrevUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"prevUser"];
    [self.prevUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUpCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"upCount", [NSNumber numberWithInteger:self.upCount]];
  }
  if (self.hasDownCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"downCount", [NSNumber numberWithInteger:self.downCount]];
  }
  if (self.hasCT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cT", self.cT];
  }
  if (self.hasIsUp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isUp", [NSNumber numberWithInteger:self.isUp]];
  }
  if (self.hasIsDown) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isDown", [NSNumber numberWithInteger:self.isDown]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasArticleId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.articleId] forKey: @"articleId"];
  }
  if (self.hasText) {
    [dictionary setObject: self.text forKey: @"text"];
  }
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasPrevId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.prevId] forKey: @"prevId"];
  }
  if (self.hasPrevUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.prevUid] forKey: @"prevUid"];
  }
  if (self.hasPrevUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.prevUser storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"prevUser"];
  }
  if (self.hasUpCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.upCount] forKey: @"upCount"];
  }
  if (self.hasDownCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.downCount] forKey: @"downCount"];
  }
  if (self.hasCT) {
    [dictionary setObject: self.cT forKey: @"cT"];
  }
  if (self.hasIsUp) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isUp] forKey: @"isUp"];
  }
  if (self.hasIsDown) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isDown] forKey: @"isDown"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Comment class]]) {
    return NO;
  }
  Comment *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasArticleId == otherMessage.hasArticleId &&
      (!self.hasArticleId || self.articleId == otherMessage.articleId) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasPrevId == otherMessage.hasPrevId &&
      (!self.hasPrevId || self.prevId == otherMessage.prevId) &&
      self.hasPrevUid == otherMessage.hasPrevUid &&
      (!self.hasPrevUid || self.prevUid == otherMessage.prevUid) &&
      self.hasPrevUser == otherMessage.hasPrevUser &&
      (!self.hasPrevUser || [self.prevUser isEqual:otherMessage.prevUser]) &&
      self.hasUpCount == otherMessage.hasUpCount &&
      (!self.hasUpCount || self.upCount == otherMessage.upCount) &&
      self.hasDownCount == otherMessage.hasDownCount &&
      (!self.hasDownCount || self.downCount == otherMessage.downCount) &&
      self.hasCT == otherMessage.hasCT &&
      (!self.hasCT || [self.cT isEqual:otherMessage.cT]) &&
      self.hasIsUp == otherMessage.hasIsUp &&
      (!self.hasIsUp || self.isUp == otherMessage.isUp) &&
      self.hasIsDown == otherMessage.hasIsDown &&
      (!self.hasIsDown || self.isDown == otherMessage.isDown) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasArticleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.articleId] hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasPrevId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prevId] hash];
  }
  if (self.hasPrevUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prevUid] hash];
  }
  if (self.hasPrevUser) {
    hashCode = hashCode * 31 + [self.prevUser hash];
  }
  if (self.hasUpCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.upCount] hash];
  }
  if (self.hasDownCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.downCount] hash];
  }
  if (self.hasCT) {
    hashCode = hashCode * 31 + [self.cT hash];
  }
  if (self.hasIsUp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isUp] hash];
  }
  if (self.hasIsDown) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isDown] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CommentBuilder()
@property (strong) Comment* resultComment;
@end

@implementation CommentBuilder
@synthesize resultComment;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultComment = [[Comment alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultComment;
}
- (CommentBuilder*) clear {
  self.resultComment = [[Comment alloc] init];
  return self;
}
- (CommentBuilder*) clone {
  return [Comment builderWithPrototype:resultComment];
}
- (Comment*) defaultInstance {
  return [Comment defaultInstance];
}
- (Comment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Comment*) buildPartial {
  Comment* returnMe = resultComment;
  self.resultComment = nil;
  return returnMe;
}
- (CommentBuilder*) mergeFrom:(Comment*) other {
  if (other == [Comment defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasArticleId) {
    [self setArticleId:other.articleId];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasPrevId) {
    [self setPrevId:other.prevId];
  }
  if (other.hasPrevUid) {
    [self setPrevUid:other.prevUid];
  }
  if (other.hasPrevUser) {
    [self mergePrevUser:other.prevUser];
  }
  if (other.hasUpCount) {
    [self setUpCount:other.upCount];
  }
  if (other.hasDownCount) {
    [self setDownCount:other.downCount];
  }
  if (other.hasCT) {
    [self setCT:other.cT];
  }
  if (other.hasIsUp) {
    [self setIsUp:other.isUp];
  }
  if (other.hasIsDown) {
    [self setIsDown:other.isDown];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setArticleId:[input readUInt32]];
        break;
      }
      case 42: {
        [self setText:[input readString]];
        break;
      }
      case 58: {
        RegUserBuilder* subBuilder = [RegUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 72: {
        [self setPrevId:[input readUInt32]];
        break;
      }
      case 88: {
        [self setPrevUid:[input readUInt32]];
        break;
      }
      case 98: {
        RegUserBuilder* subBuilder = [RegUser builder];
        if (self.hasPrevUser) {
          [subBuilder mergeFrom:self.prevUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPrevUser:[subBuilder buildPartial]];
        break;
      }
      case 104: {
        [self setUpCount:[input readUInt32]];
        break;
      }
      case 112: {
        [self setDownCount:[input readUInt32]];
        break;
      }
      case 122: {
        [self setCT:[input readString]];
        break;
      }
      case 128: {
        [self setIsUp:[input readUInt32]];
        break;
      }
      case 136: {
        [self setIsDown:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultComment.hasId;
}
- (UInt32) id {
  return resultComment.id;
}
- (CommentBuilder*) setId:(UInt32) value {
  resultComment.hasId = YES;
  resultComment.id = value;
  return self;
}
- (CommentBuilder*) clearId {
  resultComment.hasId = NO;
  resultComment.id = 0;
  return self;
}
- (BOOL) hasArticleId {
  return resultComment.hasArticleId;
}
- (UInt32) articleId {
  return resultComment.articleId;
}
- (CommentBuilder*) setArticleId:(UInt32) value {
  resultComment.hasArticleId = YES;
  resultComment.articleId = value;
  return self;
}
- (CommentBuilder*) clearArticleId {
  resultComment.hasArticleId = NO;
  resultComment.articleId = 0;
  return self;
}
- (BOOL) hasText {
  return resultComment.hasText;
}
- (NSString*) text {
  return resultComment.text;
}
- (CommentBuilder*) setText:(NSString*) value {
  resultComment.hasText = YES;
  resultComment.text = value;
  return self;
}
- (CommentBuilder*) clearText {
  resultComment.hasText = NO;
  resultComment.text = @"";
  return self;
}
- (BOOL) hasUser {
  return resultComment.hasUser;
}
- (RegUser*) user {
  return resultComment.user;
}
- (CommentBuilder*) setUser:(RegUser*) value {
  resultComment.hasUser = YES;
  resultComment.user = value;
  return self;
}
- (CommentBuilder*) setUserBuilder:(RegUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (CommentBuilder*) mergeUser:(RegUser*) value {
  if (resultComment.hasUser &&
      resultComment.user != [RegUser defaultInstance]) {
    resultComment.user =
      [[[RegUser builderWithPrototype:resultComment.user] mergeFrom:value] buildPartial];
  } else {
    resultComment.user = value;
  }
  resultComment.hasUser = YES;
  return self;
}
- (CommentBuilder*) clearUser {
  resultComment.hasUser = NO;
  resultComment.user = [RegUser defaultInstance];
  return self;
}
- (BOOL) hasPrevId {
  return resultComment.hasPrevId;
}
- (UInt32) prevId {
  return resultComment.prevId;
}
- (CommentBuilder*) setPrevId:(UInt32) value {
  resultComment.hasPrevId = YES;
  resultComment.prevId = value;
  return self;
}
- (CommentBuilder*) clearPrevId {
  resultComment.hasPrevId = NO;
  resultComment.prevId = 0;
  return self;
}
- (BOOL) hasPrevUid {
  return resultComment.hasPrevUid;
}
- (UInt32) prevUid {
  return resultComment.prevUid;
}
- (CommentBuilder*) setPrevUid:(UInt32) value {
  resultComment.hasPrevUid = YES;
  resultComment.prevUid = value;
  return self;
}
- (CommentBuilder*) clearPrevUid {
  resultComment.hasPrevUid = NO;
  resultComment.prevUid = 0;
  return self;
}
- (BOOL) hasPrevUser {
  return resultComment.hasPrevUser;
}
- (RegUser*) prevUser {
  return resultComment.prevUser;
}
- (CommentBuilder*) setPrevUser:(RegUser*) value {
  resultComment.hasPrevUser = YES;
  resultComment.prevUser = value;
  return self;
}
- (CommentBuilder*) setPrevUserBuilder:(RegUserBuilder*) builderForValue {
  return [self setPrevUser:[builderForValue build]];
}
- (CommentBuilder*) mergePrevUser:(RegUser*) value {
  if (resultComment.hasPrevUser &&
      resultComment.prevUser != [RegUser defaultInstance]) {
    resultComment.prevUser =
      [[[RegUser builderWithPrototype:resultComment.prevUser] mergeFrom:value] buildPartial];
  } else {
    resultComment.prevUser = value;
  }
  resultComment.hasPrevUser = YES;
  return self;
}
- (CommentBuilder*) clearPrevUser {
  resultComment.hasPrevUser = NO;
  resultComment.prevUser = [RegUser defaultInstance];
  return self;
}
- (BOOL) hasUpCount {
  return resultComment.hasUpCount;
}
- (UInt32) upCount {
  return resultComment.upCount;
}
- (CommentBuilder*) setUpCount:(UInt32) value {
  resultComment.hasUpCount = YES;
  resultComment.upCount = value;
  return self;
}
- (CommentBuilder*) clearUpCount {
  resultComment.hasUpCount = NO;
  resultComment.upCount = 0;
  return self;
}
- (BOOL) hasDownCount {
  return resultComment.hasDownCount;
}
- (UInt32) downCount {
  return resultComment.downCount;
}
- (CommentBuilder*) setDownCount:(UInt32) value {
  resultComment.hasDownCount = YES;
  resultComment.downCount = value;
  return self;
}
- (CommentBuilder*) clearDownCount {
  resultComment.hasDownCount = NO;
  resultComment.downCount = 0;
  return self;
}
- (BOOL) hasCT {
  return resultComment.hasCT;
}
- (NSString*) cT {
  return resultComment.cT;
}
- (CommentBuilder*) setCT:(NSString*) value {
  resultComment.hasCT = YES;
  resultComment.cT = value;
  return self;
}
- (CommentBuilder*) clearCT {
  resultComment.hasCT = NO;
  resultComment.cT = @"";
  return self;
}
- (BOOL) hasIsUp {
  return resultComment.hasIsUp;
}
- (UInt32) isUp {
  return resultComment.isUp;
}
- (CommentBuilder*) setIsUp:(UInt32) value {
  resultComment.hasIsUp = YES;
  resultComment.isUp = value;
  return self;
}
- (CommentBuilder*) clearIsUp {
  resultComment.hasIsUp = NO;
  resultComment.isUp = 0;
  return self;
}
- (BOOL) hasIsDown {
  return resultComment.hasIsDown;
}
- (UInt32) isDown {
  return resultComment.isDown;
}
- (CommentBuilder*) setIsDown:(UInt32) value {
  resultComment.hasIsDown = YES;
  resultComment.isDown = value;
  return self;
}
- (CommentBuilder*) clearIsDown {
  resultComment.hasIsDown = NO;
  resultComment.isDown = 0;
  return self;
}
@end

@interface QiwenListReq ()
@property ListType type;
@property UInt32 page;
@end

@implementation QiwenListReq

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = ListTypeTRecommend;
    self.page = 0;
  }
  return self;
}
static QiwenListReq* defaultQiwenListReqInstance = nil;
+ (void) initialize {
  if (self == [QiwenListReq class]) {
    defaultQiwenListReqInstance = [[QiwenListReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultQiwenListReqInstance;
}
- (instancetype) defaultInstance {
  return defaultQiwenListReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (QiwenListReq*) parseFromData:(NSData*) data {
  return (QiwenListReq*)[[[QiwenListReq builder] mergeFromData:data] build];
}
+ (QiwenListReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiwenListReq*)[[[QiwenListReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QiwenListReq*) parseFromInputStream:(NSInputStream*) input {
  return (QiwenListReq*)[[[QiwenListReq builder] mergeFromInputStream:input] build];
}
+ (QiwenListReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiwenListReq*)[[[QiwenListReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiwenListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QiwenListReq*)[[[QiwenListReq builder] mergeFromCodedInputStream:input] build];
}
+ (QiwenListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiwenListReq*)[[[QiwenListReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiwenListReqBuilder*) builder {
  return [[QiwenListReqBuilder alloc] init];
}
+ (QiwenListReqBuilder*) builderWithPrototype:(QiwenListReq*) prototype {
  return [[QiwenListReq builder] mergeFrom:prototype];
}
- (QiwenListReqBuilder*) builder {
  return [QiwenListReq builder];
}
- (QiwenListReqBuilder*) toBuilder {
  return [QiwenListReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromListType(self.type)];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[QiwenListReq class]]) {
    return NO;
  }
  QiwenListReq *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface QiwenListReqBuilder()
@property (strong) QiwenListReq* resultQiwenListReq;
@end

@implementation QiwenListReqBuilder
@synthesize resultQiwenListReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQiwenListReq = [[QiwenListReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQiwenListReq;
}
- (QiwenListReqBuilder*) clear {
  self.resultQiwenListReq = [[QiwenListReq alloc] init];
  return self;
}
- (QiwenListReqBuilder*) clone {
  return [QiwenListReq builderWithPrototype:resultQiwenListReq];
}
- (QiwenListReq*) defaultInstance {
  return [QiwenListReq defaultInstance];
}
- (QiwenListReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QiwenListReq*) buildPartial {
  QiwenListReq* returnMe = resultQiwenListReq;
  self.resultQiwenListReq = nil;
  return returnMe;
}
- (QiwenListReqBuilder*) mergeFrom:(QiwenListReq*) other {
  if (other == [QiwenListReq defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QiwenListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QiwenListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ListType value = (ListType)[input readEnum];
        if (ListTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultQiwenListReq.hasType;
}
- (ListType) type {
  return resultQiwenListReq.type;
}
- (QiwenListReqBuilder*) setType:(ListType) value {
  resultQiwenListReq.hasType = YES;
  resultQiwenListReq.type = value;
  return self;
}
- (QiwenListReqBuilder*) clearType {
  resultQiwenListReq.hasType = NO;
  resultQiwenListReq.type = ListTypeTRecommend;
  return self;
}
- (BOOL) hasPage {
  return resultQiwenListReq.hasPage;
}
- (UInt32) page {
  return resultQiwenListReq.page;
}
- (QiwenListReqBuilder*) setPage:(UInt32) value {
  resultQiwenListReq.hasPage = YES;
  resultQiwenListReq.page = value;
  return self;
}
- (QiwenListReqBuilder*) clearPage {
  resultQiwenListReq.hasPage = NO;
  resultQiwenListReq.page = 0;
  return self;
}
@end

@interface QiwenListRes ()
@property UInt32 psize;
@property UInt32 page;
@property (strong) NSMutableArray<ArticleSimpleList*> * articleListArray;
@end

@implementation QiwenListRes

- (BOOL) hasPsize {
  return !!hasPsize_;
}
- (void) setHasPsize:(BOOL) _value_ {
  hasPsize_ = !!_value_;
}
@synthesize psize;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
@synthesize articleListArray;
@dynamic articleList;
- (instancetype) init {
  if ((self = [super init])) {
    self.psize = 0;
    self.page = 0;
  }
  return self;
}
static QiwenListRes* defaultQiwenListResInstance = nil;
+ (void) initialize {
  if (self == [QiwenListRes class]) {
    defaultQiwenListResInstance = [[QiwenListRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultQiwenListResInstance;
}
- (instancetype) defaultInstance {
  return defaultQiwenListResInstance;
}
- (NSArray<ArticleSimpleList*> *)articleList {
  return articleListArray;
}
- (ArticleSimpleList*)articleListAtIndex:(NSUInteger)index {
  return [articleListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPsize) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInitarticleList = YES;
   [self.articleList enumerateObjectsUsingBlock:^(ArticleSimpleList *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitarticleList = NO;
      *stop = YES;
    }
  }];
  if (!isInitarticleList) return isInitarticleList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPsize) {
    [output writeUInt32:1 value:self.psize];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimpleList *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPsize) {
    size_ += computeUInt32Size(1, self.psize);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimpleList *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (QiwenListRes*) parseFromData:(NSData*) data {
  return (QiwenListRes*)[[[QiwenListRes builder] mergeFromData:data] build];
}
+ (QiwenListRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiwenListRes*)[[[QiwenListRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QiwenListRes*) parseFromInputStream:(NSInputStream*) input {
  return (QiwenListRes*)[[[QiwenListRes builder] mergeFromInputStream:input] build];
}
+ (QiwenListRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiwenListRes*)[[[QiwenListRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiwenListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QiwenListRes*)[[[QiwenListRes builder] mergeFromCodedInputStream:input] build];
}
+ (QiwenListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QiwenListRes*)[[[QiwenListRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QiwenListResBuilder*) builder {
  return [[QiwenListResBuilder alloc] init];
}
+ (QiwenListResBuilder*) builderWithPrototype:(QiwenListRes*) prototype {
  return [[QiwenListRes builder] mergeFrom:prototype];
}
- (QiwenListResBuilder*) builder {
  return [QiwenListRes builder];
}
- (QiwenListResBuilder*) toBuilder {
  return [QiwenListRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPsize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"psize", [NSNumber numberWithInteger:self.psize]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimpleList *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"articleList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPsize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.psize] forKey: @"psize"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  for (ArticleSimpleList* element in self.articleListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"articleList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[QiwenListRes class]]) {
    return NO;
  }
  QiwenListRes *otherMessage = other;
  return
      self.hasPsize == otherMessage.hasPsize &&
      (!self.hasPsize || self.psize == otherMessage.psize) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.articleListArray isEqualToArray:otherMessage.articleListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPsize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.psize] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimpleList *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface QiwenListResBuilder()
@property (strong) QiwenListRes* resultQiwenListRes;
@end

@implementation QiwenListResBuilder
@synthesize resultQiwenListRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQiwenListRes = [[QiwenListRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQiwenListRes;
}
- (QiwenListResBuilder*) clear {
  self.resultQiwenListRes = [[QiwenListRes alloc] init];
  return self;
}
- (QiwenListResBuilder*) clone {
  return [QiwenListRes builderWithPrototype:resultQiwenListRes];
}
- (QiwenListRes*) defaultInstance {
  return [QiwenListRes defaultInstance];
}
- (QiwenListRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QiwenListRes*) buildPartial {
  QiwenListRes* returnMe = resultQiwenListRes;
  self.resultQiwenListRes = nil;
  return returnMe;
}
- (QiwenListResBuilder*) mergeFrom:(QiwenListRes*) other {
  if (other == [QiwenListRes defaultInstance]) {
    return self;
  }
  if (other.hasPsize) {
    [self setPsize:other.psize];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.articleListArray.count > 0) {
    if (resultQiwenListRes.articleListArray == nil) {
      resultQiwenListRes.articleListArray = [[NSMutableArray alloc] initWithArray:other.articleListArray];
    } else {
      [resultQiwenListRes.articleListArray addObjectsFromArray:other.articleListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QiwenListResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QiwenListResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPsize:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 42: {
        ArticleSimpleListBuilder* subBuilder = [ArticleSimpleList builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addArticleList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPsize {
  return resultQiwenListRes.hasPsize;
}
- (UInt32) psize {
  return resultQiwenListRes.psize;
}
- (QiwenListResBuilder*) setPsize:(UInt32) value {
  resultQiwenListRes.hasPsize = YES;
  resultQiwenListRes.psize = value;
  return self;
}
- (QiwenListResBuilder*) clearPsize {
  resultQiwenListRes.hasPsize = NO;
  resultQiwenListRes.psize = 0;
  return self;
}
- (BOOL) hasPage {
  return resultQiwenListRes.hasPage;
}
- (UInt32) page {
  return resultQiwenListRes.page;
}
- (QiwenListResBuilder*) setPage:(UInt32) value {
  resultQiwenListRes.hasPage = YES;
  resultQiwenListRes.page = value;
  return self;
}
- (QiwenListResBuilder*) clearPage {
  resultQiwenListRes.hasPage = NO;
  resultQiwenListRes.page = 0;
  return self;
}
- (NSMutableArray<ArticleSimpleList*> *)articleList {
  return resultQiwenListRes.articleListArray;
}
- (ArticleSimpleList*)articleListAtIndex:(NSUInteger)index {
  return [resultQiwenListRes articleListAtIndex:index];
}
- (QiwenListResBuilder *)addArticleList:(ArticleSimpleList*)value {
  if (resultQiwenListRes.articleListArray == nil) {
    resultQiwenListRes.articleListArray = [[NSMutableArray alloc]init];
  }
  [resultQiwenListRes.articleListArray addObject:value];
  return self;
}
- (QiwenListResBuilder *)setArticleListArray:(NSArray<ArticleSimpleList*> *)array {
  resultQiwenListRes.articleListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (QiwenListResBuilder *)clearArticleList {
  resultQiwenListRes.articleListArray = nil;
  return self;
}
@end

@interface ArticleSimpleList ()
@property UInt32 articleType;
@property (strong) ArticleSimple* article;
@property (strong) Zhuanti* zt;
@end

@implementation ArticleSimpleList

- (BOOL) hasArticleType {
  return !!hasArticleType_;
}
- (void) setHasArticleType:(BOOL) _value_ {
  hasArticleType_ = !!_value_;
}
@synthesize articleType;
- (BOOL) hasArticle {
  return !!hasArticle_;
}
- (void) setHasArticle:(BOOL) _value_ {
  hasArticle_ = !!_value_;
}
@synthesize article;
- (BOOL) hasZt {
  return !!hasZt_;
}
- (void) setHasZt:(BOOL) _value_ {
  hasZt_ = !!_value_;
}
@synthesize zt;
- (instancetype) init {
  if ((self = [super init])) {
    self.articleType = 0;
    self.article = [ArticleSimple defaultInstance];
    self.zt = [Zhuanti defaultInstance];
  }
  return self;
}
static ArticleSimpleList* defaultArticleSimpleListInstance = nil;
+ (void) initialize {
  if (self == [ArticleSimpleList class]) {
    defaultArticleSimpleListInstance = [[ArticleSimpleList alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultArticleSimpleListInstance;
}
- (instancetype) defaultInstance {
  return defaultArticleSimpleListInstance;
}
- (BOOL) isInitialized {
  if (!self.hasArticleType) {
    return NO;
  }
  if (self.hasArticle) {
    if (!self.article.isInitialized) {
      return NO;
    }
  }
  if (self.hasZt) {
    if (!self.zt.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasArticleType) {
    [output writeUInt32:1 value:self.articleType];
  }
  if (self.hasArticle) {
    [output writeMessage:3 value:self.article];
  }
  if (self.hasZt) {
    [output writeMessage:5 value:self.zt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasArticleType) {
    size_ += computeUInt32Size(1, self.articleType);
  }
  if (self.hasArticle) {
    size_ += computeMessageSize(3, self.article);
  }
  if (self.hasZt) {
    size_ += computeMessageSize(5, self.zt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ArticleSimpleList*) parseFromData:(NSData*) data {
  return (ArticleSimpleList*)[[[ArticleSimpleList builder] mergeFromData:data] build];
}
+ (ArticleSimpleList*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleSimpleList*)[[[ArticleSimpleList builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ArticleSimpleList*) parseFromInputStream:(NSInputStream*) input {
  return (ArticleSimpleList*)[[[ArticleSimpleList builder] mergeFromInputStream:input] build];
}
+ (ArticleSimpleList*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleSimpleList*)[[[ArticleSimpleList builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ArticleSimpleList*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ArticleSimpleList*)[[[ArticleSimpleList builder] mergeFromCodedInputStream:input] build];
}
+ (ArticleSimpleList*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleSimpleList*)[[[ArticleSimpleList builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ArticleSimpleListBuilder*) builder {
  return [[ArticleSimpleListBuilder alloc] init];
}
+ (ArticleSimpleListBuilder*) builderWithPrototype:(ArticleSimpleList*) prototype {
  return [[ArticleSimpleList builder] mergeFrom:prototype];
}
- (ArticleSimpleListBuilder*) builder {
  return [ArticleSimpleList builder];
}
- (ArticleSimpleListBuilder*) toBuilder {
  return [ArticleSimpleList builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasArticleType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleType", [NSNumber numberWithInteger:self.articleType]];
  }
  if (self.hasArticle) {
    [output appendFormat:@"%@%@ {\n", indent, @"article"];
    [self.article writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasZt) {
    [output appendFormat:@"%@%@ {\n", indent, @"zt"];
    [self.zt writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasArticleType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.articleType] forKey: @"articleType"];
  }
  if (self.hasArticle) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.article storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"article"];
  }
  if (self.hasZt) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.zt storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"zt"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ArticleSimpleList class]]) {
    return NO;
  }
  ArticleSimpleList *otherMessage = other;
  return
      self.hasArticleType == otherMessage.hasArticleType &&
      (!self.hasArticleType || self.articleType == otherMessage.articleType) &&
      self.hasArticle == otherMessage.hasArticle &&
      (!self.hasArticle || [self.article isEqual:otherMessage.article]) &&
      self.hasZt == otherMessage.hasZt &&
      (!self.hasZt || [self.zt isEqual:otherMessage.zt]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasArticleType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.articleType] hash];
  }
  if (self.hasArticle) {
    hashCode = hashCode * 31 + [self.article hash];
  }
  if (self.hasZt) {
    hashCode = hashCode * 31 + [self.zt hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ArticleSimpleListBuilder()
@property (strong) ArticleSimpleList* resultArticleSimpleList;
@end

@implementation ArticleSimpleListBuilder
@synthesize resultArticleSimpleList;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultArticleSimpleList = [[ArticleSimpleList alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultArticleSimpleList;
}
- (ArticleSimpleListBuilder*) clear {
  self.resultArticleSimpleList = [[ArticleSimpleList alloc] init];
  return self;
}
- (ArticleSimpleListBuilder*) clone {
  return [ArticleSimpleList builderWithPrototype:resultArticleSimpleList];
}
- (ArticleSimpleList*) defaultInstance {
  return [ArticleSimpleList defaultInstance];
}
- (ArticleSimpleList*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ArticleSimpleList*) buildPartial {
  ArticleSimpleList* returnMe = resultArticleSimpleList;
  self.resultArticleSimpleList = nil;
  return returnMe;
}
- (ArticleSimpleListBuilder*) mergeFrom:(ArticleSimpleList*) other {
  if (other == [ArticleSimpleList defaultInstance]) {
    return self;
  }
  if (other.hasArticleType) {
    [self setArticleType:other.articleType];
  }
  if (other.hasArticle) {
    [self mergeArticle:other.article];
  }
  if (other.hasZt) {
    [self mergeZt:other.zt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ArticleSimpleListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ArticleSimpleListBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setArticleType:[input readUInt32]];
        break;
      }
      case 26: {
        ArticleSimpleBuilder* subBuilder = [ArticleSimple builder];
        if (self.hasArticle) {
          [subBuilder mergeFrom:self.article];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setArticle:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        ZhuantiBuilder* subBuilder = [Zhuanti builder];
        if (self.hasZt) {
          [subBuilder mergeFrom:self.zt];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setZt:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasArticleType {
  return resultArticleSimpleList.hasArticleType;
}
- (UInt32) articleType {
  return resultArticleSimpleList.articleType;
}
- (ArticleSimpleListBuilder*) setArticleType:(UInt32) value {
  resultArticleSimpleList.hasArticleType = YES;
  resultArticleSimpleList.articleType = value;
  return self;
}
- (ArticleSimpleListBuilder*) clearArticleType {
  resultArticleSimpleList.hasArticleType = NO;
  resultArticleSimpleList.articleType = 0;
  return self;
}
- (BOOL) hasArticle {
  return resultArticleSimpleList.hasArticle;
}
- (ArticleSimple*) article {
  return resultArticleSimpleList.article;
}
- (ArticleSimpleListBuilder*) setArticle:(ArticleSimple*) value {
  resultArticleSimpleList.hasArticle = YES;
  resultArticleSimpleList.article = value;
  return self;
}
- (ArticleSimpleListBuilder*) setArticleBuilder:(ArticleSimpleBuilder*) builderForValue {
  return [self setArticle:[builderForValue build]];
}
- (ArticleSimpleListBuilder*) mergeArticle:(ArticleSimple*) value {
  if (resultArticleSimpleList.hasArticle &&
      resultArticleSimpleList.article != [ArticleSimple defaultInstance]) {
    resultArticleSimpleList.article =
      [[[ArticleSimple builderWithPrototype:resultArticleSimpleList.article] mergeFrom:value] buildPartial];
  } else {
    resultArticleSimpleList.article = value;
  }
  resultArticleSimpleList.hasArticle = YES;
  return self;
}
- (ArticleSimpleListBuilder*) clearArticle {
  resultArticleSimpleList.hasArticle = NO;
  resultArticleSimpleList.article = [ArticleSimple defaultInstance];
  return self;
}
- (BOOL) hasZt {
  return resultArticleSimpleList.hasZt;
}
- (Zhuanti*) zt {
  return resultArticleSimpleList.zt;
}
- (ArticleSimpleListBuilder*) setZt:(Zhuanti*) value {
  resultArticleSimpleList.hasZt = YES;
  resultArticleSimpleList.zt = value;
  return self;
}
- (ArticleSimpleListBuilder*) setZtBuilder:(ZhuantiBuilder*) builderForValue {
  return [self setZt:[builderForValue build]];
}
- (ArticleSimpleListBuilder*) mergeZt:(Zhuanti*) value {
  if (resultArticleSimpleList.hasZt &&
      resultArticleSimpleList.zt != [Zhuanti defaultInstance]) {
    resultArticleSimpleList.zt =
      [[[Zhuanti builderWithPrototype:resultArticleSimpleList.zt] mergeFrom:value] buildPartial];
  } else {
    resultArticleSimpleList.zt = value;
  }
  resultArticleSimpleList.hasZt = YES;
  return self;
}
- (ArticleSimpleListBuilder*) clearZt {
  resultArticleSimpleList.hasZt = NO;
  resultArticleSimpleList.zt = [Zhuanti defaultInstance];
  return self;
}
@end

@interface ArticleSimple ()
@property (strong) NSString* title;
@property UInt32 articleId;
@property (strong) NSMutableArray<TextPicVideo*> * picsArray;
@property (strong) Source* source;
@property UInt64 t;
@property UInt64 commentCount;
@property UInt64 picsCount;
@end

@implementation ArticleSimple

- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasArticleId {
  return !!hasArticleId_;
}
- (void) setHasArticleId:(BOOL) _value_ {
  hasArticleId_ = !!_value_;
}
@synthesize articleId;
@synthesize picsArray;
@dynamic pics;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) _value_ {
  hasSource_ = !!_value_;
}
@synthesize source;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasCommentCount {
  return !!hasCommentCount_;
}
- (void) setHasCommentCount:(BOOL) _value_ {
  hasCommentCount_ = !!_value_;
}
@synthesize commentCount;
- (BOOL) hasPicsCount {
  return !!hasPicsCount_;
}
- (void) setHasPicsCount:(BOOL) _value_ {
  hasPicsCount_ = !!_value_;
}
@synthesize picsCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.title = @"";
    self.articleId = 0;
    self.source = [Source defaultInstance];
    self.t = 0L;
    self.commentCount = 0L;
    self.picsCount = 0L;
  }
  return self;
}
static ArticleSimple* defaultArticleSimpleInstance = nil;
+ (void) initialize {
  if (self == [ArticleSimple class]) {
    defaultArticleSimpleInstance = [[ArticleSimple alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultArticleSimpleInstance;
}
- (instancetype) defaultInstance {
  return defaultArticleSimpleInstance;
}
- (NSArray<TextPicVideo*> *)pics {
  return picsArray;
}
- (TextPicVideo*)picsAtIndex:(NSUInteger)index {
  return [picsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTitle) {
    return NO;
  }
  if (!self.hasArticleId) {
    return NO;
  }
  if (self.hasSource) {
    if (!self.source.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTitle) {
    [output writeString:1 value:self.title];
  }
  if (self.hasArticleId) {
    [output writeUInt32:2 value:self.articleId];
  }
  [self.picsArray enumerateObjectsUsingBlock:^(TextPicVideo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasSource) {
    [output writeMessage:5 value:self.source];
  }
  if (self.hasT) {
    [output writeUInt64:7 value:self.t];
  }
  if (self.hasCommentCount) {
    [output writeUInt64:9 value:self.commentCount];
  }
  if (self.hasPicsCount) {
    [output writeUInt64:11 value:self.picsCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTitle) {
    size_ += computeStringSize(1, self.title);
  }
  if (self.hasArticleId) {
    size_ += computeUInt32Size(2, self.articleId);
  }
  [self.picsArray enumerateObjectsUsingBlock:^(TextPicVideo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasSource) {
    size_ += computeMessageSize(5, self.source);
  }
  if (self.hasT) {
    size_ += computeUInt64Size(7, self.t);
  }
  if (self.hasCommentCount) {
    size_ += computeUInt64Size(9, self.commentCount);
  }
  if (self.hasPicsCount) {
    size_ += computeUInt64Size(11, self.picsCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ArticleSimple*) parseFromData:(NSData*) data {
  return (ArticleSimple*)[[[ArticleSimple builder] mergeFromData:data] build];
}
+ (ArticleSimple*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleSimple*)[[[ArticleSimple builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ArticleSimple*) parseFromInputStream:(NSInputStream*) input {
  return (ArticleSimple*)[[[ArticleSimple builder] mergeFromInputStream:input] build];
}
+ (ArticleSimple*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleSimple*)[[[ArticleSimple builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ArticleSimple*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ArticleSimple*)[[[ArticleSimple builder] mergeFromCodedInputStream:input] build];
}
+ (ArticleSimple*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleSimple*)[[[ArticleSimple builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ArticleSimpleBuilder*) builder {
  return [[ArticleSimpleBuilder alloc] init];
}
+ (ArticleSimpleBuilder*) builderWithPrototype:(ArticleSimple*) prototype {
  return [[ArticleSimple builder] mergeFrom:prototype];
}
- (ArticleSimpleBuilder*) builder {
  return [ArticleSimple builder];
}
- (ArticleSimpleBuilder*) toBuilder {
  return [ArticleSimple builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasArticleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleId", [NSNumber numberWithInteger:self.articleId]];
  }
  [self.picsArray enumerateObjectsUsingBlock:^(TextPicVideo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"pics"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSource) {
    [output appendFormat:@"%@%@ {\n", indent, @"source"];
    [self.source writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasCommentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commentCount", [NSNumber numberWithLongLong:self.commentCount]];
  }
  if (self.hasPicsCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"picsCount", [NSNumber numberWithLongLong:self.picsCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasArticleId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.articleId] forKey: @"articleId"];
  }
  for (TextPicVideo* element in self.picsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"pics"];
  }
  if (self.hasSource) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.source storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"source"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasCommentCount) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.commentCount] forKey: @"commentCount"];
  }
  if (self.hasPicsCount) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.picsCount] forKey: @"picsCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ArticleSimple class]]) {
    return NO;
  }
  ArticleSimple *otherMessage = other;
  return
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasArticleId == otherMessage.hasArticleId &&
      (!self.hasArticleId || self.articleId == otherMessage.articleId) &&
      [self.picsArray isEqualToArray:otherMessage.picsArray] &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasCommentCount == otherMessage.hasCommentCount &&
      (!self.hasCommentCount || self.commentCount == otherMessage.commentCount) &&
      self.hasPicsCount == otherMessage.hasPicsCount &&
      (!self.hasPicsCount || self.picsCount == otherMessage.picsCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasArticleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.articleId] hash];
  }
  [self.picsArray enumerateObjectsUsingBlock:^(TextPicVideo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasCommentCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.commentCount] hash];
  }
  if (self.hasPicsCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.picsCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ArticleSimpleBuilder()
@property (strong) ArticleSimple* resultArticleSimple;
@end

@implementation ArticleSimpleBuilder
@synthesize resultArticleSimple;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultArticleSimple = [[ArticleSimple alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultArticleSimple;
}
- (ArticleSimpleBuilder*) clear {
  self.resultArticleSimple = [[ArticleSimple alloc] init];
  return self;
}
- (ArticleSimpleBuilder*) clone {
  return [ArticleSimple builderWithPrototype:resultArticleSimple];
}
- (ArticleSimple*) defaultInstance {
  return [ArticleSimple defaultInstance];
}
- (ArticleSimple*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ArticleSimple*) buildPartial {
  ArticleSimple* returnMe = resultArticleSimple;
  self.resultArticleSimple = nil;
  return returnMe;
}
- (ArticleSimpleBuilder*) mergeFrom:(ArticleSimple*) other {
  if (other == [ArticleSimple defaultInstance]) {
    return self;
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasArticleId) {
    [self setArticleId:other.articleId];
  }
  if (other.picsArray.count > 0) {
    if (resultArticleSimple.picsArray == nil) {
      resultArticleSimple.picsArray = [[NSMutableArray alloc] initWithArray:other.picsArray];
    } else {
      [resultArticleSimple.picsArray addObjectsFromArray:other.picsArray];
    }
  }
  if (other.hasSource) {
    [self mergeSource:other.source];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasCommentCount) {
    [self setCommentCount:other.commentCount];
  }
  if (other.hasPicsCount) {
    [self setPicsCount:other.picsCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ArticleSimpleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ArticleSimpleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTitle:[input readString]];
        break;
      }
      case 16: {
        [self setArticleId:[input readUInt32]];
        break;
      }
      case 26: {
        TextPicVideoBuilder* subBuilder = [TextPicVideo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPics:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        SourceBuilder* subBuilder = [Source builder];
        if (self.hasSource) {
          [subBuilder mergeFrom:self.source];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSource:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setT:[input readUInt64]];
        break;
      }
      case 72: {
        [self setCommentCount:[input readUInt64]];
        break;
      }
      case 88: {
        [self setPicsCount:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasTitle {
  return resultArticleSimple.hasTitle;
}
- (NSString*) title {
  return resultArticleSimple.title;
}
- (ArticleSimpleBuilder*) setTitle:(NSString*) value {
  resultArticleSimple.hasTitle = YES;
  resultArticleSimple.title = value;
  return self;
}
- (ArticleSimpleBuilder*) clearTitle {
  resultArticleSimple.hasTitle = NO;
  resultArticleSimple.title = @"";
  return self;
}
- (BOOL) hasArticleId {
  return resultArticleSimple.hasArticleId;
}
- (UInt32) articleId {
  return resultArticleSimple.articleId;
}
- (ArticleSimpleBuilder*) setArticleId:(UInt32) value {
  resultArticleSimple.hasArticleId = YES;
  resultArticleSimple.articleId = value;
  return self;
}
- (ArticleSimpleBuilder*) clearArticleId {
  resultArticleSimple.hasArticleId = NO;
  resultArticleSimple.articleId = 0;
  return self;
}
- (NSMutableArray<TextPicVideo*> *)pics {
  return resultArticleSimple.picsArray;
}
- (TextPicVideo*)picsAtIndex:(NSUInteger)index {
  return [resultArticleSimple picsAtIndex:index];
}
- (ArticleSimpleBuilder *)addPics:(TextPicVideo*)value {
  if (resultArticleSimple.picsArray == nil) {
    resultArticleSimple.picsArray = [[NSMutableArray alloc]init];
  }
  [resultArticleSimple.picsArray addObject:value];
  return self;
}
- (ArticleSimpleBuilder *)setPicsArray:(NSArray<TextPicVideo*> *)array {
  resultArticleSimple.picsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ArticleSimpleBuilder *)clearPics {
  resultArticleSimple.picsArray = nil;
  return self;
}
- (BOOL) hasSource {
  return resultArticleSimple.hasSource;
}
- (Source*) source {
  return resultArticleSimple.source;
}
- (ArticleSimpleBuilder*) setSource:(Source*) value {
  resultArticleSimple.hasSource = YES;
  resultArticleSimple.source = value;
  return self;
}
- (ArticleSimpleBuilder*) setSourceBuilder:(SourceBuilder*) builderForValue {
  return [self setSource:[builderForValue build]];
}
- (ArticleSimpleBuilder*) mergeSource:(Source*) value {
  if (resultArticleSimple.hasSource &&
      resultArticleSimple.source != [Source defaultInstance]) {
    resultArticleSimple.source =
      [[[Source builderWithPrototype:resultArticleSimple.source] mergeFrom:value] buildPartial];
  } else {
    resultArticleSimple.source = value;
  }
  resultArticleSimple.hasSource = YES;
  return self;
}
- (ArticleSimpleBuilder*) clearSource {
  resultArticleSimple.hasSource = NO;
  resultArticleSimple.source = [Source defaultInstance];
  return self;
}
- (BOOL) hasT {
  return resultArticleSimple.hasT;
}
- (UInt64) t {
  return resultArticleSimple.t;
}
- (ArticleSimpleBuilder*) setT:(UInt64) value {
  resultArticleSimple.hasT = YES;
  resultArticleSimple.t = value;
  return self;
}
- (ArticleSimpleBuilder*) clearT {
  resultArticleSimple.hasT = NO;
  resultArticleSimple.t = 0L;
  return self;
}
- (BOOL) hasCommentCount {
  return resultArticleSimple.hasCommentCount;
}
- (UInt64) commentCount {
  return resultArticleSimple.commentCount;
}
- (ArticleSimpleBuilder*) setCommentCount:(UInt64) value {
  resultArticleSimple.hasCommentCount = YES;
  resultArticleSimple.commentCount = value;
  return self;
}
- (ArticleSimpleBuilder*) clearCommentCount {
  resultArticleSimple.hasCommentCount = NO;
  resultArticleSimple.commentCount = 0L;
  return self;
}
- (BOOL) hasPicsCount {
  return resultArticleSimple.hasPicsCount;
}
- (UInt64) picsCount {
  return resultArticleSimple.picsCount;
}
- (ArticleSimpleBuilder*) setPicsCount:(UInt64) value {
  resultArticleSimple.hasPicsCount = YES;
  resultArticleSimple.picsCount = value;
  return self;
}
- (ArticleSimpleBuilder*) clearPicsCount {
  resultArticleSimple.hasPicsCount = NO;
  resultArticleSimple.picsCount = 0L;
  return self;
}
@end

@interface Zhuanti ()
@property (strong) NSString* title;
@property UInt32 style;
@property (strong) NSString* pic;
@property (strong) NSString* simple;
@property (strong) NSMutableArray<ArticleSimple*> * listArray;
@property UInt32 id;
@end

@implementation Zhuanti

- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasStyle {
  return !!hasStyle_;
}
- (void) setHasStyle:(BOOL) _value_ {
  hasStyle_ = !!_value_;
}
@synthesize style;
- (BOOL) hasPic {
  return !!hasPic_;
}
- (void) setHasPic:(BOOL) _value_ {
  hasPic_ = !!_value_;
}
@synthesize pic;
- (BOOL) hasSimple {
  return !!hasSimple_;
}
- (void) setHasSimple:(BOOL) _value_ {
  hasSimple_ = !!_value_;
}
@synthesize simple;
@synthesize listArray;
@dynamic list;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (instancetype) init {
  if ((self = [super init])) {
    self.title = @"";
    self.style = 0;
    self.pic = @"";
    self.simple = @"";
    self.id = 0;
  }
  return self;
}
static Zhuanti* defaultZhuantiInstance = nil;
+ (void) initialize {
  if (self == [Zhuanti class]) {
    defaultZhuantiInstance = [[Zhuanti alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultZhuantiInstance;
}
- (instancetype) defaultInstance {
  return defaultZhuantiInstance;
}
- (NSArray<ArticleSimple*> *)list {
  return listArray;
}
- (ArticleSimple*)listAtIndex:(NSUInteger)index {
  return [listArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasTitle) {
    return NO;
  }
  if (!self.hasStyle) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  __block BOOL isInitlist = YES;
   [self.list enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitlist = NO;
      *stop = YES;
    }
  }];
  if (!isInitlist) return isInitlist;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTitle) {
    [output writeString:1 value:self.title];
  }
  if (self.hasStyle) {
    [output writeUInt32:3 value:self.style];
  }
  if (self.hasPic) {
    [output writeString:5 value:self.pic];
  }
  if (self.hasSimple) {
    [output writeString:7 value:self.simple];
  }
  [self.listArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  if (self.hasId) {
    [output writeUInt32:11 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTitle) {
    size_ += computeStringSize(1, self.title);
  }
  if (self.hasStyle) {
    size_ += computeUInt32Size(3, self.style);
  }
  if (self.hasPic) {
    size_ += computeStringSize(5, self.pic);
  }
  if (self.hasSimple) {
    size_ += computeStringSize(7, self.simple);
  }
  [self.listArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  if (self.hasId) {
    size_ += computeUInt32Size(11, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Zhuanti*) parseFromData:(NSData*) data {
  return (Zhuanti*)[[[Zhuanti builder] mergeFromData:data] build];
}
+ (Zhuanti*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Zhuanti*)[[[Zhuanti builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Zhuanti*) parseFromInputStream:(NSInputStream*) input {
  return (Zhuanti*)[[[Zhuanti builder] mergeFromInputStream:input] build];
}
+ (Zhuanti*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Zhuanti*)[[[Zhuanti builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Zhuanti*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Zhuanti*)[[[Zhuanti builder] mergeFromCodedInputStream:input] build];
}
+ (Zhuanti*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Zhuanti*)[[[Zhuanti builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ZhuantiBuilder*) builder {
  return [[ZhuantiBuilder alloc] init];
}
+ (ZhuantiBuilder*) builderWithPrototype:(Zhuanti*) prototype {
  return [[Zhuanti builder] mergeFrom:prototype];
}
- (ZhuantiBuilder*) builder {
  return [Zhuanti builder];
}
- (ZhuantiBuilder*) toBuilder {
  return [Zhuanti builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasStyle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"style", [NSNumber numberWithInteger:self.style]];
  }
  if (self.hasPic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pic", self.pic];
  }
  if (self.hasSimple) {
    [output appendFormat:@"%@%@: %@\n", indent, @"simple", self.simple];
  }
  [self.listArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"list"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasStyle) {
    [dictionary setObject: [NSNumber numberWithInteger:self.style] forKey: @"style"];
  }
  if (self.hasPic) {
    [dictionary setObject: self.pic forKey: @"pic"];
  }
  if (self.hasSimple) {
    [dictionary setObject: self.simple forKey: @"simple"];
  }
  for (ArticleSimple* element in self.listArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"list"];
  }
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Zhuanti class]]) {
    return NO;
  }
  Zhuanti *otherMessage = other;
  return
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasStyle == otherMessage.hasStyle &&
      (!self.hasStyle || self.style == otherMessage.style) &&
      self.hasPic == otherMessage.hasPic &&
      (!self.hasPic || [self.pic isEqual:otherMessage.pic]) &&
      self.hasSimple == otherMessage.hasSimple &&
      (!self.hasSimple || [self.simple isEqual:otherMessage.simple]) &&
      [self.listArray isEqualToArray:otherMessage.listArray] &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasStyle) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.style] hash];
  }
  if (self.hasPic) {
    hashCode = hashCode * 31 + [self.pic hash];
  }
  if (self.hasSimple) {
    hashCode = hashCode * 31 + [self.simple hash];
  }
  [self.listArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ZhuantiBuilder()
@property (strong) Zhuanti* resultZhuanti;
@end

@implementation ZhuantiBuilder
@synthesize resultZhuanti;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultZhuanti = [[Zhuanti alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultZhuanti;
}
- (ZhuantiBuilder*) clear {
  self.resultZhuanti = [[Zhuanti alloc] init];
  return self;
}
- (ZhuantiBuilder*) clone {
  return [Zhuanti builderWithPrototype:resultZhuanti];
}
- (Zhuanti*) defaultInstance {
  return [Zhuanti defaultInstance];
}
- (Zhuanti*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Zhuanti*) buildPartial {
  Zhuanti* returnMe = resultZhuanti;
  self.resultZhuanti = nil;
  return returnMe;
}
- (ZhuantiBuilder*) mergeFrom:(Zhuanti*) other {
  if (other == [Zhuanti defaultInstance]) {
    return self;
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasStyle) {
    [self setStyle:other.style];
  }
  if (other.hasPic) {
    [self setPic:other.pic];
  }
  if (other.hasSimple) {
    [self setSimple:other.simple];
  }
  if (other.listArray.count > 0) {
    if (resultZhuanti.listArray == nil) {
      resultZhuanti.listArray = [[NSMutableArray alloc] initWithArray:other.listArray];
    } else {
      [resultZhuanti.listArray addObjectsFromArray:other.listArray];
    }
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ZhuantiBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ZhuantiBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setTitle:[input readString]];
        break;
      }
      case 24: {
        [self setStyle:[input readUInt32]];
        break;
      }
      case 42: {
        [self setPic:[input readString]];
        break;
      }
      case 58: {
        [self setSimple:[input readString]];
        break;
      }
      case 74: {
        ArticleSimpleBuilder* subBuilder = [ArticleSimple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addList:[subBuilder buildPartial]];
        break;
      }
      case 88: {
        [self setId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTitle {
  return resultZhuanti.hasTitle;
}
- (NSString*) title {
  return resultZhuanti.title;
}
- (ZhuantiBuilder*) setTitle:(NSString*) value {
  resultZhuanti.hasTitle = YES;
  resultZhuanti.title = value;
  return self;
}
- (ZhuantiBuilder*) clearTitle {
  resultZhuanti.hasTitle = NO;
  resultZhuanti.title = @"";
  return self;
}
- (BOOL) hasStyle {
  return resultZhuanti.hasStyle;
}
- (UInt32) style {
  return resultZhuanti.style;
}
- (ZhuantiBuilder*) setStyle:(UInt32) value {
  resultZhuanti.hasStyle = YES;
  resultZhuanti.style = value;
  return self;
}
- (ZhuantiBuilder*) clearStyle {
  resultZhuanti.hasStyle = NO;
  resultZhuanti.style = 0;
  return self;
}
- (BOOL) hasPic {
  return resultZhuanti.hasPic;
}
- (NSString*) pic {
  return resultZhuanti.pic;
}
- (ZhuantiBuilder*) setPic:(NSString*) value {
  resultZhuanti.hasPic = YES;
  resultZhuanti.pic = value;
  return self;
}
- (ZhuantiBuilder*) clearPic {
  resultZhuanti.hasPic = NO;
  resultZhuanti.pic = @"";
  return self;
}
- (BOOL) hasSimple {
  return resultZhuanti.hasSimple;
}
- (NSString*) simple {
  return resultZhuanti.simple;
}
- (ZhuantiBuilder*) setSimple:(NSString*) value {
  resultZhuanti.hasSimple = YES;
  resultZhuanti.simple = value;
  return self;
}
- (ZhuantiBuilder*) clearSimple {
  resultZhuanti.hasSimple = NO;
  resultZhuanti.simple = @"";
  return self;
}
- (NSMutableArray<ArticleSimple*> *)list {
  return resultZhuanti.listArray;
}
- (ArticleSimple*)listAtIndex:(NSUInteger)index {
  return [resultZhuanti listAtIndex:index];
}
- (ZhuantiBuilder *)addList:(ArticleSimple*)value {
  if (resultZhuanti.listArray == nil) {
    resultZhuanti.listArray = [[NSMutableArray alloc]init];
  }
  [resultZhuanti.listArray addObject:value];
  return self;
}
- (ZhuantiBuilder *)setListArray:(NSArray<ArticleSimple*> *)array {
  resultZhuanti.listArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ZhuantiBuilder *)clearList {
  resultZhuanti.listArray = nil;
  return self;
}
- (BOOL) hasId {
  return resultZhuanti.hasId;
}
- (UInt32) id {
  return resultZhuanti.id;
}
- (ZhuantiBuilder*) setId:(UInt32) value {
  resultZhuanti.hasId = YES;
  resultZhuanti.id = value;
  return self;
}
- (ZhuantiBuilder*) clearId {
  resultZhuanti.hasId = NO;
  resultZhuanti.id = 0;
  return self;
}
@end

@interface Source ()
@property (strong) NSString* sourceName;
@property UInt32 sourceId;
@property (strong) NSString* abstr;
@property (strong) NSString* url;
@property UInt32 subCount;
@property UInt32 isSub;
@end

@implementation Source

- (BOOL) hasSourceName {
  return !!hasSourceName_;
}
- (void) setHasSourceName:(BOOL) _value_ {
  hasSourceName_ = !!_value_;
}
@synthesize sourceName;
- (BOOL) hasSourceId {
  return !!hasSourceId_;
}
- (void) setHasSourceId:(BOOL) _value_ {
  hasSourceId_ = !!_value_;
}
@synthesize sourceId;
- (BOOL) hasAbstr {
  return !!hasAbstr_;
}
- (void) setHasAbstr:(BOOL) _value_ {
  hasAbstr_ = !!_value_;
}
@synthesize abstr;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (BOOL) hasSubCount {
  return !!hasSubCount_;
}
- (void) setHasSubCount:(BOOL) _value_ {
  hasSubCount_ = !!_value_;
}
@synthesize subCount;
- (BOOL) hasIsSub {
  return !!hasIsSub_;
}
- (void) setHasIsSub:(BOOL) _value_ {
  hasIsSub_ = !!_value_;
}
@synthesize isSub;
- (instancetype) init {
  if ((self = [super init])) {
    self.sourceName = @"";
    self.sourceId = 0;
    self.abstr = @"";
    self.url = @"";
    self.subCount = 0;
    self.isSub = 0;
  }
  return self;
}
static Source* defaultSourceInstance = nil;
+ (void) initialize {
  if (self == [Source class]) {
    defaultSourceInstance = [[Source alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSourceInstance;
}
- (instancetype) defaultInstance {
  return defaultSourceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSourceName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSourceName) {
    [output writeString:1 value:self.sourceName];
  }
  if (self.hasSourceId) {
    [output writeUInt32:3 value:self.sourceId];
  }
  if (self.hasAbstr) {
    [output writeString:5 value:self.abstr];
  }
  if (self.hasUrl) {
    [output writeString:7 value:self.url];
  }
  if (self.hasSubCount) {
    [output writeUInt32:9 value:self.subCount];
  }
  if (self.hasIsSub) {
    [output writeUInt32:11 value:self.isSub];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSourceName) {
    size_ += computeStringSize(1, self.sourceName);
  }
  if (self.hasSourceId) {
    size_ += computeUInt32Size(3, self.sourceId);
  }
  if (self.hasAbstr) {
    size_ += computeStringSize(5, self.abstr);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(7, self.url);
  }
  if (self.hasSubCount) {
    size_ += computeUInt32Size(9, self.subCount);
  }
  if (self.hasIsSub) {
    size_ += computeUInt32Size(11, self.isSub);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Source*) parseFromData:(NSData*) data {
  return (Source*)[[[Source builder] mergeFromData:data] build];
}
+ (Source*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Source*)[[[Source builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Source*) parseFromInputStream:(NSInputStream*) input {
  return (Source*)[[[Source builder] mergeFromInputStream:input] build];
}
+ (Source*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Source*)[[[Source builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Source*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Source*)[[[Source builder] mergeFromCodedInputStream:input] build];
}
+ (Source*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Source*)[[[Source builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SourceBuilder*) builder {
  return [[SourceBuilder alloc] init];
}
+ (SourceBuilder*) builderWithPrototype:(Source*) prototype {
  return [[Source builder] mergeFrom:prototype];
}
- (SourceBuilder*) builder {
  return [Source builder];
}
- (SourceBuilder*) toBuilder {
  return [Source builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSourceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceName", self.sourceName];
  }
  if (self.hasSourceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceId", [NSNumber numberWithInteger:self.sourceId]];
  }
  if (self.hasAbstr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abstr", self.abstr];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasSubCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"subCount", [NSNumber numberWithInteger:self.subCount]];
  }
  if (self.hasIsSub) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isSub", [NSNumber numberWithInteger:self.isSub]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSourceName) {
    [dictionary setObject: self.sourceName forKey: @"sourceName"];
  }
  if (self.hasSourceId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sourceId] forKey: @"sourceId"];
  }
  if (self.hasAbstr) {
    [dictionary setObject: self.abstr forKey: @"abstr"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  if (self.hasSubCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.subCount] forKey: @"subCount"];
  }
  if (self.hasIsSub) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isSub] forKey: @"isSub"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Source class]]) {
    return NO;
  }
  Source *otherMessage = other;
  return
      self.hasSourceName == otherMessage.hasSourceName &&
      (!self.hasSourceName || [self.sourceName isEqual:otherMessage.sourceName]) &&
      self.hasSourceId == otherMessage.hasSourceId &&
      (!self.hasSourceId || self.sourceId == otherMessage.sourceId) &&
      self.hasAbstr == otherMessage.hasAbstr &&
      (!self.hasAbstr || [self.abstr isEqual:otherMessage.abstr]) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasSubCount == otherMessage.hasSubCount &&
      (!self.hasSubCount || self.subCount == otherMessage.subCount) &&
      self.hasIsSub == otherMessage.hasIsSub &&
      (!self.hasIsSub || self.isSub == otherMessage.isSub) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSourceName) {
    hashCode = hashCode * 31 + [self.sourceName hash];
  }
  if (self.hasSourceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sourceId] hash];
  }
  if (self.hasAbstr) {
    hashCode = hashCode * 31 + [self.abstr hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasSubCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.subCount] hash];
  }
  if (self.hasIsSub) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isSub] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SourceBuilder()
@property (strong) Source* resultSource;
@end

@implementation SourceBuilder
@synthesize resultSource;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSource = [[Source alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSource;
}
- (SourceBuilder*) clear {
  self.resultSource = [[Source alloc] init];
  return self;
}
- (SourceBuilder*) clone {
  return [Source builderWithPrototype:resultSource];
}
- (Source*) defaultInstance {
  return [Source defaultInstance];
}
- (Source*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Source*) buildPartial {
  Source* returnMe = resultSource;
  self.resultSource = nil;
  return returnMe;
}
- (SourceBuilder*) mergeFrom:(Source*) other {
  if (other == [Source defaultInstance]) {
    return self;
  }
  if (other.hasSourceName) {
    [self setSourceName:other.sourceName];
  }
  if (other.hasSourceId) {
    [self setSourceId:other.sourceId];
  }
  if (other.hasAbstr) {
    [self setAbstr:other.abstr];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasSubCount) {
    [self setSubCount:other.subCount];
  }
  if (other.hasIsSub) {
    [self setIsSub:other.isSub];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SourceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SourceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSourceName:[input readString]];
        break;
      }
      case 24: {
        [self setSourceId:[input readUInt32]];
        break;
      }
      case 42: {
        [self setAbstr:[input readString]];
        break;
      }
      case 58: {
        [self setUrl:[input readString]];
        break;
      }
      case 72: {
        [self setSubCount:[input readUInt32]];
        break;
      }
      case 88: {
        [self setIsSub:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSourceName {
  return resultSource.hasSourceName;
}
- (NSString*) sourceName {
  return resultSource.sourceName;
}
- (SourceBuilder*) setSourceName:(NSString*) value {
  resultSource.hasSourceName = YES;
  resultSource.sourceName = value;
  return self;
}
- (SourceBuilder*) clearSourceName {
  resultSource.hasSourceName = NO;
  resultSource.sourceName = @"";
  return self;
}
- (BOOL) hasSourceId {
  return resultSource.hasSourceId;
}
- (UInt32) sourceId {
  return resultSource.sourceId;
}
- (SourceBuilder*) setSourceId:(UInt32) value {
  resultSource.hasSourceId = YES;
  resultSource.sourceId = value;
  return self;
}
- (SourceBuilder*) clearSourceId {
  resultSource.hasSourceId = NO;
  resultSource.sourceId = 0;
  return self;
}
- (BOOL) hasAbstr {
  return resultSource.hasAbstr;
}
- (NSString*) abstr {
  return resultSource.abstr;
}
- (SourceBuilder*) setAbstr:(NSString*) value {
  resultSource.hasAbstr = YES;
  resultSource.abstr = value;
  return self;
}
- (SourceBuilder*) clearAbstr {
  resultSource.hasAbstr = NO;
  resultSource.abstr = @"";
  return self;
}
- (BOOL) hasUrl {
  return resultSource.hasUrl;
}
- (NSString*) url {
  return resultSource.url;
}
- (SourceBuilder*) setUrl:(NSString*) value {
  resultSource.hasUrl = YES;
  resultSource.url = value;
  return self;
}
- (SourceBuilder*) clearUrl {
  resultSource.hasUrl = NO;
  resultSource.url = @"";
  return self;
}
- (BOOL) hasSubCount {
  return resultSource.hasSubCount;
}
- (UInt32) subCount {
  return resultSource.subCount;
}
- (SourceBuilder*) setSubCount:(UInt32) value {
  resultSource.hasSubCount = YES;
  resultSource.subCount = value;
  return self;
}
- (SourceBuilder*) clearSubCount {
  resultSource.hasSubCount = NO;
  resultSource.subCount = 0;
  return self;
}
- (BOOL) hasIsSub {
  return resultSource.hasIsSub;
}
- (UInt32) isSub {
  return resultSource.isSub;
}
- (SourceBuilder*) setIsSub:(UInt32) value {
  resultSource.hasIsSub = YES;
  resultSource.isSub = value;
  return self;
}
- (SourceBuilder*) clearIsSub {
  resultSource.hasIsSub = NO;
  resultSource.isSub = 0;
  return self;
}
@end

@interface TansuoReq ()
@property TansuoListType type;
@property UInt32 orderType;
@property UInt32 page;
@end

@implementation TansuoReq

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasOrderType {
  return !!hasOrderType_;
}
- (void) setHasOrderType:(BOOL) _value_ {
  hasOrderType_ = !!_value_;
}
@synthesize orderType;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = TansuoListTypeTYule;
    self.orderType = 0;
    self.page = 0;
  }
  return self;
}
static TansuoReq* defaultTansuoReqInstance = nil;
+ (void) initialize {
  if (self == [TansuoReq class]) {
    defaultTansuoReqInstance = [[TansuoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTansuoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultTansuoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasOrderType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasOrderType) {
    [output writeUInt32:3 value:self.orderType];
  }
  if (self.hasPage) {
    [output writeUInt32:5 value:self.page];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasOrderType) {
    size_ += computeUInt32Size(3, self.orderType);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(5, self.page);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TansuoReq*) parseFromData:(NSData*) data {
  return (TansuoReq*)[[[TansuoReq builder] mergeFromData:data] build];
}
+ (TansuoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TansuoReq*)[[[TansuoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TansuoReq*) parseFromInputStream:(NSInputStream*) input {
  return (TansuoReq*)[[[TansuoReq builder] mergeFromInputStream:input] build];
}
+ (TansuoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TansuoReq*)[[[TansuoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TansuoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TansuoReq*)[[[TansuoReq builder] mergeFromCodedInputStream:input] build];
}
+ (TansuoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TansuoReq*)[[[TansuoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TansuoReqBuilder*) builder {
  return [[TansuoReqBuilder alloc] init];
}
+ (TansuoReqBuilder*) builderWithPrototype:(TansuoReq*) prototype {
  return [[TansuoReq builder] mergeFrom:prototype];
}
- (TansuoReqBuilder*) builder {
  return [TansuoReq builder];
}
- (TansuoReqBuilder*) toBuilder {
  return [TansuoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromTansuoListType(self.type)];
  }
  if (self.hasOrderType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderType", [NSNumber numberWithInteger:self.orderType]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasOrderType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.orderType] forKey: @"orderType"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TansuoReq class]]) {
    return NO;
  }
  TansuoReq *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasOrderType == otherMessage.hasOrderType &&
      (!self.hasOrderType || self.orderType == otherMessage.orderType) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasOrderType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.orderType] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TansuoReqBuilder()
@property (strong) TansuoReq* resultTansuoReq;
@end

@implementation TansuoReqBuilder
@synthesize resultTansuoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTansuoReq = [[TansuoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTansuoReq;
}
- (TansuoReqBuilder*) clear {
  self.resultTansuoReq = [[TansuoReq alloc] init];
  return self;
}
- (TansuoReqBuilder*) clone {
  return [TansuoReq builderWithPrototype:resultTansuoReq];
}
- (TansuoReq*) defaultInstance {
  return [TansuoReq defaultInstance];
}
- (TansuoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TansuoReq*) buildPartial {
  TansuoReq* returnMe = resultTansuoReq;
  self.resultTansuoReq = nil;
  return returnMe;
}
- (TansuoReqBuilder*) mergeFrom:(TansuoReq*) other {
  if (other == [TansuoReq defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasOrderType) {
    [self setOrderType:other.orderType];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TansuoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TansuoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        TansuoListType value = (TansuoListType)[input readEnum];
        if (TansuoListTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 24: {
        [self setOrderType:[input readUInt32]];
        break;
      }
      case 40: {
        [self setPage:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultTansuoReq.hasType;
}
- (TansuoListType) type {
  return resultTansuoReq.type;
}
- (TansuoReqBuilder*) setType:(TansuoListType) value {
  resultTansuoReq.hasType = YES;
  resultTansuoReq.type = value;
  return self;
}
- (TansuoReqBuilder*) clearType {
  resultTansuoReq.hasType = NO;
  resultTansuoReq.type = TansuoListTypeTYule;
  return self;
}
- (BOOL) hasOrderType {
  return resultTansuoReq.hasOrderType;
}
- (UInt32) orderType {
  return resultTansuoReq.orderType;
}
- (TansuoReqBuilder*) setOrderType:(UInt32) value {
  resultTansuoReq.hasOrderType = YES;
  resultTansuoReq.orderType = value;
  return self;
}
- (TansuoReqBuilder*) clearOrderType {
  resultTansuoReq.hasOrderType = NO;
  resultTansuoReq.orderType = 0;
  return self;
}
- (BOOL) hasPage {
  return resultTansuoReq.hasPage;
}
- (UInt32) page {
  return resultTansuoReq.page;
}
- (TansuoReqBuilder*) setPage:(UInt32) value {
  resultTansuoReq.hasPage = YES;
  resultTansuoReq.page = value;
  return self;
}
- (TansuoReqBuilder*) clearPage {
  resultTansuoReq.hasPage = NO;
  resultTansuoReq.page = 0;
  return self;
}
@end

@interface TansuoRes ()
@property UInt32 psize;
@property UInt32 page;
@property (strong) NSMutableArray<SourceArticle*> * sourceListArray;
@end

@implementation TansuoRes

- (BOOL) hasPsize {
  return !!hasPsize_;
}
- (void) setHasPsize:(BOOL) _value_ {
  hasPsize_ = !!_value_;
}
@synthesize psize;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
@synthesize sourceListArray;
@dynamic sourceList;
- (instancetype) init {
  if ((self = [super init])) {
    self.psize = 0;
    self.page = 0;
  }
  return self;
}
static TansuoRes* defaultTansuoResInstance = nil;
+ (void) initialize {
  if (self == [TansuoRes class]) {
    defaultTansuoResInstance = [[TansuoRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTansuoResInstance;
}
- (instancetype) defaultInstance {
  return defaultTansuoResInstance;
}
- (NSArray<SourceArticle*> *)sourceList {
  return sourceListArray;
}
- (SourceArticle*)sourceListAtIndex:(NSUInteger)index {
  return [sourceListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPsize) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInitsourceList = YES;
   [self.sourceList enumerateObjectsUsingBlock:^(SourceArticle *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsourceList = NO;
      *stop = YES;
    }
  }];
  if (!isInitsourceList) return isInitsourceList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPsize) {
    [output writeUInt32:1 value:self.psize];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.sourceListArray enumerateObjectsUsingBlock:^(SourceArticle *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPsize) {
    size_ += computeUInt32Size(1, self.psize);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  [self.sourceListArray enumerateObjectsUsingBlock:^(SourceArticle *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TansuoRes*) parseFromData:(NSData*) data {
  return (TansuoRes*)[[[TansuoRes builder] mergeFromData:data] build];
}
+ (TansuoRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TansuoRes*)[[[TansuoRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TansuoRes*) parseFromInputStream:(NSInputStream*) input {
  return (TansuoRes*)[[[TansuoRes builder] mergeFromInputStream:input] build];
}
+ (TansuoRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TansuoRes*)[[[TansuoRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TansuoRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TansuoRes*)[[[TansuoRes builder] mergeFromCodedInputStream:input] build];
}
+ (TansuoRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TansuoRes*)[[[TansuoRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TansuoResBuilder*) builder {
  return [[TansuoResBuilder alloc] init];
}
+ (TansuoResBuilder*) builderWithPrototype:(TansuoRes*) prototype {
  return [[TansuoRes builder] mergeFrom:prototype];
}
- (TansuoResBuilder*) builder {
  return [TansuoRes builder];
}
- (TansuoResBuilder*) toBuilder {
  return [TansuoRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPsize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"psize", [NSNumber numberWithInteger:self.psize]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.sourceListArray enumerateObjectsUsingBlock:^(SourceArticle *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sourceList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPsize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.psize] forKey: @"psize"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  for (SourceArticle* element in self.sourceListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"sourceList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TansuoRes class]]) {
    return NO;
  }
  TansuoRes *otherMessage = other;
  return
      self.hasPsize == otherMessage.hasPsize &&
      (!self.hasPsize || self.psize == otherMessage.psize) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.sourceListArray isEqualToArray:otherMessage.sourceListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPsize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.psize] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  [self.sourceListArray enumerateObjectsUsingBlock:^(SourceArticle *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TansuoResBuilder()
@property (strong) TansuoRes* resultTansuoRes;
@end

@implementation TansuoResBuilder
@synthesize resultTansuoRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTansuoRes = [[TansuoRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTansuoRes;
}
- (TansuoResBuilder*) clear {
  self.resultTansuoRes = [[TansuoRes alloc] init];
  return self;
}
- (TansuoResBuilder*) clone {
  return [TansuoRes builderWithPrototype:resultTansuoRes];
}
- (TansuoRes*) defaultInstance {
  return [TansuoRes defaultInstance];
}
- (TansuoRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TansuoRes*) buildPartial {
  TansuoRes* returnMe = resultTansuoRes;
  self.resultTansuoRes = nil;
  return returnMe;
}
- (TansuoResBuilder*) mergeFrom:(TansuoRes*) other {
  if (other == [TansuoRes defaultInstance]) {
    return self;
  }
  if (other.hasPsize) {
    [self setPsize:other.psize];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.sourceListArray.count > 0) {
    if (resultTansuoRes.sourceListArray == nil) {
      resultTansuoRes.sourceListArray = [[NSMutableArray alloc] initWithArray:other.sourceListArray];
    } else {
      [resultTansuoRes.sourceListArray addObjectsFromArray:other.sourceListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TansuoResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TansuoResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPsize:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 42: {
        SourceArticleBuilder* subBuilder = [SourceArticle builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSourceList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPsize {
  return resultTansuoRes.hasPsize;
}
- (UInt32) psize {
  return resultTansuoRes.psize;
}
- (TansuoResBuilder*) setPsize:(UInt32) value {
  resultTansuoRes.hasPsize = YES;
  resultTansuoRes.psize = value;
  return self;
}
- (TansuoResBuilder*) clearPsize {
  resultTansuoRes.hasPsize = NO;
  resultTansuoRes.psize = 0;
  return self;
}
- (BOOL) hasPage {
  return resultTansuoRes.hasPage;
}
- (UInt32) page {
  return resultTansuoRes.page;
}
- (TansuoResBuilder*) setPage:(UInt32) value {
  resultTansuoRes.hasPage = YES;
  resultTansuoRes.page = value;
  return self;
}
- (TansuoResBuilder*) clearPage {
  resultTansuoRes.hasPage = NO;
  resultTansuoRes.page = 0;
  return self;
}
- (NSMutableArray<SourceArticle*> *)sourceList {
  return resultTansuoRes.sourceListArray;
}
- (SourceArticle*)sourceListAtIndex:(NSUInteger)index {
  return [resultTansuoRes sourceListAtIndex:index];
}
- (TansuoResBuilder *)addSourceList:(SourceArticle*)value {
  if (resultTansuoRes.sourceListArray == nil) {
    resultTansuoRes.sourceListArray = [[NSMutableArray alloc]init];
  }
  [resultTansuoRes.sourceListArray addObject:value];
  return self;
}
- (TansuoResBuilder *)setSourceListArray:(NSArray<SourceArticle*> *)array {
  resultTansuoRes.sourceListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TansuoResBuilder *)clearSourceList {
  resultTansuoRes.sourceListArray = nil;
  return self;
}
@end

@interface SourceArticle ()
@property (strong) Source* source;
@property (strong) NSMutableArray<ArticleSimple*> * articleListArray;
@end

@implementation SourceArticle

- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) _value_ {
  hasSource_ = !!_value_;
}
@synthesize source;
@synthesize articleListArray;
@dynamic articleList;
- (instancetype) init {
  if ((self = [super init])) {
    self.source = [Source defaultInstance];
  }
  return self;
}
static SourceArticle* defaultSourceArticleInstance = nil;
+ (void) initialize {
  if (self == [SourceArticle class]) {
    defaultSourceArticleInstance = [[SourceArticle alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSourceArticleInstance;
}
- (instancetype) defaultInstance {
  return defaultSourceArticleInstance;
}
- (NSArray<ArticleSimple*> *)articleList {
  return articleListArray;
}
- (ArticleSimple*)articleListAtIndex:(NSUInteger)index {
  return [articleListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSource) {
    return NO;
  }
  if (!self.source.isInitialized) {
    return NO;
  }
  __block BOOL isInitarticleList = YES;
   [self.articleList enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitarticleList = NO;
      *stop = YES;
    }
  }];
  if (!isInitarticleList) return isInitarticleList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSource) {
    [output writeMessage:1 value:self.source];
  }
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSource) {
    size_ += computeMessageSize(1, self.source);
  }
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SourceArticle*) parseFromData:(NSData*) data {
  return (SourceArticle*)[[[SourceArticle builder] mergeFromData:data] build];
}
+ (SourceArticle*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceArticle*)[[[SourceArticle builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SourceArticle*) parseFromInputStream:(NSInputStream*) input {
  return (SourceArticle*)[[[SourceArticle builder] mergeFromInputStream:input] build];
}
+ (SourceArticle*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceArticle*)[[[SourceArticle builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SourceArticle*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SourceArticle*)[[[SourceArticle builder] mergeFromCodedInputStream:input] build];
}
+ (SourceArticle*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceArticle*)[[[SourceArticle builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SourceArticleBuilder*) builder {
  return [[SourceArticleBuilder alloc] init];
}
+ (SourceArticleBuilder*) builderWithPrototype:(SourceArticle*) prototype {
  return [[SourceArticle builder] mergeFrom:prototype];
}
- (SourceArticleBuilder*) builder {
  return [SourceArticle builder];
}
- (SourceArticleBuilder*) toBuilder {
  return [SourceArticle builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSource) {
    [output appendFormat:@"%@%@ {\n", indent, @"source"];
    [self.source writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"articleList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSource) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.source storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"source"];
  }
  for (ArticleSimple* element in self.articleListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"articleList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SourceArticle class]]) {
    return NO;
  }
  SourceArticle *otherMessage = other;
  return
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      [self.articleListArray isEqualToArray:otherMessage.articleListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SourceArticleBuilder()
@property (strong) SourceArticle* resultSourceArticle;
@end

@implementation SourceArticleBuilder
@synthesize resultSourceArticle;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSourceArticle = [[SourceArticle alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSourceArticle;
}
- (SourceArticleBuilder*) clear {
  self.resultSourceArticle = [[SourceArticle alloc] init];
  return self;
}
- (SourceArticleBuilder*) clone {
  return [SourceArticle builderWithPrototype:resultSourceArticle];
}
- (SourceArticle*) defaultInstance {
  return [SourceArticle defaultInstance];
}
- (SourceArticle*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SourceArticle*) buildPartial {
  SourceArticle* returnMe = resultSourceArticle;
  self.resultSourceArticle = nil;
  return returnMe;
}
- (SourceArticleBuilder*) mergeFrom:(SourceArticle*) other {
  if (other == [SourceArticle defaultInstance]) {
    return self;
  }
  if (other.hasSource) {
    [self mergeSource:other.source];
  }
  if (other.articleListArray.count > 0) {
    if (resultSourceArticle.articleListArray == nil) {
      resultSourceArticle.articleListArray = [[NSMutableArray alloc] initWithArray:other.articleListArray];
    } else {
      [resultSourceArticle.articleListArray addObjectsFromArray:other.articleListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SourceArticleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SourceArticleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        SourceBuilder* subBuilder = [Source builder];
        if (self.hasSource) {
          [subBuilder mergeFrom:self.source];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSource:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        ArticleSimpleBuilder* subBuilder = [ArticleSimple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addArticleList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSource {
  return resultSourceArticle.hasSource;
}
- (Source*) source {
  return resultSourceArticle.source;
}
- (SourceArticleBuilder*) setSource:(Source*) value {
  resultSourceArticle.hasSource = YES;
  resultSourceArticle.source = value;
  return self;
}
- (SourceArticleBuilder*) setSourceBuilder:(SourceBuilder*) builderForValue {
  return [self setSource:[builderForValue build]];
}
- (SourceArticleBuilder*) mergeSource:(Source*) value {
  if (resultSourceArticle.hasSource &&
      resultSourceArticle.source != [Source defaultInstance]) {
    resultSourceArticle.source =
      [[[Source builderWithPrototype:resultSourceArticle.source] mergeFrom:value] buildPartial];
  } else {
    resultSourceArticle.source = value;
  }
  resultSourceArticle.hasSource = YES;
  return self;
}
- (SourceArticleBuilder*) clearSource {
  resultSourceArticle.hasSource = NO;
  resultSourceArticle.source = [Source defaultInstance];
  return self;
}
- (NSMutableArray<ArticleSimple*> *)articleList {
  return resultSourceArticle.articleListArray;
}
- (ArticleSimple*)articleListAtIndex:(NSUInteger)index {
  return [resultSourceArticle articleListAtIndex:index];
}
- (SourceArticleBuilder *)addArticleList:(ArticleSimple*)value {
  if (resultSourceArticle.articleListArray == nil) {
    resultSourceArticle.articleListArray = [[NSMutableArray alloc]init];
  }
  [resultSourceArticle.articleListArray addObject:value];
  return self;
}
- (SourceArticleBuilder *)setArticleListArray:(NSArray<ArticleSimple*> *)array {
  resultSourceArticle.articleListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SourceArticleBuilder *)clearArticleList {
  resultSourceArticle.articleListArray = nil;
  return self;
}
@end

@interface SourceReq ()
@property UInt32 id;
@property UInt32 page;
@end

@implementation SourceReq

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.page = 0;
  }
  return self;
}
static SourceReq* defaultSourceReqInstance = nil;
+ (void) initialize {
  if (self == [SourceReq class]) {
    defaultSourceReqInstance = [[SourceReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSourceReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSourceReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SourceReq*) parseFromData:(NSData*) data {
  return (SourceReq*)[[[SourceReq builder] mergeFromData:data] build];
}
+ (SourceReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceReq*)[[[SourceReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SourceReq*) parseFromInputStream:(NSInputStream*) input {
  return (SourceReq*)[[[SourceReq builder] mergeFromInputStream:input] build];
}
+ (SourceReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceReq*)[[[SourceReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SourceReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SourceReq*)[[[SourceReq builder] mergeFromCodedInputStream:input] build];
}
+ (SourceReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceReq*)[[[SourceReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SourceReqBuilder*) builder {
  return [[SourceReqBuilder alloc] init];
}
+ (SourceReqBuilder*) builderWithPrototype:(SourceReq*) prototype {
  return [[SourceReq builder] mergeFrom:prototype];
}
- (SourceReqBuilder*) builder {
  return [SourceReq builder];
}
- (SourceReqBuilder*) toBuilder {
  return [SourceReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SourceReq class]]) {
    return NO;
  }
  SourceReq *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SourceReqBuilder()
@property (strong) SourceReq* resultSourceReq;
@end

@implementation SourceReqBuilder
@synthesize resultSourceReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSourceReq = [[SourceReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSourceReq;
}
- (SourceReqBuilder*) clear {
  self.resultSourceReq = [[SourceReq alloc] init];
  return self;
}
- (SourceReqBuilder*) clone {
  return [SourceReq builderWithPrototype:resultSourceReq];
}
- (SourceReq*) defaultInstance {
  return [SourceReq defaultInstance];
}
- (SourceReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SourceReq*) buildPartial {
  SourceReq* returnMe = resultSourceReq;
  self.resultSourceReq = nil;
  return returnMe;
}
- (SourceReqBuilder*) mergeFrom:(SourceReq*) other {
  if (other == [SourceReq defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SourceReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SourceReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultSourceReq.hasId;
}
- (UInt32) id {
  return resultSourceReq.id;
}
- (SourceReqBuilder*) setId:(UInt32) value {
  resultSourceReq.hasId = YES;
  resultSourceReq.id = value;
  return self;
}
- (SourceReqBuilder*) clearId {
  resultSourceReq.hasId = NO;
  resultSourceReq.id = 0;
  return self;
}
- (BOOL) hasPage {
  return resultSourceReq.hasPage;
}
- (UInt32) page {
  return resultSourceReq.page;
}
- (SourceReqBuilder*) setPage:(UInt32) value {
  resultSourceReq.hasPage = YES;
  resultSourceReq.page = value;
  return self;
}
- (SourceReqBuilder*) clearPage {
  resultSourceReq.hasPage = NO;
  resultSourceReq.page = 0;
  return self;
}
@end

@interface SourceRes ()
@property UInt32 psize;
@property UInt32 page;
@property (strong) Source* source;
@property (strong) NSMutableArray<Source*> * sourceLikeArray;
@property (strong) NSMutableArray<ArticleSimple*> * articleListArray;
@end

@implementation SourceRes

- (BOOL) hasPsize {
  return !!hasPsize_;
}
- (void) setHasPsize:(BOOL) _value_ {
  hasPsize_ = !!_value_;
}
@synthesize psize;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) _value_ {
  hasSource_ = !!_value_;
}
@synthesize source;
@synthesize sourceLikeArray;
@dynamic sourceLike;
@synthesize articleListArray;
@dynamic articleList;
- (instancetype) init {
  if ((self = [super init])) {
    self.psize = 0;
    self.page = 0;
    self.source = [Source defaultInstance];
  }
  return self;
}
static SourceRes* defaultSourceResInstance = nil;
+ (void) initialize {
  if (self == [SourceRes class]) {
    defaultSourceResInstance = [[SourceRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSourceResInstance;
}
- (instancetype) defaultInstance {
  return defaultSourceResInstance;
}
- (NSArray<Source*> *)sourceLike {
  return sourceLikeArray;
}
- (Source*)sourceLikeAtIndex:(NSUInteger)index {
  return [sourceLikeArray objectAtIndex:index];
}
- (NSArray<ArticleSimple*> *)articleList {
  return articleListArray;
}
- (ArticleSimple*)articleListAtIndex:(NSUInteger)index {
  return [articleListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPsize) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  if (self.hasSource) {
    if (!self.source.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitsourceLike = YES;
   [self.sourceLike enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsourceLike = NO;
      *stop = YES;
    }
  }];
  if (!isInitsourceLike) return isInitsourceLike;
  __block BOOL isInitarticleList = YES;
   [self.articleList enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitarticleList = NO;
      *stop = YES;
    }
  }];
  if (!isInitarticleList) return isInitarticleList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPsize) {
    [output writeUInt32:1 value:self.psize];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  if (self.hasSource) {
    [output writeMessage:5 value:self.source];
  }
  [self.sourceLikeArray enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPsize) {
    size_ += computeUInt32Size(1, self.psize);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  if (self.hasSource) {
    size_ += computeMessageSize(5, self.source);
  }
  [self.sourceLikeArray enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SourceRes*) parseFromData:(NSData*) data {
  return (SourceRes*)[[[SourceRes builder] mergeFromData:data] build];
}
+ (SourceRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceRes*)[[[SourceRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SourceRes*) parseFromInputStream:(NSInputStream*) input {
  return (SourceRes*)[[[SourceRes builder] mergeFromInputStream:input] build];
}
+ (SourceRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceRes*)[[[SourceRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SourceRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SourceRes*)[[[SourceRes builder] mergeFromCodedInputStream:input] build];
}
+ (SourceRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceRes*)[[[SourceRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SourceResBuilder*) builder {
  return [[SourceResBuilder alloc] init];
}
+ (SourceResBuilder*) builderWithPrototype:(SourceRes*) prototype {
  return [[SourceRes builder] mergeFrom:prototype];
}
- (SourceResBuilder*) builder {
  return [SourceRes builder];
}
- (SourceResBuilder*) toBuilder {
  return [SourceRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPsize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"psize", [NSNumber numberWithInteger:self.psize]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  if (self.hasSource) {
    [output appendFormat:@"%@%@ {\n", indent, @"source"];
    [self.source writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.sourceLikeArray enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sourceLike"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"articleList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPsize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.psize] forKey: @"psize"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  if (self.hasSource) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.source storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"source"];
  }
  for (Source* element in self.sourceLikeArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"sourceLike"];
  }
  for (ArticleSimple* element in self.articleListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"articleList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SourceRes class]]) {
    return NO;
  }
  SourceRes *otherMessage = other;
  return
      self.hasPsize == otherMessage.hasPsize &&
      (!self.hasPsize || self.psize == otherMessage.psize) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      [self.sourceLikeArray isEqualToArray:otherMessage.sourceLikeArray] &&
      [self.articleListArray isEqualToArray:otherMessage.articleListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPsize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.psize] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  [self.sourceLikeArray enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.articleListArray enumerateObjectsUsingBlock:^(ArticleSimple *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SourceResBuilder()
@property (strong) SourceRes* resultSourceRes;
@end

@implementation SourceResBuilder
@synthesize resultSourceRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSourceRes = [[SourceRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSourceRes;
}
- (SourceResBuilder*) clear {
  self.resultSourceRes = [[SourceRes alloc] init];
  return self;
}
- (SourceResBuilder*) clone {
  return [SourceRes builderWithPrototype:resultSourceRes];
}
- (SourceRes*) defaultInstance {
  return [SourceRes defaultInstance];
}
- (SourceRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SourceRes*) buildPartial {
  SourceRes* returnMe = resultSourceRes;
  self.resultSourceRes = nil;
  return returnMe;
}
- (SourceResBuilder*) mergeFrom:(SourceRes*) other {
  if (other == [SourceRes defaultInstance]) {
    return self;
  }
  if (other.hasPsize) {
    [self setPsize:other.psize];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasSource) {
    [self mergeSource:other.source];
  }
  if (other.sourceLikeArray.count > 0) {
    if (resultSourceRes.sourceLikeArray == nil) {
      resultSourceRes.sourceLikeArray = [[NSMutableArray alloc] initWithArray:other.sourceLikeArray];
    } else {
      [resultSourceRes.sourceLikeArray addObjectsFromArray:other.sourceLikeArray];
    }
  }
  if (other.articleListArray.count > 0) {
    if (resultSourceRes.articleListArray == nil) {
      resultSourceRes.articleListArray = [[NSMutableArray alloc] initWithArray:other.articleListArray];
    } else {
      [resultSourceRes.articleListArray addObjectsFromArray:other.articleListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SourceResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SourceResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPsize:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 42: {
        SourceBuilder* subBuilder = [Source builder];
        if (self.hasSource) {
          [subBuilder mergeFrom:self.source];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSource:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        SourceBuilder* subBuilder = [Source builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSourceLike:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        ArticleSimpleBuilder* subBuilder = [ArticleSimple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addArticleList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPsize {
  return resultSourceRes.hasPsize;
}
- (UInt32) psize {
  return resultSourceRes.psize;
}
- (SourceResBuilder*) setPsize:(UInt32) value {
  resultSourceRes.hasPsize = YES;
  resultSourceRes.psize = value;
  return self;
}
- (SourceResBuilder*) clearPsize {
  resultSourceRes.hasPsize = NO;
  resultSourceRes.psize = 0;
  return self;
}
- (BOOL) hasPage {
  return resultSourceRes.hasPage;
}
- (UInt32) page {
  return resultSourceRes.page;
}
- (SourceResBuilder*) setPage:(UInt32) value {
  resultSourceRes.hasPage = YES;
  resultSourceRes.page = value;
  return self;
}
- (SourceResBuilder*) clearPage {
  resultSourceRes.hasPage = NO;
  resultSourceRes.page = 0;
  return self;
}
- (BOOL) hasSource {
  return resultSourceRes.hasSource;
}
- (Source*) source {
  return resultSourceRes.source;
}
- (SourceResBuilder*) setSource:(Source*) value {
  resultSourceRes.hasSource = YES;
  resultSourceRes.source = value;
  return self;
}
- (SourceResBuilder*) setSourceBuilder:(SourceBuilder*) builderForValue {
  return [self setSource:[builderForValue build]];
}
- (SourceResBuilder*) mergeSource:(Source*) value {
  if (resultSourceRes.hasSource &&
      resultSourceRes.source != [Source defaultInstance]) {
    resultSourceRes.source =
      [[[Source builderWithPrototype:resultSourceRes.source] mergeFrom:value] buildPartial];
  } else {
    resultSourceRes.source = value;
  }
  resultSourceRes.hasSource = YES;
  return self;
}
- (SourceResBuilder*) clearSource {
  resultSourceRes.hasSource = NO;
  resultSourceRes.source = [Source defaultInstance];
  return self;
}
- (NSMutableArray<Source*> *)sourceLike {
  return resultSourceRes.sourceLikeArray;
}
- (Source*)sourceLikeAtIndex:(NSUInteger)index {
  return [resultSourceRes sourceLikeAtIndex:index];
}
- (SourceResBuilder *)addSourceLike:(Source*)value {
  if (resultSourceRes.sourceLikeArray == nil) {
    resultSourceRes.sourceLikeArray = [[NSMutableArray alloc]init];
  }
  [resultSourceRes.sourceLikeArray addObject:value];
  return self;
}
- (SourceResBuilder *)setSourceLikeArray:(NSArray<Source*> *)array {
  resultSourceRes.sourceLikeArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SourceResBuilder *)clearSourceLike {
  resultSourceRes.sourceLikeArray = nil;
  return self;
}
- (NSMutableArray<ArticleSimple*> *)articleList {
  return resultSourceRes.articleListArray;
}
- (ArticleSimple*)articleListAtIndex:(NSUInteger)index {
  return [resultSourceRes articleListAtIndex:index];
}
- (SourceResBuilder *)addArticleList:(ArticleSimple*)value {
  if (resultSourceRes.articleListArray == nil) {
    resultSourceRes.articleListArray = [[NSMutableArray alloc]init];
  }
  [resultSourceRes.articleListArray addObject:value];
  return self;
}
- (SourceResBuilder *)setArticleListArray:(NSArray<ArticleSimple*> *)array {
  resultSourceRes.articleListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SourceResBuilder *)clearArticleList {
  resultSourceRes.articleListArray = nil;
  return self;
}
@end

@interface PubCommentReq ()
@property (strong) Comment* comment;
@end

@implementation PubCommentReq

- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) _value_ {
  hasComment_ = !!_value_;
}
@synthesize comment;
- (instancetype) init {
  if ((self = [super init])) {
    self.comment = [Comment defaultInstance];
  }
  return self;
}
static PubCommentReq* defaultPubCommentReqInstance = nil;
+ (void) initialize {
  if (self == [PubCommentReq class]) {
    defaultPubCommentReqInstance = [[PubCommentReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPubCommentReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPubCommentReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasComment) {
    return NO;
  }
  if (!self.comment.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasComment) {
    [output writeMessage:1 value:self.comment];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasComment) {
    size_ += computeMessageSize(1, self.comment);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PubCommentReq*) parseFromData:(NSData*) data {
  return (PubCommentReq*)[[[PubCommentReq builder] mergeFromData:data] build];
}
+ (PubCommentReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PubCommentReq*)[[[PubCommentReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PubCommentReq*) parseFromInputStream:(NSInputStream*) input {
  return (PubCommentReq*)[[[PubCommentReq builder] mergeFromInputStream:input] build];
}
+ (PubCommentReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PubCommentReq*)[[[PubCommentReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PubCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PubCommentReq*)[[[PubCommentReq builder] mergeFromCodedInputStream:input] build];
}
+ (PubCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PubCommentReq*)[[[PubCommentReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PubCommentReqBuilder*) builder {
  return [[PubCommentReqBuilder alloc] init];
}
+ (PubCommentReqBuilder*) builderWithPrototype:(PubCommentReq*) prototype {
  return [[PubCommentReq builder] mergeFrom:prototype];
}
- (PubCommentReqBuilder*) builder {
  return [PubCommentReq builder];
}
- (PubCommentReqBuilder*) toBuilder {
  return [PubCommentReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasComment) {
    [output appendFormat:@"%@%@ {\n", indent, @"comment"];
    [self.comment writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasComment) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.comment storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"comment"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PubCommentReq class]]) {
    return NO;
  }
  PubCommentReq *otherMessage = other;
  return
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PubCommentReqBuilder()
@property (strong) PubCommentReq* resultPubCommentReq;
@end

@implementation PubCommentReqBuilder
@synthesize resultPubCommentReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPubCommentReq = [[PubCommentReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPubCommentReq;
}
- (PubCommentReqBuilder*) clear {
  self.resultPubCommentReq = [[PubCommentReq alloc] init];
  return self;
}
- (PubCommentReqBuilder*) clone {
  return [PubCommentReq builderWithPrototype:resultPubCommentReq];
}
- (PubCommentReq*) defaultInstance {
  return [PubCommentReq defaultInstance];
}
- (PubCommentReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PubCommentReq*) buildPartial {
  PubCommentReq* returnMe = resultPubCommentReq;
  self.resultPubCommentReq = nil;
  return returnMe;
}
- (PubCommentReqBuilder*) mergeFrom:(PubCommentReq*) other {
  if (other == [PubCommentReq defaultInstance]) {
    return self;
  }
  if (other.hasComment) {
    [self mergeComment:other.comment];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PubCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PubCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CommentBuilder* subBuilder = [Comment builder];
        if (self.hasComment) {
          [subBuilder mergeFrom:self.comment];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setComment:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasComment {
  return resultPubCommentReq.hasComment;
}
- (Comment*) comment {
  return resultPubCommentReq.comment;
}
- (PubCommentReqBuilder*) setComment:(Comment*) value {
  resultPubCommentReq.hasComment = YES;
  resultPubCommentReq.comment = value;
  return self;
}
- (PubCommentReqBuilder*) setCommentBuilder:(CommentBuilder*) builderForValue {
  return [self setComment:[builderForValue build]];
}
- (PubCommentReqBuilder*) mergeComment:(Comment*) value {
  if (resultPubCommentReq.hasComment &&
      resultPubCommentReq.comment != [Comment defaultInstance]) {
    resultPubCommentReq.comment =
      [[[Comment builderWithPrototype:resultPubCommentReq.comment] mergeFrom:value] buildPartial];
  } else {
    resultPubCommentReq.comment = value;
  }
  resultPubCommentReq.hasComment = YES;
  return self;
}
- (PubCommentReqBuilder*) clearComment {
  resultPubCommentReq.hasComment = NO;
  resultPubCommentReq.comment = [Comment defaultInstance];
  return self;
}
@end

@interface ArticleCommentsReq ()
@property UInt32 page;
@property UInt32 sort;
@property UInt32 articleId;
@end

@implementation ArticleCommentsReq

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (BOOL) hasSort {
  return !!hasSort_;
}
- (void) setHasSort:(BOOL) _value_ {
  hasSort_ = !!_value_;
}
@synthesize sort;
- (BOOL) hasArticleId {
  return !!hasArticleId_;
}
- (void) setHasArticleId:(BOOL) _value_ {
  hasArticleId_ = !!_value_;
}
@synthesize articleId;
- (instancetype) init {
  if ((self = [super init])) {
    self.page = 0;
    self.sort = 0;
    self.articleId = 0;
  }
  return self;
}
static ArticleCommentsReq* defaultArticleCommentsReqInstance = nil;
+ (void) initialize {
  if (self == [ArticleCommentsReq class]) {
    defaultArticleCommentsReqInstance = [[ArticleCommentsReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultArticleCommentsReqInstance;
}
- (instancetype) defaultInstance {
  return defaultArticleCommentsReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPage) {
    return NO;
  }
  if (!self.hasSort) {
    return NO;
  }
  if (!self.hasArticleId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeUInt32:1 value:self.page];
  }
  if (self.hasSort) {
    [output writeUInt32:3 value:self.sort];
  }
  if (self.hasArticleId) {
    [output writeUInt32:5 value:self.articleId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeUInt32Size(1, self.page);
  }
  if (self.hasSort) {
    size_ += computeUInt32Size(3, self.sort);
  }
  if (self.hasArticleId) {
    size_ += computeUInt32Size(5, self.articleId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ArticleCommentsReq*) parseFromData:(NSData*) data {
  return (ArticleCommentsReq*)[[[ArticleCommentsReq builder] mergeFromData:data] build];
}
+ (ArticleCommentsReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleCommentsReq*)[[[ArticleCommentsReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ArticleCommentsReq*) parseFromInputStream:(NSInputStream*) input {
  return (ArticleCommentsReq*)[[[ArticleCommentsReq builder] mergeFromInputStream:input] build];
}
+ (ArticleCommentsReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleCommentsReq*)[[[ArticleCommentsReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ArticleCommentsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ArticleCommentsReq*)[[[ArticleCommentsReq builder] mergeFromCodedInputStream:input] build];
}
+ (ArticleCommentsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleCommentsReq*)[[[ArticleCommentsReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ArticleCommentsReqBuilder*) builder {
  return [[ArticleCommentsReqBuilder alloc] init];
}
+ (ArticleCommentsReqBuilder*) builderWithPrototype:(ArticleCommentsReq*) prototype {
  return [[ArticleCommentsReq builder] mergeFrom:prototype];
}
- (ArticleCommentsReqBuilder*) builder {
  return [ArticleCommentsReq builder];
}
- (ArticleCommentsReqBuilder*) toBuilder {
  return [ArticleCommentsReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  if (self.hasSort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sort", [NSNumber numberWithInteger:self.sort]];
  }
  if (self.hasArticleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleId", [NSNumber numberWithInteger:self.articleId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  if (self.hasSort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sort] forKey: @"sort"];
  }
  if (self.hasArticleId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.articleId] forKey: @"articleId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ArticleCommentsReq class]]) {
    return NO;
  }
  ArticleCommentsReq *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasSort == otherMessage.hasSort &&
      (!self.hasSort || self.sort == otherMessage.sort) &&
      self.hasArticleId == otherMessage.hasArticleId &&
      (!self.hasArticleId || self.articleId == otherMessage.articleId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  if (self.hasSort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sort] hash];
  }
  if (self.hasArticleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.articleId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ArticleCommentsReqBuilder()
@property (strong) ArticleCommentsReq* resultArticleCommentsReq;
@end

@implementation ArticleCommentsReqBuilder
@synthesize resultArticleCommentsReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultArticleCommentsReq = [[ArticleCommentsReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultArticleCommentsReq;
}
- (ArticleCommentsReqBuilder*) clear {
  self.resultArticleCommentsReq = [[ArticleCommentsReq alloc] init];
  return self;
}
- (ArticleCommentsReqBuilder*) clone {
  return [ArticleCommentsReq builderWithPrototype:resultArticleCommentsReq];
}
- (ArticleCommentsReq*) defaultInstance {
  return [ArticleCommentsReq defaultInstance];
}
- (ArticleCommentsReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ArticleCommentsReq*) buildPartial {
  ArticleCommentsReq* returnMe = resultArticleCommentsReq;
  self.resultArticleCommentsReq = nil;
  return returnMe;
}
- (ArticleCommentsReqBuilder*) mergeFrom:(ArticleCommentsReq*) other {
  if (other == [ArticleCommentsReq defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasSort) {
    [self setSort:other.sort];
  }
  if (other.hasArticleId) {
    [self setArticleId:other.articleId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ArticleCommentsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ArticleCommentsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 24: {
        [self setSort:[input readUInt32]];
        break;
      }
      case 40: {
        [self setArticleId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return resultArticleCommentsReq.hasPage;
}
- (UInt32) page {
  return resultArticleCommentsReq.page;
}
- (ArticleCommentsReqBuilder*) setPage:(UInt32) value {
  resultArticleCommentsReq.hasPage = YES;
  resultArticleCommentsReq.page = value;
  return self;
}
- (ArticleCommentsReqBuilder*) clearPage {
  resultArticleCommentsReq.hasPage = NO;
  resultArticleCommentsReq.page = 0;
  return self;
}
- (BOOL) hasSort {
  return resultArticleCommentsReq.hasSort;
}
- (UInt32) sort {
  return resultArticleCommentsReq.sort;
}
- (ArticleCommentsReqBuilder*) setSort:(UInt32) value {
  resultArticleCommentsReq.hasSort = YES;
  resultArticleCommentsReq.sort = value;
  return self;
}
- (ArticleCommentsReqBuilder*) clearSort {
  resultArticleCommentsReq.hasSort = NO;
  resultArticleCommentsReq.sort = 0;
  return self;
}
- (BOOL) hasArticleId {
  return resultArticleCommentsReq.hasArticleId;
}
- (UInt32) articleId {
  return resultArticleCommentsReq.articleId;
}
- (ArticleCommentsReqBuilder*) setArticleId:(UInt32) value {
  resultArticleCommentsReq.hasArticleId = YES;
  resultArticleCommentsReq.articleId = value;
  return self;
}
- (ArticleCommentsReqBuilder*) clearArticleId {
  resultArticleCommentsReq.hasArticleId = NO;
  resultArticleCommentsReq.articleId = 0;
  return self;
}
@end

@interface ArticleCommentsRes ()
@property UInt32 psize;
@property UInt32 page;
@property (strong) NSMutableArray<Comment*> * commentListArray;
@end

@implementation ArticleCommentsRes

- (BOOL) hasPsize {
  return !!hasPsize_;
}
- (void) setHasPsize:(BOOL) _value_ {
  hasPsize_ = !!_value_;
}
@synthesize psize;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
@synthesize commentListArray;
@dynamic commentList;
- (instancetype) init {
  if ((self = [super init])) {
    self.psize = 0;
    self.page = 0;
  }
  return self;
}
static ArticleCommentsRes* defaultArticleCommentsResInstance = nil;
+ (void) initialize {
  if (self == [ArticleCommentsRes class]) {
    defaultArticleCommentsResInstance = [[ArticleCommentsRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultArticleCommentsResInstance;
}
- (instancetype) defaultInstance {
  return defaultArticleCommentsResInstance;
}
- (NSArray<Comment*> *)commentList {
  return commentListArray;
}
- (Comment*)commentListAtIndex:(NSUInteger)index {
  return [commentListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPsize) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInitcommentList = YES;
   [self.commentList enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcommentList = NO;
      *stop = YES;
    }
  }];
  if (!isInitcommentList) return isInitcommentList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPsize) {
    [output writeUInt32:1 value:self.psize];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.commentListArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPsize) {
    size_ += computeUInt32Size(1, self.psize);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  [self.commentListArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ArticleCommentsRes*) parseFromData:(NSData*) data {
  return (ArticleCommentsRes*)[[[ArticleCommentsRes builder] mergeFromData:data] build];
}
+ (ArticleCommentsRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleCommentsRes*)[[[ArticleCommentsRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ArticleCommentsRes*) parseFromInputStream:(NSInputStream*) input {
  return (ArticleCommentsRes*)[[[ArticleCommentsRes builder] mergeFromInputStream:input] build];
}
+ (ArticleCommentsRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleCommentsRes*)[[[ArticleCommentsRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ArticleCommentsRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ArticleCommentsRes*)[[[ArticleCommentsRes builder] mergeFromCodedInputStream:input] build];
}
+ (ArticleCommentsRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ArticleCommentsRes*)[[[ArticleCommentsRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ArticleCommentsResBuilder*) builder {
  return [[ArticleCommentsResBuilder alloc] init];
}
+ (ArticleCommentsResBuilder*) builderWithPrototype:(ArticleCommentsRes*) prototype {
  return [[ArticleCommentsRes builder] mergeFrom:prototype];
}
- (ArticleCommentsResBuilder*) builder {
  return [ArticleCommentsRes builder];
}
- (ArticleCommentsResBuilder*) toBuilder {
  return [ArticleCommentsRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPsize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"psize", [NSNumber numberWithInteger:self.psize]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.commentListArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"commentList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPsize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.psize] forKey: @"psize"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  for (Comment* element in self.commentListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"commentList"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ArticleCommentsRes class]]) {
    return NO;
  }
  ArticleCommentsRes *otherMessage = other;
  return
      self.hasPsize == otherMessage.hasPsize &&
      (!self.hasPsize || self.psize == otherMessage.psize) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.commentListArray isEqualToArray:otherMessage.commentListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPsize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.psize] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  [self.commentListArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ArticleCommentsResBuilder()
@property (strong) ArticleCommentsRes* resultArticleCommentsRes;
@end

@implementation ArticleCommentsResBuilder
@synthesize resultArticleCommentsRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultArticleCommentsRes = [[ArticleCommentsRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultArticleCommentsRes;
}
- (ArticleCommentsResBuilder*) clear {
  self.resultArticleCommentsRes = [[ArticleCommentsRes alloc] init];
  return self;
}
- (ArticleCommentsResBuilder*) clone {
  return [ArticleCommentsRes builderWithPrototype:resultArticleCommentsRes];
}
- (ArticleCommentsRes*) defaultInstance {
  return [ArticleCommentsRes defaultInstance];
}
- (ArticleCommentsRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ArticleCommentsRes*) buildPartial {
  ArticleCommentsRes* returnMe = resultArticleCommentsRes;
  self.resultArticleCommentsRes = nil;
  return returnMe;
}
- (ArticleCommentsResBuilder*) mergeFrom:(ArticleCommentsRes*) other {
  if (other == [ArticleCommentsRes defaultInstance]) {
    return self;
  }
  if (other.hasPsize) {
    [self setPsize:other.psize];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.commentListArray.count > 0) {
    if (resultArticleCommentsRes.commentListArray == nil) {
      resultArticleCommentsRes.commentListArray = [[NSMutableArray alloc] initWithArray:other.commentListArray];
    } else {
      [resultArticleCommentsRes.commentListArray addObjectsFromArray:other.commentListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ArticleCommentsResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ArticleCommentsResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPsize:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 42: {
        CommentBuilder* subBuilder = [Comment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCommentList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPsize {
  return resultArticleCommentsRes.hasPsize;
}
- (UInt32) psize {
  return resultArticleCommentsRes.psize;
}
- (ArticleCommentsResBuilder*) setPsize:(UInt32) value {
  resultArticleCommentsRes.hasPsize = YES;
  resultArticleCommentsRes.psize = value;
  return self;
}
- (ArticleCommentsResBuilder*) clearPsize {
  resultArticleCommentsRes.hasPsize = NO;
  resultArticleCommentsRes.psize = 0;
  return self;
}
- (BOOL) hasPage {
  return resultArticleCommentsRes.hasPage;
}
- (UInt32) page {
  return resultArticleCommentsRes.page;
}
- (ArticleCommentsResBuilder*) setPage:(UInt32) value {
  resultArticleCommentsRes.hasPage = YES;
  resultArticleCommentsRes.page = value;
  return self;
}
- (ArticleCommentsResBuilder*) clearPage {
  resultArticleCommentsRes.hasPage = NO;
  resultArticleCommentsRes.page = 0;
  return self;
}
- (NSMutableArray<Comment*> *)commentList {
  return resultArticleCommentsRes.commentListArray;
}
- (Comment*)commentListAtIndex:(NSUInteger)index {
  return [resultArticleCommentsRes commentListAtIndex:index];
}
- (ArticleCommentsResBuilder *)addCommentList:(Comment*)value {
  if (resultArticleCommentsRes.commentListArray == nil) {
    resultArticleCommentsRes.commentListArray = [[NSMutableArray alloc]init];
  }
  [resultArticleCommentsRes.commentListArray addObject:value];
  return self;
}
- (ArticleCommentsResBuilder *)setCommentListArray:(NSArray<Comment*> *)array {
  resultArticleCommentsRes.commentListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ArticleCommentsResBuilder *)clearCommentList {
  resultArticleCommentsRes.commentListArray = nil;
  return self;
}
@end

@interface CommentDoReq ()
@property UInt32 commentId;
@property CommentDoType type;
@end

@implementation CommentDoReq

- (BOOL) hasCommentId {
  return !!hasCommentId_;
}
- (void) setHasCommentId:(BOOL) _value_ {
  hasCommentId_ = !!_value_;
}
@synthesize commentId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.commentId = 0;
    self.type = CommentDoTypeCommentUp;
  }
  return self;
}
static CommentDoReq* defaultCommentDoReqInstance = nil;
+ (void) initialize {
  if (self == [CommentDoReq class]) {
    defaultCommentDoReqInstance = [[CommentDoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCommentDoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultCommentDoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCommentId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCommentId) {
    [output writeUInt32:1 value:self.commentId];
  }
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCommentId) {
    size_ += computeUInt32Size(1, self.commentId);
  }
  if (self.hasType) {
    size_ += computeEnumSize(3, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CommentDoReq*) parseFromData:(NSData*) data {
  return (CommentDoReq*)[[[CommentDoReq builder] mergeFromData:data] build];
}
+ (CommentDoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommentDoReq*)[[[CommentDoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CommentDoReq*) parseFromInputStream:(NSInputStream*) input {
  return (CommentDoReq*)[[[CommentDoReq builder] mergeFromInputStream:input] build];
}
+ (CommentDoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommentDoReq*)[[[CommentDoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommentDoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CommentDoReq*)[[[CommentDoReq builder] mergeFromCodedInputStream:input] build];
}
+ (CommentDoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CommentDoReq*)[[[CommentDoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CommentDoReqBuilder*) builder {
  return [[CommentDoReqBuilder alloc] init];
}
+ (CommentDoReqBuilder*) builderWithPrototype:(CommentDoReq*) prototype {
  return [[CommentDoReq builder] mergeFrom:prototype];
}
- (CommentDoReqBuilder*) builder {
  return [CommentDoReq builder];
}
- (CommentDoReqBuilder*) toBuilder {
  return [CommentDoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCommentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commentId", [NSNumber numberWithInteger:self.commentId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromCommentDoType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCommentId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.commentId] forKey: @"commentId"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CommentDoReq class]]) {
    return NO;
  }
  CommentDoReq *otherMessage = other;
  return
      self.hasCommentId == otherMessage.hasCommentId &&
      (!self.hasCommentId || self.commentId == otherMessage.commentId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCommentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.commentId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CommentDoReqBuilder()
@property (strong) CommentDoReq* resultCommentDoReq;
@end

@implementation CommentDoReqBuilder
@synthesize resultCommentDoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCommentDoReq = [[CommentDoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCommentDoReq;
}
- (CommentDoReqBuilder*) clear {
  self.resultCommentDoReq = [[CommentDoReq alloc] init];
  return self;
}
- (CommentDoReqBuilder*) clone {
  return [CommentDoReq builderWithPrototype:resultCommentDoReq];
}
- (CommentDoReq*) defaultInstance {
  return [CommentDoReq defaultInstance];
}
- (CommentDoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CommentDoReq*) buildPartial {
  CommentDoReq* returnMe = resultCommentDoReq;
  self.resultCommentDoReq = nil;
  return returnMe;
}
- (CommentDoReqBuilder*) mergeFrom:(CommentDoReq*) other {
  if (other == [CommentDoReq defaultInstance]) {
    return self;
  }
  if (other.hasCommentId) {
    [self setCommentId:other.commentId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CommentDoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CommentDoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCommentId:[input readUInt32]];
        break;
      }
      case 24: {
        CommentDoType value = (CommentDoType)[input readEnum];
        if (CommentDoTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasCommentId {
  return resultCommentDoReq.hasCommentId;
}
- (UInt32) commentId {
  return resultCommentDoReq.commentId;
}
- (CommentDoReqBuilder*) setCommentId:(UInt32) value {
  resultCommentDoReq.hasCommentId = YES;
  resultCommentDoReq.commentId = value;
  return self;
}
- (CommentDoReqBuilder*) clearCommentId {
  resultCommentDoReq.hasCommentId = NO;
  resultCommentDoReq.commentId = 0;
  return self;
}
- (BOOL) hasType {
  return resultCommentDoReq.hasType;
}
- (CommentDoType) type {
  return resultCommentDoReq.type;
}
- (CommentDoReqBuilder*) setType:(CommentDoType) value {
  resultCommentDoReq.hasType = YES;
  resultCommentDoReq.type = value;
  return self;
}
- (CommentDoReqBuilder*) clearType {
  resultCommentDoReq.hasType = NO;
  resultCommentDoReq.type = CommentDoTypeCommentUp;
  return self;
}
@end

@interface SourceDoReq ()
@property UInt32 sourceId;
@property SourceDoType type;
@end

@implementation SourceDoReq

- (BOOL) hasSourceId {
  return !!hasSourceId_;
}
- (void) setHasSourceId:(BOOL) _value_ {
  hasSourceId_ = !!_value_;
}
@synthesize sourceId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.sourceId = 0;
    self.type = SourceDoTypeSourceFollow;
  }
  return self;
}
static SourceDoReq* defaultSourceDoReqInstance = nil;
+ (void) initialize {
  if (self == [SourceDoReq class]) {
    defaultSourceDoReqInstance = [[SourceDoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSourceDoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSourceDoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSourceId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSourceId) {
    [output writeUInt32:1 value:self.sourceId];
  }
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSourceId) {
    size_ += computeUInt32Size(1, self.sourceId);
  }
  if (self.hasType) {
    size_ += computeEnumSize(3, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SourceDoReq*) parseFromData:(NSData*) data {
  return (SourceDoReq*)[[[SourceDoReq builder] mergeFromData:data] build];
}
+ (SourceDoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceDoReq*)[[[SourceDoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SourceDoReq*) parseFromInputStream:(NSInputStream*) input {
  return (SourceDoReq*)[[[SourceDoReq builder] mergeFromInputStream:input] build];
}
+ (SourceDoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceDoReq*)[[[SourceDoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SourceDoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SourceDoReq*)[[[SourceDoReq builder] mergeFromCodedInputStream:input] build];
}
+ (SourceDoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SourceDoReq*)[[[SourceDoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SourceDoReqBuilder*) builder {
  return [[SourceDoReqBuilder alloc] init];
}
+ (SourceDoReqBuilder*) builderWithPrototype:(SourceDoReq*) prototype {
  return [[SourceDoReq builder] mergeFrom:prototype];
}
- (SourceDoReqBuilder*) builder {
  return [SourceDoReq builder];
}
- (SourceDoReqBuilder*) toBuilder {
  return [SourceDoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSourceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceId", [NSNumber numberWithInteger:self.sourceId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromSourceDoType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSourceId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sourceId] forKey: @"sourceId"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SourceDoReq class]]) {
    return NO;
  }
  SourceDoReq *otherMessage = other;
  return
      self.hasSourceId == otherMessage.hasSourceId &&
      (!self.hasSourceId || self.sourceId == otherMessage.sourceId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSourceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sourceId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SourceDoReqBuilder()
@property (strong) SourceDoReq* resultSourceDoReq;
@end

@implementation SourceDoReqBuilder
@synthesize resultSourceDoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSourceDoReq = [[SourceDoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSourceDoReq;
}
- (SourceDoReqBuilder*) clear {
  self.resultSourceDoReq = [[SourceDoReq alloc] init];
  return self;
}
- (SourceDoReqBuilder*) clone {
  return [SourceDoReq builderWithPrototype:resultSourceDoReq];
}
- (SourceDoReq*) defaultInstance {
  return [SourceDoReq defaultInstance];
}
- (SourceDoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SourceDoReq*) buildPartial {
  SourceDoReq* returnMe = resultSourceDoReq;
  self.resultSourceDoReq = nil;
  return returnMe;
}
- (SourceDoReqBuilder*) mergeFrom:(SourceDoReq*) other {
  if (other == [SourceDoReq defaultInstance]) {
    return self;
  }
  if (other.hasSourceId) {
    [self setSourceId:other.sourceId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SourceDoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SourceDoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSourceId:[input readUInt32]];
        break;
      }
      case 24: {
        SourceDoType value = (SourceDoType)[input readEnum];
        if (SourceDoTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSourceId {
  return resultSourceDoReq.hasSourceId;
}
- (UInt32) sourceId {
  return resultSourceDoReq.sourceId;
}
- (SourceDoReqBuilder*) setSourceId:(UInt32) value {
  resultSourceDoReq.hasSourceId = YES;
  resultSourceDoReq.sourceId = value;
  return self;
}
- (SourceDoReqBuilder*) clearSourceId {
  resultSourceDoReq.hasSourceId = NO;
  resultSourceDoReq.sourceId = 0;
  return self;
}
- (BOOL) hasType {
  return resultSourceDoReq.hasType;
}
- (SourceDoType) type {
  return resultSourceDoReq.type;
}
- (SourceDoReqBuilder*) setType:(SourceDoType) value {
  resultSourceDoReq.hasType = YES;
  resultSourceDoReq.type = value;
  return self;
}
- (SourceDoReqBuilder*) clearType {
  resultSourceDoReq.hasType = NO;
  resultSourceDoReq.type = SourceDoTypeSourceFollow;
  return self;
}
@end

@interface BookmarkDoReq ()
@property UInt32 articleId;
@property BookmarkDoType type;
@end

@implementation BookmarkDoReq

- (BOOL) hasArticleId {
  return !!hasArticleId_;
}
- (void) setHasArticleId:(BOOL) _value_ {
  hasArticleId_ = !!_value_;
}
@synthesize articleId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.articleId = 0;
    self.type = BookmarkDoTypeArticleBookmark;
  }
  return self;
}
static BookmarkDoReq* defaultBookmarkDoReqInstance = nil;
+ (void) initialize {
  if (self == [BookmarkDoReq class]) {
    defaultBookmarkDoReqInstance = [[BookmarkDoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBookmarkDoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultBookmarkDoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasArticleId) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasArticleId) {
    [output writeUInt32:1 value:self.articleId];
  }
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasArticleId) {
    size_ += computeUInt32Size(1, self.articleId);
  }
  if (self.hasType) {
    size_ += computeEnumSize(3, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BookmarkDoReq*) parseFromData:(NSData*) data {
  return (BookmarkDoReq*)[[[BookmarkDoReq builder] mergeFromData:data] build];
}
+ (BookmarkDoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BookmarkDoReq*)[[[BookmarkDoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BookmarkDoReq*) parseFromInputStream:(NSInputStream*) input {
  return (BookmarkDoReq*)[[[BookmarkDoReq builder] mergeFromInputStream:input] build];
}
+ (BookmarkDoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BookmarkDoReq*)[[[BookmarkDoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BookmarkDoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BookmarkDoReq*)[[[BookmarkDoReq builder] mergeFromCodedInputStream:input] build];
}
+ (BookmarkDoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BookmarkDoReq*)[[[BookmarkDoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BookmarkDoReqBuilder*) builder {
  return [[BookmarkDoReqBuilder alloc] init];
}
+ (BookmarkDoReqBuilder*) builderWithPrototype:(BookmarkDoReq*) prototype {
  return [[BookmarkDoReq builder] mergeFrom:prototype];
}
- (BookmarkDoReqBuilder*) builder {
  return [BookmarkDoReq builder];
}
- (BookmarkDoReqBuilder*) toBuilder {
  return [BookmarkDoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasArticleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleId", [NSNumber numberWithInteger:self.articleId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromBookmarkDoType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasArticleId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.articleId] forKey: @"articleId"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BookmarkDoReq class]]) {
    return NO;
  }
  BookmarkDoReq *otherMessage = other;
  return
      self.hasArticleId == otherMessage.hasArticleId &&
      (!self.hasArticleId || self.articleId == otherMessage.articleId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasArticleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.articleId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BookmarkDoReqBuilder()
@property (strong) BookmarkDoReq* resultBookmarkDoReq;
@end

@implementation BookmarkDoReqBuilder
@synthesize resultBookmarkDoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBookmarkDoReq = [[BookmarkDoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBookmarkDoReq;
}
- (BookmarkDoReqBuilder*) clear {
  self.resultBookmarkDoReq = [[BookmarkDoReq alloc] init];
  return self;
}
- (BookmarkDoReqBuilder*) clone {
  return [BookmarkDoReq builderWithPrototype:resultBookmarkDoReq];
}
- (BookmarkDoReq*) defaultInstance {
  return [BookmarkDoReq defaultInstance];
}
- (BookmarkDoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BookmarkDoReq*) buildPartial {
  BookmarkDoReq* returnMe = resultBookmarkDoReq;
  self.resultBookmarkDoReq = nil;
  return returnMe;
}
- (BookmarkDoReqBuilder*) mergeFrom:(BookmarkDoReq*) other {
  if (other == [BookmarkDoReq defaultInstance]) {
    return self;
  }
  if (other.hasArticleId) {
    [self setArticleId:other.articleId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BookmarkDoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BookmarkDoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setArticleId:[input readUInt32]];
        break;
      }
      case 24: {
        BookmarkDoType value = (BookmarkDoType)[input readEnum];
        if (BookmarkDoTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasArticleId {
  return resultBookmarkDoReq.hasArticleId;
}
- (UInt32) articleId {
  return resultBookmarkDoReq.articleId;
}
- (BookmarkDoReqBuilder*) setArticleId:(UInt32) value {
  resultBookmarkDoReq.hasArticleId = YES;
  resultBookmarkDoReq.articleId = value;
  return self;
}
- (BookmarkDoReqBuilder*) clearArticleId {
  resultBookmarkDoReq.hasArticleId = NO;
  resultBookmarkDoReq.articleId = 0;
  return self;
}
- (BOOL) hasType {
  return resultBookmarkDoReq.hasType;
}
- (BookmarkDoType) type {
  return resultBookmarkDoReq.type;
}
- (BookmarkDoReqBuilder*) setType:(BookmarkDoType) value {
  resultBookmarkDoReq.hasType = YES;
  resultBookmarkDoReq.type = value;
  return self;
}
- (BookmarkDoReqBuilder*) clearType {
  resultBookmarkDoReq.hasType = NO;
  resultBookmarkDoReq.type = BookmarkDoTypeArticleBookmark;
  return self;
}
@end

@interface Bookmark ()
@property UInt32 id;
@property UInt32 articleId;
@property (strong) NSString* articleTitle;
@property (strong) NSString* bT;
@end

@implementation Bookmark

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasArticleId {
  return !!hasArticleId_;
}
- (void) setHasArticleId:(BOOL) _value_ {
  hasArticleId_ = !!_value_;
}
@synthesize articleId;
- (BOOL) hasArticleTitle {
  return !!hasArticleTitle_;
}
- (void) setHasArticleTitle:(BOOL) _value_ {
  hasArticleTitle_ = !!_value_;
}
@synthesize articleTitle;
- (BOOL) hasBT {
  return !!hasBT_;
}
- (void) setHasBT:(BOOL) _value_ {
  hasBT_ = !!_value_;
}
@synthesize bT;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.articleId = 0;
    self.articleTitle = @"";
    self.bT = @"";
  }
  return self;
}
static Bookmark* defaultBookmarkInstance = nil;
+ (void) initialize {
  if (self == [Bookmark class]) {
    defaultBookmarkInstance = [[Bookmark alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBookmarkInstance;
}
- (instancetype) defaultInstance {
  return defaultBookmarkInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasArticleId) {
    return NO;
  }
  if (!self.hasArticleTitle) {
    return NO;
  }
  if (!self.hasBT) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasArticleId) {
    [output writeUInt32:3 value:self.articleId];
  }
  if (self.hasArticleTitle) {
    [output writeString:4 value:self.articleTitle];
  }
  if (self.hasBT) {
    [output writeString:5 value:self.bT];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasArticleId) {
    size_ += computeUInt32Size(3, self.articleId);
  }
  if (self.hasArticleTitle) {
    size_ += computeStringSize(4, self.articleTitle);
  }
  if (self.hasBT) {
    size_ += computeStringSize(5, self.bT);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Bookmark*) parseFromData:(NSData*) data {
  return (Bookmark*)[[[Bookmark builder] mergeFromData:data] build];
}
+ (Bookmark*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Bookmark*)[[[Bookmark builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Bookmark*) parseFromInputStream:(NSInputStream*) input {
  return (Bookmark*)[[[Bookmark builder] mergeFromInputStream:input] build];
}
+ (Bookmark*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Bookmark*)[[[Bookmark builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Bookmark*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Bookmark*)[[[Bookmark builder] mergeFromCodedInputStream:input] build];
}
+ (Bookmark*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Bookmark*)[[[Bookmark builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BookmarkBuilder*) builder {
  return [[BookmarkBuilder alloc] init];
}
+ (BookmarkBuilder*) builderWithPrototype:(Bookmark*) prototype {
  return [[Bookmark builder] mergeFrom:prototype];
}
- (BookmarkBuilder*) builder {
  return [Bookmark builder];
}
- (BookmarkBuilder*) toBuilder {
  return [Bookmark builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasArticleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleId", [NSNumber numberWithInteger:self.articleId]];
  }
  if (self.hasArticleTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleTitle", self.articleTitle];
  }
  if (self.hasBT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bT", self.bT];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasArticleId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.articleId] forKey: @"articleId"];
  }
  if (self.hasArticleTitle) {
    [dictionary setObject: self.articleTitle forKey: @"articleTitle"];
  }
  if (self.hasBT) {
    [dictionary setObject: self.bT forKey: @"bT"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Bookmark class]]) {
    return NO;
  }
  Bookmark *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasArticleId == otherMessage.hasArticleId &&
      (!self.hasArticleId || self.articleId == otherMessage.articleId) &&
      self.hasArticleTitle == otherMessage.hasArticleTitle &&
      (!self.hasArticleTitle || [self.articleTitle isEqual:otherMessage.articleTitle]) &&
      self.hasBT == otherMessage.hasBT &&
      (!self.hasBT || [self.bT isEqual:otherMessage.bT]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasArticleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.articleId] hash];
  }
  if (self.hasArticleTitle) {
    hashCode = hashCode * 31 + [self.articleTitle hash];
  }
  if (self.hasBT) {
    hashCode = hashCode * 31 + [self.bT hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BookmarkBuilder()
@property (strong) Bookmark* resultBookmark;
@end

@implementation BookmarkBuilder
@synthesize resultBookmark;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBookmark = [[Bookmark alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBookmark;
}
- (BookmarkBuilder*) clear {
  self.resultBookmark = [[Bookmark alloc] init];
  return self;
}
- (BookmarkBuilder*) clone {
  return [Bookmark builderWithPrototype:resultBookmark];
}
- (Bookmark*) defaultInstance {
  return [Bookmark defaultInstance];
}
- (Bookmark*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Bookmark*) buildPartial {
  Bookmark* returnMe = resultBookmark;
  self.resultBookmark = nil;
  return returnMe;
}
- (BookmarkBuilder*) mergeFrom:(Bookmark*) other {
  if (other == [Bookmark defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasArticleId) {
    [self setArticleId:other.articleId];
  }
  if (other.hasArticleTitle) {
    [self setArticleTitle:other.articleTitle];
  }
  if (other.hasBT) {
    [self setBT:other.bT];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BookmarkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BookmarkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setArticleId:[input readUInt32]];
        break;
      }
      case 34: {
        [self setArticleTitle:[input readString]];
        break;
      }
      case 42: {
        [self setBT:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultBookmark.hasId;
}
- (UInt32) id {
  return resultBookmark.id;
}
- (BookmarkBuilder*) setId:(UInt32) value {
  resultBookmark.hasId = YES;
  resultBookmark.id = value;
  return self;
}
- (BookmarkBuilder*) clearId {
  resultBookmark.hasId = NO;
  resultBookmark.id = 0;
  return self;
}
- (BOOL) hasArticleId {
  return resultBookmark.hasArticleId;
}
- (UInt32) articleId {
  return resultBookmark.articleId;
}
- (BookmarkBuilder*) setArticleId:(UInt32) value {
  resultBookmark.hasArticleId = YES;
  resultBookmark.articleId = value;
  return self;
}
- (BookmarkBuilder*) clearArticleId {
  resultBookmark.hasArticleId = NO;
  resultBookmark.articleId = 0;
  return self;
}
- (BOOL) hasArticleTitle {
  return resultBookmark.hasArticleTitle;
}
- (NSString*) articleTitle {
  return resultBookmark.articleTitle;
}
- (BookmarkBuilder*) setArticleTitle:(NSString*) value {
  resultBookmark.hasArticleTitle = YES;
  resultBookmark.articleTitle = value;
  return self;
}
- (BookmarkBuilder*) clearArticleTitle {
  resultBookmark.hasArticleTitle = NO;
  resultBookmark.articleTitle = @"";
  return self;
}
- (BOOL) hasBT {
  return resultBookmark.hasBT;
}
- (NSString*) bT {
  return resultBookmark.bT;
}
- (BookmarkBuilder*) setBT:(NSString*) value {
  resultBookmark.hasBT = YES;
  resultBookmark.bT = value;
  return self;
}
- (BookmarkBuilder*) clearBT {
  resultBookmark.hasBT = NO;
  resultBookmark.bT = @"";
  return self;
}
@end

@interface UserBookmarkReq ()
@property UInt32 page;
@end

@implementation UserBookmarkReq

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (instancetype) init {
  if ((self = [super init])) {
    self.page = 0;
  }
  return self;
}
static UserBookmarkReq* defaultUserBookmarkReqInstance = nil;
+ (void) initialize {
  if (self == [UserBookmarkReq class]) {
    defaultUserBookmarkReqInstance = [[UserBookmarkReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserBookmarkReqInstance;
}
- (instancetype) defaultInstance {
  return defaultUserBookmarkReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeUInt32:1 value:self.page];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeUInt32Size(1, self.page);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserBookmarkReq*) parseFromData:(NSData*) data {
  return (UserBookmarkReq*)[[[UserBookmarkReq builder] mergeFromData:data] build];
}
+ (UserBookmarkReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserBookmarkReq*)[[[UserBookmarkReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserBookmarkReq*) parseFromInputStream:(NSInputStream*) input {
  return (UserBookmarkReq*)[[[UserBookmarkReq builder] mergeFromInputStream:input] build];
}
+ (UserBookmarkReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserBookmarkReq*)[[[UserBookmarkReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserBookmarkReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserBookmarkReq*)[[[UserBookmarkReq builder] mergeFromCodedInputStream:input] build];
}
+ (UserBookmarkReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserBookmarkReq*)[[[UserBookmarkReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserBookmarkReqBuilder*) builder {
  return [[UserBookmarkReqBuilder alloc] init];
}
+ (UserBookmarkReqBuilder*) builderWithPrototype:(UserBookmarkReq*) prototype {
  return [[UserBookmarkReq builder] mergeFrom:prototype];
}
- (UserBookmarkReqBuilder*) builder {
  return [UserBookmarkReq builder];
}
- (UserBookmarkReqBuilder*) toBuilder {
  return [UserBookmarkReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserBookmarkReq class]]) {
    return NO;
  }
  UserBookmarkReq *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserBookmarkReqBuilder()
@property (strong) UserBookmarkReq* resultUserBookmarkReq;
@end

@implementation UserBookmarkReqBuilder
@synthesize resultUserBookmarkReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserBookmarkReq = [[UserBookmarkReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserBookmarkReq;
}
- (UserBookmarkReqBuilder*) clear {
  self.resultUserBookmarkReq = [[UserBookmarkReq alloc] init];
  return self;
}
- (UserBookmarkReqBuilder*) clone {
  return [UserBookmarkReq builderWithPrototype:resultUserBookmarkReq];
}
- (UserBookmarkReq*) defaultInstance {
  return [UserBookmarkReq defaultInstance];
}
- (UserBookmarkReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserBookmarkReq*) buildPartial {
  UserBookmarkReq* returnMe = resultUserBookmarkReq;
  self.resultUserBookmarkReq = nil;
  return returnMe;
}
- (UserBookmarkReqBuilder*) mergeFrom:(UserBookmarkReq*) other {
  if (other == [UserBookmarkReq defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserBookmarkReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserBookmarkReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return resultUserBookmarkReq.hasPage;
}
- (UInt32) page {
  return resultUserBookmarkReq.page;
}
- (UserBookmarkReqBuilder*) setPage:(UInt32) value {
  resultUserBookmarkReq.hasPage = YES;
  resultUserBookmarkReq.page = value;
  return self;
}
- (UserBookmarkReqBuilder*) clearPage {
  resultUserBookmarkReq.hasPage = NO;
  resultUserBookmarkReq.page = 0;
  return self;
}
@end

@interface UserBookmarkRes ()
@property UInt32 psize;
@property UInt32 page;
@property (strong) NSMutableArray<Bookmark*> * bookmarksArray;
@end

@implementation UserBookmarkRes

- (BOOL) hasPsize {
  return !!hasPsize_;
}
- (void) setHasPsize:(BOOL) _value_ {
  hasPsize_ = !!_value_;
}
@synthesize psize;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
@synthesize bookmarksArray;
@dynamic bookmarks;
- (instancetype) init {
  if ((self = [super init])) {
    self.psize = 0;
    self.page = 0;
  }
  return self;
}
static UserBookmarkRes* defaultUserBookmarkResInstance = nil;
+ (void) initialize {
  if (self == [UserBookmarkRes class]) {
    defaultUserBookmarkResInstance = [[UserBookmarkRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserBookmarkResInstance;
}
- (instancetype) defaultInstance {
  return defaultUserBookmarkResInstance;
}
- (NSArray<Bookmark*> *)bookmarks {
  return bookmarksArray;
}
- (Bookmark*)bookmarksAtIndex:(NSUInteger)index {
  return [bookmarksArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPsize) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInitbookmarks = YES;
   [self.bookmarks enumerateObjectsUsingBlock:^(Bookmark *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitbookmarks = NO;
      *stop = YES;
    }
  }];
  if (!isInitbookmarks) return isInitbookmarks;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPsize) {
    [output writeUInt32:1 value:self.psize];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.bookmarksArray enumerateObjectsUsingBlock:^(Bookmark *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPsize) {
    size_ += computeUInt32Size(1, self.psize);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  [self.bookmarksArray enumerateObjectsUsingBlock:^(Bookmark *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserBookmarkRes*) parseFromData:(NSData*) data {
  return (UserBookmarkRes*)[[[UserBookmarkRes builder] mergeFromData:data] build];
}
+ (UserBookmarkRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserBookmarkRes*)[[[UserBookmarkRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserBookmarkRes*) parseFromInputStream:(NSInputStream*) input {
  return (UserBookmarkRes*)[[[UserBookmarkRes builder] mergeFromInputStream:input] build];
}
+ (UserBookmarkRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserBookmarkRes*)[[[UserBookmarkRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserBookmarkRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserBookmarkRes*)[[[UserBookmarkRes builder] mergeFromCodedInputStream:input] build];
}
+ (UserBookmarkRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserBookmarkRes*)[[[UserBookmarkRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserBookmarkResBuilder*) builder {
  return [[UserBookmarkResBuilder alloc] init];
}
+ (UserBookmarkResBuilder*) builderWithPrototype:(UserBookmarkRes*) prototype {
  return [[UserBookmarkRes builder] mergeFrom:prototype];
}
- (UserBookmarkResBuilder*) builder {
  return [UserBookmarkRes builder];
}
- (UserBookmarkResBuilder*) toBuilder {
  return [UserBookmarkRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPsize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"psize", [NSNumber numberWithInteger:self.psize]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.bookmarksArray enumerateObjectsUsingBlock:^(Bookmark *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"bookmarks"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPsize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.psize] forKey: @"psize"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  for (Bookmark* element in self.bookmarksArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"bookmarks"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserBookmarkRes class]]) {
    return NO;
  }
  UserBookmarkRes *otherMessage = other;
  return
      self.hasPsize == otherMessage.hasPsize &&
      (!self.hasPsize || self.psize == otherMessage.psize) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.bookmarksArray isEqualToArray:otherMessage.bookmarksArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPsize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.psize] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  [self.bookmarksArray enumerateObjectsUsingBlock:^(Bookmark *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserBookmarkResBuilder()
@property (strong) UserBookmarkRes* resultUserBookmarkRes;
@end

@implementation UserBookmarkResBuilder
@synthesize resultUserBookmarkRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserBookmarkRes = [[UserBookmarkRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserBookmarkRes;
}
- (UserBookmarkResBuilder*) clear {
  self.resultUserBookmarkRes = [[UserBookmarkRes alloc] init];
  return self;
}
- (UserBookmarkResBuilder*) clone {
  return [UserBookmarkRes builderWithPrototype:resultUserBookmarkRes];
}
- (UserBookmarkRes*) defaultInstance {
  return [UserBookmarkRes defaultInstance];
}
- (UserBookmarkRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserBookmarkRes*) buildPartial {
  UserBookmarkRes* returnMe = resultUserBookmarkRes;
  self.resultUserBookmarkRes = nil;
  return returnMe;
}
- (UserBookmarkResBuilder*) mergeFrom:(UserBookmarkRes*) other {
  if (other == [UserBookmarkRes defaultInstance]) {
    return self;
  }
  if (other.hasPsize) {
    [self setPsize:other.psize];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.bookmarksArray.count > 0) {
    if (resultUserBookmarkRes.bookmarksArray == nil) {
      resultUserBookmarkRes.bookmarksArray = [[NSMutableArray alloc] initWithArray:other.bookmarksArray];
    } else {
      [resultUserBookmarkRes.bookmarksArray addObjectsFromArray:other.bookmarksArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserBookmarkResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserBookmarkResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPsize:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 42: {
        BookmarkBuilder* subBuilder = [Bookmark builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBookmarks:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPsize {
  return resultUserBookmarkRes.hasPsize;
}
- (UInt32) psize {
  return resultUserBookmarkRes.psize;
}
- (UserBookmarkResBuilder*) setPsize:(UInt32) value {
  resultUserBookmarkRes.hasPsize = YES;
  resultUserBookmarkRes.psize = value;
  return self;
}
- (UserBookmarkResBuilder*) clearPsize {
  resultUserBookmarkRes.hasPsize = NO;
  resultUserBookmarkRes.psize = 0;
  return self;
}
- (BOOL) hasPage {
  return resultUserBookmarkRes.hasPage;
}
- (UInt32) page {
  return resultUserBookmarkRes.page;
}
- (UserBookmarkResBuilder*) setPage:(UInt32) value {
  resultUserBookmarkRes.hasPage = YES;
  resultUserBookmarkRes.page = value;
  return self;
}
- (UserBookmarkResBuilder*) clearPage {
  resultUserBookmarkRes.hasPage = NO;
  resultUserBookmarkRes.page = 0;
  return self;
}
- (NSMutableArray<Bookmark*> *)bookmarks {
  return resultUserBookmarkRes.bookmarksArray;
}
- (Bookmark*)bookmarksAtIndex:(NSUInteger)index {
  return [resultUserBookmarkRes bookmarksAtIndex:index];
}
- (UserBookmarkResBuilder *)addBookmarks:(Bookmark*)value {
  if (resultUserBookmarkRes.bookmarksArray == nil) {
    resultUserBookmarkRes.bookmarksArray = [[NSMutableArray alloc]init];
  }
  [resultUserBookmarkRes.bookmarksArray addObject:value];
  return self;
}
- (UserBookmarkResBuilder *)setBookmarksArray:(NSArray<Bookmark*> *)array {
  resultUserBookmarkRes.bookmarksArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UserBookmarkResBuilder *)clearBookmarks {
  resultUserBookmarkRes.bookmarksArray = nil;
  return self;
}
@end

@interface Readlog ()
@property UInt32 id;
@property UInt32 articleId;
@property (strong) NSString* articleTitle;
@property (strong) NSString* rT;
@end

@implementation Readlog

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasArticleId {
  return !!hasArticleId_;
}
- (void) setHasArticleId:(BOOL) _value_ {
  hasArticleId_ = !!_value_;
}
@synthesize articleId;
- (BOOL) hasArticleTitle {
  return !!hasArticleTitle_;
}
- (void) setHasArticleTitle:(BOOL) _value_ {
  hasArticleTitle_ = !!_value_;
}
@synthesize articleTitle;
- (BOOL) hasRT {
  return !!hasRT_;
}
- (void) setHasRT:(BOOL) _value_ {
  hasRT_ = !!_value_;
}
@synthesize rT;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.articleId = 0;
    self.articleTitle = @"";
    self.rT = @"";
  }
  return self;
}
static Readlog* defaultReadlogInstance = nil;
+ (void) initialize {
  if (self == [Readlog class]) {
    defaultReadlogInstance = [[Readlog alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReadlogInstance;
}
- (instancetype) defaultInstance {
  return defaultReadlogInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasArticleId) {
    return NO;
  }
  if (!self.hasArticleTitle) {
    return NO;
  }
  if (!self.hasRT) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasArticleId) {
    [output writeUInt32:3 value:self.articleId];
  }
  if (self.hasArticleTitle) {
    [output writeString:4 value:self.articleTitle];
  }
  if (self.hasRT) {
    [output writeString:5 value:self.rT];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasArticleId) {
    size_ += computeUInt32Size(3, self.articleId);
  }
  if (self.hasArticleTitle) {
    size_ += computeStringSize(4, self.articleTitle);
  }
  if (self.hasRT) {
    size_ += computeStringSize(5, self.rT);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Readlog*) parseFromData:(NSData*) data {
  return (Readlog*)[[[Readlog builder] mergeFromData:data] build];
}
+ (Readlog*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Readlog*)[[[Readlog builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Readlog*) parseFromInputStream:(NSInputStream*) input {
  return (Readlog*)[[[Readlog builder] mergeFromInputStream:input] build];
}
+ (Readlog*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Readlog*)[[[Readlog builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Readlog*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Readlog*)[[[Readlog builder] mergeFromCodedInputStream:input] build];
}
+ (Readlog*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Readlog*)[[[Readlog builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReadlogBuilder*) builder {
  return [[ReadlogBuilder alloc] init];
}
+ (ReadlogBuilder*) builderWithPrototype:(Readlog*) prototype {
  return [[Readlog builder] mergeFrom:prototype];
}
- (ReadlogBuilder*) builder {
  return [Readlog builder];
}
- (ReadlogBuilder*) toBuilder {
  return [Readlog builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasArticleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleId", [NSNumber numberWithInteger:self.articleId]];
  }
  if (self.hasArticleTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleTitle", self.articleTitle];
  }
  if (self.hasRT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rT", self.rT];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasArticleId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.articleId] forKey: @"articleId"];
  }
  if (self.hasArticleTitle) {
    [dictionary setObject: self.articleTitle forKey: @"articleTitle"];
  }
  if (self.hasRT) {
    [dictionary setObject: self.rT forKey: @"rT"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Readlog class]]) {
    return NO;
  }
  Readlog *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasArticleId == otherMessage.hasArticleId &&
      (!self.hasArticleId || self.articleId == otherMessage.articleId) &&
      self.hasArticleTitle == otherMessage.hasArticleTitle &&
      (!self.hasArticleTitle || [self.articleTitle isEqual:otherMessage.articleTitle]) &&
      self.hasRT == otherMessage.hasRT &&
      (!self.hasRT || [self.rT isEqual:otherMessage.rT]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasArticleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.articleId] hash];
  }
  if (self.hasArticleTitle) {
    hashCode = hashCode * 31 + [self.articleTitle hash];
  }
  if (self.hasRT) {
    hashCode = hashCode * 31 + [self.rT hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReadlogBuilder()
@property (strong) Readlog* resultReadlog;
@end

@implementation ReadlogBuilder
@synthesize resultReadlog;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReadlog = [[Readlog alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReadlog;
}
- (ReadlogBuilder*) clear {
  self.resultReadlog = [[Readlog alloc] init];
  return self;
}
- (ReadlogBuilder*) clone {
  return [Readlog builderWithPrototype:resultReadlog];
}
- (Readlog*) defaultInstance {
  return [Readlog defaultInstance];
}
- (Readlog*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Readlog*) buildPartial {
  Readlog* returnMe = resultReadlog;
  self.resultReadlog = nil;
  return returnMe;
}
- (ReadlogBuilder*) mergeFrom:(Readlog*) other {
  if (other == [Readlog defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasArticleId) {
    [self setArticleId:other.articleId];
  }
  if (other.hasArticleTitle) {
    [self setArticleTitle:other.articleTitle];
  }
  if (other.hasRT) {
    [self setRT:other.rT];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReadlogBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReadlogBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setArticleId:[input readUInt32]];
        break;
      }
      case 34: {
        [self setArticleTitle:[input readString]];
        break;
      }
      case 42: {
        [self setRT:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultReadlog.hasId;
}
- (UInt32) id {
  return resultReadlog.id;
}
- (ReadlogBuilder*) setId:(UInt32) value {
  resultReadlog.hasId = YES;
  resultReadlog.id = value;
  return self;
}
- (ReadlogBuilder*) clearId {
  resultReadlog.hasId = NO;
  resultReadlog.id = 0;
  return self;
}
- (BOOL) hasArticleId {
  return resultReadlog.hasArticleId;
}
- (UInt32) articleId {
  return resultReadlog.articleId;
}
- (ReadlogBuilder*) setArticleId:(UInt32) value {
  resultReadlog.hasArticleId = YES;
  resultReadlog.articleId = value;
  return self;
}
- (ReadlogBuilder*) clearArticleId {
  resultReadlog.hasArticleId = NO;
  resultReadlog.articleId = 0;
  return self;
}
- (BOOL) hasArticleTitle {
  return resultReadlog.hasArticleTitle;
}
- (NSString*) articleTitle {
  return resultReadlog.articleTitle;
}
- (ReadlogBuilder*) setArticleTitle:(NSString*) value {
  resultReadlog.hasArticleTitle = YES;
  resultReadlog.articleTitle = value;
  return self;
}
- (ReadlogBuilder*) clearArticleTitle {
  resultReadlog.hasArticleTitle = NO;
  resultReadlog.articleTitle = @"";
  return self;
}
- (BOOL) hasRT {
  return resultReadlog.hasRT;
}
- (NSString*) rT {
  return resultReadlog.rT;
}
- (ReadlogBuilder*) setRT:(NSString*) value {
  resultReadlog.hasRT = YES;
  resultReadlog.rT = value;
  return self;
}
- (ReadlogBuilder*) clearRT {
  resultReadlog.hasRT = NO;
  resultReadlog.rT = @"";
  return self;
}
@end

@interface UserReadlogReq ()
@property UInt32 page;
@end

@implementation UserReadlogReq

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (instancetype) init {
  if ((self = [super init])) {
    self.page = 0;
  }
  return self;
}
static UserReadlogReq* defaultUserReadlogReqInstance = nil;
+ (void) initialize {
  if (self == [UserReadlogReq class]) {
    defaultUserReadlogReqInstance = [[UserReadlogReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserReadlogReqInstance;
}
- (instancetype) defaultInstance {
  return defaultUserReadlogReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeUInt32:1 value:self.page];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeUInt32Size(1, self.page);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserReadlogReq*) parseFromData:(NSData*) data {
  return (UserReadlogReq*)[[[UserReadlogReq builder] mergeFromData:data] build];
}
+ (UserReadlogReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserReadlogReq*)[[[UserReadlogReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserReadlogReq*) parseFromInputStream:(NSInputStream*) input {
  return (UserReadlogReq*)[[[UserReadlogReq builder] mergeFromInputStream:input] build];
}
+ (UserReadlogReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserReadlogReq*)[[[UserReadlogReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserReadlogReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserReadlogReq*)[[[UserReadlogReq builder] mergeFromCodedInputStream:input] build];
}
+ (UserReadlogReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserReadlogReq*)[[[UserReadlogReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserReadlogReqBuilder*) builder {
  return [[UserReadlogReqBuilder alloc] init];
}
+ (UserReadlogReqBuilder*) builderWithPrototype:(UserReadlogReq*) prototype {
  return [[UserReadlogReq builder] mergeFrom:prototype];
}
- (UserReadlogReqBuilder*) builder {
  return [UserReadlogReq builder];
}
- (UserReadlogReqBuilder*) toBuilder {
  return [UserReadlogReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserReadlogReq class]]) {
    return NO;
  }
  UserReadlogReq *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserReadlogReqBuilder()
@property (strong) UserReadlogReq* resultUserReadlogReq;
@end

@implementation UserReadlogReqBuilder
@synthesize resultUserReadlogReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserReadlogReq = [[UserReadlogReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserReadlogReq;
}
- (UserReadlogReqBuilder*) clear {
  self.resultUserReadlogReq = [[UserReadlogReq alloc] init];
  return self;
}
- (UserReadlogReqBuilder*) clone {
  return [UserReadlogReq builderWithPrototype:resultUserReadlogReq];
}
- (UserReadlogReq*) defaultInstance {
  return [UserReadlogReq defaultInstance];
}
- (UserReadlogReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserReadlogReq*) buildPartial {
  UserReadlogReq* returnMe = resultUserReadlogReq;
  self.resultUserReadlogReq = nil;
  return returnMe;
}
- (UserReadlogReqBuilder*) mergeFrom:(UserReadlogReq*) other {
  if (other == [UserReadlogReq defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserReadlogReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserReadlogReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return resultUserReadlogReq.hasPage;
}
- (UInt32) page {
  return resultUserReadlogReq.page;
}
- (UserReadlogReqBuilder*) setPage:(UInt32) value {
  resultUserReadlogReq.hasPage = YES;
  resultUserReadlogReq.page = value;
  return self;
}
- (UserReadlogReqBuilder*) clearPage {
  resultUserReadlogReq.hasPage = NO;
  resultUserReadlogReq.page = 0;
  return self;
}
@end

@interface UserReadlogRes ()
@property UInt32 psize;
@property UInt32 page;
@property (strong) NSMutableArray<Readlog*> * readlogsArray;
@end

@implementation UserReadlogRes

- (BOOL) hasPsize {
  return !!hasPsize_;
}
- (void) setHasPsize:(BOOL) _value_ {
  hasPsize_ = !!_value_;
}
@synthesize psize;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
@synthesize readlogsArray;
@dynamic readlogs;
- (instancetype) init {
  if ((self = [super init])) {
    self.psize = 0;
    self.page = 0;
  }
  return self;
}
static UserReadlogRes* defaultUserReadlogResInstance = nil;
+ (void) initialize {
  if (self == [UserReadlogRes class]) {
    defaultUserReadlogResInstance = [[UserReadlogRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserReadlogResInstance;
}
- (instancetype) defaultInstance {
  return defaultUserReadlogResInstance;
}
- (NSArray<Readlog*> *)readlogs {
  return readlogsArray;
}
- (Readlog*)readlogsAtIndex:(NSUInteger)index {
  return [readlogsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPsize) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInitreadlogs = YES;
   [self.readlogs enumerateObjectsUsingBlock:^(Readlog *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitreadlogs = NO;
      *stop = YES;
    }
  }];
  if (!isInitreadlogs) return isInitreadlogs;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPsize) {
    [output writeUInt32:1 value:self.psize];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.readlogsArray enumerateObjectsUsingBlock:^(Readlog *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPsize) {
    size_ += computeUInt32Size(1, self.psize);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  [self.readlogsArray enumerateObjectsUsingBlock:^(Readlog *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserReadlogRes*) parseFromData:(NSData*) data {
  return (UserReadlogRes*)[[[UserReadlogRes builder] mergeFromData:data] build];
}
+ (UserReadlogRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserReadlogRes*)[[[UserReadlogRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserReadlogRes*) parseFromInputStream:(NSInputStream*) input {
  return (UserReadlogRes*)[[[UserReadlogRes builder] mergeFromInputStream:input] build];
}
+ (UserReadlogRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserReadlogRes*)[[[UserReadlogRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserReadlogRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserReadlogRes*)[[[UserReadlogRes builder] mergeFromCodedInputStream:input] build];
}
+ (UserReadlogRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserReadlogRes*)[[[UserReadlogRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserReadlogResBuilder*) builder {
  return [[UserReadlogResBuilder alloc] init];
}
+ (UserReadlogResBuilder*) builderWithPrototype:(UserReadlogRes*) prototype {
  return [[UserReadlogRes builder] mergeFrom:prototype];
}
- (UserReadlogResBuilder*) builder {
  return [UserReadlogRes builder];
}
- (UserReadlogResBuilder*) toBuilder {
  return [UserReadlogRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPsize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"psize", [NSNumber numberWithInteger:self.psize]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.readlogsArray enumerateObjectsUsingBlock:^(Readlog *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"readlogs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPsize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.psize] forKey: @"psize"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  for (Readlog* element in self.readlogsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"readlogs"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserReadlogRes class]]) {
    return NO;
  }
  UserReadlogRes *otherMessage = other;
  return
      self.hasPsize == otherMessage.hasPsize &&
      (!self.hasPsize || self.psize == otherMessage.psize) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.readlogsArray isEqualToArray:otherMessage.readlogsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPsize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.psize] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  [self.readlogsArray enumerateObjectsUsingBlock:^(Readlog *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserReadlogResBuilder()
@property (strong) UserReadlogRes* resultUserReadlogRes;
@end

@implementation UserReadlogResBuilder
@synthesize resultUserReadlogRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserReadlogRes = [[UserReadlogRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserReadlogRes;
}
- (UserReadlogResBuilder*) clear {
  self.resultUserReadlogRes = [[UserReadlogRes alloc] init];
  return self;
}
- (UserReadlogResBuilder*) clone {
  return [UserReadlogRes builderWithPrototype:resultUserReadlogRes];
}
- (UserReadlogRes*) defaultInstance {
  return [UserReadlogRes defaultInstance];
}
- (UserReadlogRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserReadlogRes*) buildPartial {
  UserReadlogRes* returnMe = resultUserReadlogRes;
  self.resultUserReadlogRes = nil;
  return returnMe;
}
- (UserReadlogResBuilder*) mergeFrom:(UserReadlogRes*) other {
  if (other == [UserReadlogRes defaultInstance]) {
    return self;
  }
  if (other.hasPsize) {
    [self setPsize:other.psize];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.readlogsArray.count > 0) {
    if (resultUserReadlogRes.readlogsArray == nil) {
      resultUserReadlogRes.readlogsArray = [[NSMutableArray alloc] initWithArray:other.readlogsArray];
    } else {
      [resultUserReadlogRes.readlogsArray addObjectsFromArray:other.readlogsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserReadlogResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserReadlogResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPsize:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 42: {
        ReadlogBuilder* subBuilder = [Readlog builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addReadlogs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPsize {
  return resultUserReadlogRes.hasPsize;
}
- (UInt32) psize {
  return resultUserReadlogRes.psize;
}
- (UserReadlogResBuilder*) setPsize:(UInt32) value {
  resultUserReadlogRes.hasPsize = YES;
  resultUserReadlogRes.psize = value;
  return self;
}
- (UserReadlogResBuilder*) clearPsize {
  resultUserReadlogRes.hasPsize = NO;
  resultUserReadlogRes.psize = 0;
  return self;
}
- (BOOL) hasPage {
  return resultUserReadlogRes.hasPage;
}
- (UInt32) page {
  return resultUserReadlogRes.page;
}
- (UserReadlogResBuilder*) setPage:(UInt32) value {
  resultUserReadlogRes.hasPage = YES;
  resultUserReadlogRes.page = value;
  return self;
}
- (UserReadlogResBuilder*) clearPage {
  resultUserReadlogRes.hasPage = NO;
  resultUserReadlogRes.page = 0;
  return self;
}
- (NSMutableArray<Readlog*> *)readlogs {
  return resultUserReadlogRes.readlogsArray;
}
- (Readlog*)readlogsAtIndex:(NSUInteger)index {
  return [resultUserReadlogRes readlogsAtIndex:index];
}
- (UserReadlogResBuilder *)addReadlogs:(Readlog*)value {
  if (resultUserReadlogRes.readlogsArray == nil) {
    resultUserReadlogRes.readlogsArray = [[NSMutableArray alloc]init];
  }
  [resultUserReadlogRes.readlogsArray addObject:value];
  return self;
}
- (UserReadlogResBuilder *)setReadlogsArray:(NSArray<Readlog*> *)array {
  resultUserReadlogRes.readlogsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UserReadlogResBuilder *)clearReadlogs {
  resultUserReadlogRes.readlogsArray = nil;
  return self;
}
@end

@interface DelReadlogReq ()
@property UInt32 id;
@end

@implementation DelReadlogReq

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
  }
  return self;
}
static DelReadlogReq* defaultDelReadlogReqInstance = nil;
+ (void) initialize {
  if (self == [DelReadlogReq class]) {
    defaultDelReadlogReqInstance = [[DelReadlogReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDelReadlogReqInstance;
}
- (instancetype) defaultInstance {
  return defaultDelReadlogReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DelReadlogReq*) parseFromData:(NSData*) data {
  return (DelReadlogReq*)[[[DelReadlogReq builder] mergeFromData:data] build];
}
+ (DelReadlogReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DelReadlogReq*)[[[DelReadlogReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DelReadlogReq*) parseFromInputStream:(NSInputStream*) input {
  return (DelReadlogReq*)[[[DelReadlogReq builder] mergeFromInputStream:input] build];
}
+ (DelReadlogReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DelReadlogReq*)[[[DelReadlogReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DelReadlogReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DelReadlogReq*)[[[DelReadlogReq builder] mergeFromCodedInputStream:input] build];
}
+ (DelReadlogReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DelReadlogReq*)[[[DelReadlogReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DelReadlogReqBuilder*) builder {
  return [[DelReadlogReqBuilder alloc] init];
}
+ (DelReadlogReqBuilder*) builderWithPrototype:(DelReadlogReq*) prototype {
  return [[DelReadlogReq builder] mergeFrom:prototype];
}
- (DelReadlogReqBuilder*) builder {
  return [DelReadlogReq builder];
}
- (DelReadlogReqBuilder*) toBuilder {
  return [DelReadlogReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DelReadlogReq class]]) {
    return NO;
  }
  DelReadlogReq *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DelReadlogReqBuilder()
@property (strong) DelReadlogReq* resultDelReadlogReq;
@end

@implementation DelReadlogReqBuilder
@synthesize resultDelReadlogReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDelReadlogReq = [[DelReadlogReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDelReadlogReq;
}
- (DelReadlogReqBuilder*) clear {
  self.resultDelReadlogReq = [[DelReadlogReq alloc] init];
  return self;
}
- (DelReadlogReqBuilder*) clone {
  return [DelReadlogReq builderWithPrototype:resultDelReadlogReq];
}
- (DelReadlogReq*) defaultInstance {
  return [DelReadlogReq defaultInstance];
}
- (DelReadlogReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DelReadlogReq*) buildPartial {
  DelReadlogReq* returnMe = resultDelReadlogReq;
  self.resultDelReadlogReq = nil;
  return returnMe;
}
- (DelReadlogReqBuilder*) mergeFrom:(DelReadlogReq*) other {
  if (other == [DelReadlogReq defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DelReadlogReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DelReadlogReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultDelReadlogReq.hasId;
}
- (UInt32) id {
  return resultDelReadlogReq.id;
}
- (DelReadlogReqBuilder*) setId:(UInt32) value {
  resultDelReadlogReq.hasId = YES;
  resultDelReadlogReq.id = value;
  return self;
}
- (DelReadlogReqBuilder*) clearId {
  resultDelReadlogReq.hasId = NO;
  resultDelReadlogReq.id = 0;
  return self;
}
@end

@interface VerifyCodeReq ()
@property (strong) NSString* phoneNum;
@property SmsType smsType;
@end

@implementation VerifyCodeReq

- (BOOL) hasPhoneNum {
  return !!hasPhoneNum_;
}
- (void) setHasPhoneNum:(BOOL) _value_ {
  hasPhoneNum_ = !!_value_;
}
@synthesize phoneNum;
- (BOOL) hasSmsType {
  return !!hasSmsType_;
}
- (void) setHasSmsType:(BOOL) _value_ {
  hasSmsType_ = !!_value_;
}
@synthesize smsType;
- (instancetype) init {
  if ((self = [super init])) {
    self.phoneNum = @"";
    self.smsType = SmsTypeSmsReg;
  }
  return self;
}
static VerifyCodeReq* defaultVerifyCodeReqInstance = nil;
+ (void) initialize {
  if (self == [VerifyCodeReq class]) {
    defaultVerifyCodeReqInstance = [[VerifyCodeReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultVerifyCodeReqInstance;
}
- (instancetype) defaultInstance {
  return defaultVerifyCodeReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPhoneNum) {
    return NO;
  }
  if (!self.hasSmsType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhoneNum) {
    [output writeString:1 value:self.phoneNum];
  }
  if (self.hasSmsType) {
    [output writeEnum:2 value:self.smsType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPhoneNum) {
    size_ += computeStringSize(1, self.phoneNum);
  }
  if (self.hasSmsType) {
    size_ += computeEnumSize(2, self.smsType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VerifyCodeReq*) parseFromData:(NSData*) data {
  return (VerifyCodeReq*)[[[VerifyCodeReq builder] mergeFromData:data] build];
}
+ (VerifyCodeReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VerifyCodeReq*)[[[VerifyCodeReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VerifyCodeReq*) parseFromInputStream:(NSInputStream*) input {
  return (VerifyCodeReq*)[[[VerifyCodeReq builder] mergeFromInputStream:input] build];
}
+ (VerifyCodeReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VerifyCodeReq*)[[[VerifyCodeReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VerifyCodeReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VerifyCodeReq*)[[[VerifyCodeReq builder] mergeFromCodedInputStream:input] build];
}
+ (VerifyCodeReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VerifyCodeReq*)[[[VerifyCodeReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VerifyCodeReqBuilder*) builder {
  return [[VerifyCodeReqBuilder alloc] init];
}
+ (VerifyCodeReqBuilder*) builderWithPrototype:(VerifyCodeReq*) prototype {
  return [[VerifyCodeReq builder] mergeFrom:prototype];
}
- (VerifyCodeReqBuilder*) builder {
  return [VerifyCodeReq builder];
}
- (VerifyCodeReqBuilder*) toBuilder {
  return [VerifyCodeReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPhoneNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNum", self.phoneNum];
  }
  if (self.hasSmsType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smsType", NSStringFromSmsType(self.smsType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPhoneNum) {
    [dictionary setObject: self.phoneNum forKey: @"phoneNum"];
  }
  if (self.hasSmsType) {
    [dictionary setObject: @(self.smsType) forKey: @"smsType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VerifyCodeReq class]]) {
    return NO;
  }
  VerifyCodeReq *otherMessage = other;
  return
      self.hasPhoneNum == otherMessage.hasPhoneNum &&
      (!self.hasPhoneNum || [self.phoneNum isEqual:otherMessage.phoneNum]) &&
      self.hasSmsType == otherMessage.hasSmsType &&
      (!self.hasSmsType || self.smsType == otherMessage.smsType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPhoneNum) {
    hashCode = hashCode * 31 + [self.phoneNum hash];
  }
  if (self.hasSmsType) {
    hashCode = hashCode * 31 + self.smsType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VerifyCodeReqBuilder()
@property (strong) VerifyCodeReq* resultVerifyCodeReq;
@end

@implementation VerifyCodeReqBuilder
@synthesize resultVerifyCodeReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultVerifyCodeReq = [[VerifyCodeReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultVerifyCodeReq;
}
- (VerifyCodeReqBuilder*) clear {
  self.resultVerifyCodeReq = [[VerifyCodeReq alloc] init];
  return self;
}
- (VerifyCodeReqBuilder*) clone {
  return [VerifyCodeReq builderWithPrototype:resultVerifyCodeReq];
}
- (VerifyCodeReq*) defaultInstance {
  return [VerifyCodeReq defaultInstance];
}
- (VerifyCodeReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VerifyCodeReq*) buildPartial {
  VerifyCodeReq* returnMe = resultVerifyCodeReq;
  self.resultVerifyCodeReq = nil;
  return returnMe;
}
- (VerifyCodeReqBuilder*) mergeFrom:(VerifyCodeReq*) other {
  if (other == [VerifyCodeReq defaultInstance]) {
    return self;
  }
  if (other.hasPhoneNum) {
    [self setPhoneNum:other.phoneNum];
  }
  if (other.hasSmsType) {
    [self setSmsType:other.smsType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VerifyCodeReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VerifyCodeReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPhoneNum:[input readString]];
        break;
      }
      case 16: {
        SmsType value = (SmsType)[input readEnum];
        if (SmsTypeIsValidValue(value)) {
          [self setSmsType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasPhoneNum {
  return resultVerifyCodeReq.hasPhoneNum;
}
- (NSString*) phoneNum {
  return resultVerifyCodeReq.phoneNum;
}
- (VerifyCodeReqBuilder*) setPhoneNum:(NSString*) value {
  resultVerifyCodeReq.hasPhoneNum = YES;
  resultVerifyCodeReq.phoneNum = value;
  return self;
}
- (VerifyCodeReqBuilder*) clearPhoneNum {
  resultVerifyCodeReq.hasPhoneNum = NO;
  resultVerifyCodeReq.phoneNum = @"";
  return self;
}
- (BOOL) hasSmsType {
  return resultVerifyCodeReq.hasSmsType;
}
- (SmsType) smsType {
  return resultVerifyCodeReq.smsType;
}
- (VerifyCodeReqBuilder*) setSmsType:(SmsType) value {
  resultVerifyCodeReq.hasSmsType = YES;
  resultVerifyCodeReq.smsType = value;
  return self;
}
- (VerifyCodeReqBuilder*) clearSmsType {
  resultVerifyCodeReq.hasSmsType = NO;
  resultVerifyCodeReq.smsType = SmsTypeSmsReg;
  return self;
}
@end

@interface CheckVerifyCodeReq ()
@property (strong) NSString* phoneNum;
@property (strong) NSString* vcode;
@property SmsType smsType;
@end

@implementation CheckVerifyCodeReq

- (BOOL) hasPhoneNum {
  return !!hasPhoneNum_;
}
- (void) setHasPhoneNum:(BOOL) _value_ {
  hasPhoneNum_ = !!_value_;
}
@synthesize phoneNum;
- (BOOL) hasVcode {
  return !!hasVcode_;
}
- (void) setHasVcode:(BOOL) _value_ {
  hasVcode_ = !!_value_;
}
@synthesize vcode;
- (BOOL) hasSmsType {
  return !!hasSmsType_;
}
- (void) setHasSmsType:(BOOL) _value_ {
  hasSmsType_ = !!_value_;
}
@synthesize smsType;
- (instancetype) init {
  if ((self = [super init])) {
    self.phoneNum = @"";
    self.vcode = @"";
    self.smsType = SmsTypeSmsReg;
  }
  return self;
}
static CheckVerifyCodeReq* defaultCheckVerifyCodeReqInstance = nil;
+ (void) initialize {
  if (self == [CheckVerifyCodeReq class]) {
    defaultCheckVerifyCodeReqInstance = [[CheckVerifyCodeReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCheckVerifyCodeReqInstance;
}
- (instancetype) defaultInstance {
  return defaultCheckVerifyCodeReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPhoneNum) {
    return NO;
  }
  if (!self.hasVcode) {
    return NO;
  }
  if (!self.hasSmsType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPhoneNum) {
    [output writeString:1 value:self.phoneNum];
  }
  if (self.hasVcode) {
    [output writeString:2 value:self.vcode];
  }
  if (self.hasSmsType) {
    [output writeEnum:3 value:self.smsType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPhoneNum) {
    size_ += computeStringSize(1, self.phoneNum);
  }
  if (self.hasVcode) {
    size_ += computeStringSize(2, self.vcode);
  }
  if (self.hasSmsType) {
    size_ += computeEnumSize(3, self.smsType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CheckVerifyCodeReq*) parseFromData:(NSData*) data {
  return (CheckVerifyCodeReq*)[[[CheckVerifyCodeReq builder] mergeFromData:data] build];
}
+ (CheckVerifyCodeReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckVerifyCodeReq*)[[[CheckVerifyCodeReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckVerifyCodeReq*) parseFromInputStream:(NSInputStream*) input {
  return (CheckVerifyCodeReq*)[[[CheckVerifyCodeReq builder] mergeFromInputStream:input] build];
}
+ (CheckVerifyCodeReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckVerifyCodeReq*)[[[CheckVerifyCodeReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckVerifyCodeReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CheckVerifyCodeReq*)[[[CheckVerifyCodeReq builder] mergeFromCodedInputStream:input] build];
}
+ (CheckVerifyCodeReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckVerifyCodeReq*)[[[CheckVerifyCodeReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckVerifyCodeReqBuilder*) builder {
  return [[CheckVerifyCodeReqBuilder alloc] init];
}
+ (CheckVerifyCodeReqBuilder*) builderWithPrototype:(CheckVerifyCodeReq*) prototype {
  return [[CheckVerifyCodeReq builder] mergeFrom:prototype];
}
- (CheckVerifyCodeReqBuilder*) builder {
  return [CheckVerifyCodeReq builder];
}
- (CheckVerifyCodeReqBuilder*) toBuilder {
  return [CheckVerifyCodeReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPhoneNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNum", self.phoneNum];
  }
  if (self.hasVcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vcode", self.vcode];
  }
  if (self.hasSmsType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smsType", NSStringFromSmsType(self.smsType)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPhoneNum) {
    [dictionary setObject: self.phoneNum forKey: @"phoneNum"];
  }
  if (self.hasVcode) {
    [dictionary setObject: self.vcode forKey: @"vcode"];
  }
  if (self.hasSmsType) {
    [dictionary setObject: @(self.smsType) forKey: @"smsType"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CheckVerifyCodeReq class]]) {
    return NO;
  }
  CheckVerifyCodeReq *otherMessage = other;
  return
      self.hasPhoneNum == otherMessage.hasPhoneNum &&
      (!self.hasPhoneNum || [self.phoneNum isEqual:otherMessage.phoneNum]) &&
      self.hasVcode == otherMessage.hasVcode &&
      (!self.hasVcode || [self.vcode isEqual:otherMessage.vcode]) &&
      self.hasSmsType == otherMessage.hasSmsType &&
      (!self.hasSmsType || self.smsType == otherMessage.smsType) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPhoneNum) {
    hashCode = hashCode * 31 + [self.phoneNum hash];
  }
  if (self.hasVcode) {
    hashCode = hashCode * 31 + [self.vcode hash];
  }
  if (self.hasSmsType) {
    hashCode = hashCode * 31 + self.smsType;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CheckVerifyCodeReqBuilder()
@property (strong) CheckVerifyCodeReq* resultCheckVerifyCodeReq;
@end

@implementation CheckVerifyCodeReqBuilder
@synthesize resultCheckVerifyCodeReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCheckVerifyCodeReq = [[CheckVerifyCodeReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCheckVerifyCodeReq;
}
- (CheckVerifyCodeReqBuilder*) clear {
  self.resultCheckVerifyCodeReq = [[CheckVerifyCodeReq alloc] init];
  return self;
}
- (CheckVerifyCodeReqBuilder*) clone {
  return [CheckVerifyCodeReq builderWithPrototype:resultCheckVerifyCodeReq];
}
- (CheckVerifyCodeReq*) defaultInstance {
  return [CheckVerifyCodeReq defaultInstance];
}
- (CheckVerifyCodeReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CheckVerifyCodeReq*) buildPartial {
  CheckVerifyCodeReq* returnMe = resultCheckVerifyCodeReq;
  self.resultCheckVerifyCodeReq = nil;
  return returnMe;
}
- (CheckVerifyCodeReqBuilder*) mergeFrom:(CheckVerifyCodeReq*) other {
  if (other == [CheckVerifyCodeReq defaultInstance]) {
    return self;
  }
  if (other.hasPhoneNum) {
    [self setPhoneNum:other.phoneNum];
  }
  if (other.hasVcode) {
    [self setVcode:other.vcode];
  }
  if (other.hasSmsType) {
    [self setSmsType:other.smsType];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CheckVerifyCodeReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckVerifyCodeReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPhoneNum:[input readString]];
        break;
      }
      case 18: {
        [self setVcode:[input readString]];
        break;
      }
      case 24: {
        SmsType value = (SmsType)[input readEnum];
        if (SmsTypeIsValidValue(value)) {
          [self setSmsType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasPhoneNum {
  return resultCheckVerifyCodeReq.hasPhoneNum;
}
- (NSString*) phoneNum {
  return resultCheckVerifyCodeReq.phoneNum;
}
- (CheckVerifyCodeReqBuilder*) setPhoneNum:(NSString*) value {
  resultCheckVerifyCodeReq.hasPhoneNum = YES;
  resultCheckVerifyCodeReq.phoneNum = value;
  return self;
}
- (CheckVerifyCodeReqBuilder*) clearPhoneNum {
  resultCheckVerifyCodeReq.hasPhoneNum = NO;
  resultCheckVerifyCodeReq.phoneNum = @"";
  return self;
}
- (BOOL) hasVcode {
  return resultCheckVerifyCodeReq.hasVcode;
}
- (NSString*) vcode {
  return resultCheckVerifyCodeReq.vcode;
}
- (CheckVerifyCodeReqBuilder*) setVcode:(NSString*) value {
  resultCheckVerifyCodeReq.hasVcode = YES;
  resultCheckVerifyCodeReq.vcode = value;
  return self;
}
- (CheckVerifyCodeReqBuilder*) clearVcode {
  resultCheckVerifyCodeReq.hasVcode = NO;
  resultCheckVerifyCodeReq.vcode = @"";
  return self;
}
- (BOOL) hasSmsType {
  return resultCheckVerifyCodeReq.hasSmsType;
}
- (SmsType) smsType {
  return resultCheckVerifyCodeReq.smsType;
}
- (CheckVerifyCodeReqBuilder*) setSmsType:(SmsType) value {
  resultCheckVerifyCodeReq.hasSmsType = YES;
  resultCheckVerifyCodeReq.smsType = value;
  return self;
}
- (CheckVerifyCodeReqBuilder*) clearSmsType {
  resultCheckVerifyCodeReq.hasSmsType = NO;
  resultCheckVerifyCodeReq.smsType = SmsTypeSmsReg;
  return self;
}
@end

@interface CheckVerifyCodeRes ()
@property (strong) LoginedRegUser* loginedUser;
@end

@implementation CheckVerifyCodeRes

- (BOOL) hasLoginedUser {
  return !!hasLoginedUser_;
}
- (void) setHasLoginedUser:(BOOL) _value_ {
  hasLoginedUser_ = !!_value_;
}
@synthesize loginedUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.loginedUser = [LoginedRegUser defaultInstance];
  }
  return self;
}
static CheckVerifyCodeRes* defaultCheckVerifyCodeResInstance = nil;
+ (void) initialize {
  if (self == [CheckVerifyCodeRes class]) {
    defaultCheckVerifyCodeResInstance = [[CheckVerifyCodeRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCheckVerifyCodeResInstance;
}
- (instancetype) defaultInstance {
  return defaultCheckVerifyCodeResInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLoginedUser) {
    [output writeMessage:2 value:self.loginedUser];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLoginedUser) {
    size_ += computeMessageSize(2, self.loginedUser);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CheckVerifyCodeRes*) parseFromData:(NSData*) data {
  return (CheckVerifyCodeRes*)[[[CheckVerifyCodeRes builder] mergeFromData:data] build];
}
+ (CheckVerifyCodeRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckVerifyCodeRes*)[[[CheckVerifyCodeRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CheckVerifyCodeRes*) parseFromInputStream:(NSInputStream*) input {
  return (CheckVerifyCodeRes*)[[[CheckVerifyCodeRes builder] mergeFromInputStream:input] build];
}
+ (CheckVerifyCodeRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckVerifyCodeRes*)[[[CheckVerifyCodeRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckVerifyCodeRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CheckVerifyCodeRes*)[[[CheckVerifyCodeRes builder] mergeFromCodedInputStream:input] build];
}
+ (CheckVerifyCodeRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CheckVerifyCodeRes*)[[[CheckVerifyCodeRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CheckVerifyCodeResBuilder*) builder {
  return [[CheckVerifyCodeResBuilder alloc] init];
}
+ (CheckVerifyCodeResBuilder*) builderWithPrototype:(CheckVerifyCodeRes*) prototype {
  return [[CheckVerifyCodeRes builder] mergeFrom:prototype];
}
- (CheckVerifyCodeResBuilder*) builder {
  return [CheckVerifyCodeRes builder];
}
- (CheckVerifyCodeResBuilder*) toBuilder {
  return [CheckVerifyCodeRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLoginedUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginedUser"];
    [self.loginedUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLoginedUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginedUser storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginedUser"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CheckVerifyCodeRes class]]) {
    return NO;
  }
  CheckVerifyCodeRes *otherMessage = other;
  return
      self.hasLoginedUser == otherMessage.hasLoginedUser &&
      (!self.hasLoginedUser || [self.loginedUser isEqual:otherMessage.loginedUser]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLoginedUser) {
    hashCode = hashCode * 31 + [self.loginedUser hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CheckVerifyCodeResBuilder()
@property (strong) CheckVerifyCodeRes* resultCheckVerifyCodeRes;
@end

@implementation CheckVerifyCodeResBuilder
@synthesize resultCheckVerifyCodeRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCheckVerifyCodeRes = [[CheckVerifyCodeRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCheckVerifyCodeRes;
}
- (CheckVerifyCodeResBuilder*) clear {
  self.resultCheckVerifyCodeRes = [[CheckVerifyCodeRes alloc] init];
  return self;
}
- (CheckVerifyCodeResBuilder*) clone {
  return [CheckVerifyCodeRes builderWithPrototype:resultCheckVerifyCodeRes];
}
- (CheckVerifyCodeRes*) defaultInstance {
  return [CheckVerifyCodeRes defaultInstance];
}
- (CheckVerifyCodeRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CheckVerifyCodeRes*) buildPartial {
  CheckVerifyCodeRes* returnMe = resultCheckVerifyCodeRes;
  self.resultCheckVerifyCodeRes = nil;
  return returnMe;
}
- (CheckVerifyCodeResBuilder*) mergeFrom:(CheckVerifyCodeRes*) other {
  if (other == [CheckVerifyCodeRes defaultInstance]) {
    return self;
  }
  if (other.hasLoginedUser) {
    [self mergeLoginedUser:other.loginedUser];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CheckVerifyCodeResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CheckVerifyCodeResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        LoginedRegUserBuilder* subBuilder = [LoginedRegUser builder];
        if (self.hasLoginedUser) {
          [subBuilder mergeFrom:self.loginedUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginedUser:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLoginedUser {
  return resultCheckVerifyCodeRes.hasLoginedUser;
}
- (LoginedRegUser*) loginedUser {
  return resultCheckVerifyCodeRes.loginedUser;
}
- (CheckVerifyCodeResBuilder*) setLoginedUser:(LoginedRegUser*) value {
  resultCheckVerifyCodeRes.hasLoginedUser = YES;
  resultCheckVerifyCodeRes.loginedUser = value;
  return self;
}
- (CheckVerifyCodeResBuilder*) setLoginedUserBuilder:(LoginedRegUserBuilder*) builderForValue {
  return [self setLoginedUser:[builderForValue build]];
}
- (CheckVerifyCodeResBuilder*) mergeLoginedUser:(LoginedRegUser*) value {
  if (resultCheckVerifyCodeRes.hasLoginedUser &&
      resultCheckVerifyCodeRes.loginedUser != [LoginedRegUser defaultInstance]) {
    resultCheckVerifyCodeRes.loginedUser =
      [[[LoginedRegUser builderWithPrototype:resultCheckVerifyCodeRes.loginedUser] mergeFrom:value] buildPartial];
  } else {
    resultCheckVerifyCodeRes.loginedUser = value;
  }
  resultCheckVerifyCodeRes.hasLoginedUser = YES;
  return self;
}
- (CheckVerifyCodeResBuilder*) clearLoginedUser {
  resultCheckVerifyCodeRes.hasLoginedUser = NO;
  resultCheckVerifyCodeRes.loginedUser = [LoginedRegUser defaultInstance];
  return self;
}
@end

@interface Province ()
@property UInt32 id;
@property (strong) NSString* name;
@end

@implementation Province

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
  }
  return self;
}
static Province* defaultProvinceInstance = nil;
+ (void) initialize {
  if (self == [Province class]) {
    defaultProvinceInstance = [[Province alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProvinceInstance;
}
- (instancetype) defaultInstance {
  return defaultProvinceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Province*) parseFromData:(NSData*) data {
  return (Province*)[[[Province builder] mergeFromData:data] build];
}
+ (Province*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Province*)[[[Province builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Province*) parseFromInputStream:(NSInputStream*) input {
  return (Province*)[[[Province builder] mergeFromInputStream:input] build];
}
+ (Province*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Province*)[[[Province builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Province*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Province*)[[[Province builder] mergeFromCodedInputStream:input] build];
}
+ (Province*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Province*)[[[Province builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProvinceBuilder*) builder {
  return [[ProvinceBuilder alloc] init];
}
+ (ProvinceBuilder*) builderWithPrototype:(Province*) prototype {
  return [[Province builder] mergeFrom:prototype];
}
- (ProvinceBuilder*) builder {
  return [Province builder];
}
- (ProvinceBuilder*) toBuilder {
  return [Province builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Province class]]) {
    return NO;
  }
  Province *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProvinceBuilder()
@property (strong) Province* resultProvince;
@end

@implementation ProvinceBuilder
@synthesize resultProvince;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProvince = [[Province alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProvince;
}
- (ProvinceBuilder*) clear {
  self.resultProvince = [[Province alloc] init];
  return self;
}
- (ProvinceBuilder*) clone {
  return [Province builderWithPrototype:resultProvince];
}
- (Province*) defaultInstance {
  return [Province defaultInstance];
}
- (Province*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Province*) buildPartial {
  Province* returnMe = resultProvince;
  self.resultProvince = nil;
  return returnMe;
}
- (ProvinceBuilder*) mergeFrom:(Province*) other {
  if (other == [Province defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProvinceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProvinceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultProvince.hasId;
}
- (UInt32) id {
  return resultProvince.id;
}
- (ProvinceBuilder*) setId:(UInt32) value {
  resultProvince.hasId = YES;
  resultProvince.id = value;
  return self;
}
- (ProvinceBuilder*) clearId {
  resultProvince.hasId = NO;
  resultProvince.id = 0;
  return self;
}
- (BOOL) hasName {
  return resultProvince.hasName;
}
- (NSString*) name {
  return resultProvince.name;
}
- (ProvinceBuilder*) setName:(NSString*) value {
  resultProvince.hasName = YES;
  resultProvince.name = value;
  return self;
}
- (ProvinceBuilder*) clearName {
  resultProvince.hasName = NO;
  resultProvince.name = @"";
  return self;
}
@end

@interface City ()
@property UInt32 provinceId;
@property UInt32 id;
@property (strong) NSString* name;
@end

@implementation City

- (BOOL) hasProvinceId {
  return !!hasProvinceId_;
}
- (void) setHasProvinceId:(BOOL) _value_ {
  hasProvinceId_ = !!_value_;
}
@synthesize provinceId;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (instancetype) init {
  if ((self = [super init])) {
    self.provinceId = 0;
    self.id = 0;
    self.name = @"";
  }
  return self;
}
static City* defaultCityInstance = nil;
+ (void) initialize {
  if (self == [City class]) {
    defaultCityInstance = [[City alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCityInstance;
}
- (instancetype) defaultInstance {
  return defaultCityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasProvinceId) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProvinceId) {
    [output writeUInt32:1 value:self.provinceId];
  }
  if (self.hasId) {
    [output writeUInt32:3 value:self.id];
  }
  if (self.hasName) {
    [output writeString:5 value:self.name];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProvinceId) {
    size_ += computeUInt32Size(1, self.provinceId);
  }
  if (self.hasId) {
    size_ += computeUInt32Size(3, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(5, self.name);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (City*) parseFromData:(NSData*) data {
  return (City*)[[[City builder] mergeFromData:data] build];
}
+ (City*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input {
  return (City*)[[[City builder] mergeFromInputStream:input] build];
}
+ (City*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (City*)[[[City builder] mergeFromCodedInputStream:input] build];
}
+ (City*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (City*)[[[City builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CityBuilder*) builder {
  return [[CityBuilder alloc] init];
}
+ (CityBuilder*) builderWithPrototype:(City*) prototype {
  return [[City builder] mergeFrom:prototype];
}
- (CityBuilder*) builder {
  return [City builder];
}
- (CityBuilder*) toBuilder {
  return [City builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProvinceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"provinceId", [NSNumber numberWithInteger:self.provinceId]];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProvinceId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.provinceId] forKey: @"provinceId"];
  }
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[City class]]) {
    return NO;
  }
  City *otherMessage = other;
  return
      self.hasProvinceId == otherMessage.hasProvinceId &&
      (!self.hasProvinceId || self.provinceId == otherMessage.provinceId) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProvinceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.provinceId] hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CityBuilder()
@property (strong) City* resultCity;
@end

@implementation CityBuilder
@synthesize resultCity;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCity = [[City alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCity;
}
- (CityBuilder*) clear {
  self.resultCity = [[City alloc] init];
  return self;
}
- (CityBuilder*) clone {
  return [City builderWithPrototype:resultCity];
}
- (City*) defaultInstance {
  return [City defaultInstance];
}
- (City*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (City*) buildPartial {
  City* returnMe = resultCity;
  self.resultCity = nil;
  return returnMe;
}
- (CityBuilder*) mergeFrom:(City*) other {
  if (other == [City defaultInstance]) {
    return self;
  }
  if (other.hasProvinceId) {
    [self setProvinceId:other.provinceId];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setProvinceId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setId:[input readUInt32]];
        break;
      }
      case 42: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasProvinceId {
  return resultCity.hasProvinceId;
}
- (UInt32) provinceId {
  return resultCity.provinceId;
}
- (CityBuilder*) setProvinceId:(UInt32) value {
  resultCity.hasProvinceId = YES;
  resultCity.provinceId = value;
  return self;
}
- (CityBuilder*) clearProvinceId {
  resultCity.hasProvinceId = NO;
  resultCity.provinceId = 0;
  return self;
}
- (BOOL) hasId {
  return resultCity.hasId;
}
- (UInt32) id {
  return resultCity.id;
}
- (CityBuilder*) setId:(UInt32) value {
  resultCity.hasId = YES;
  resultCity.id = value;
  return self;
}
- (CityBuilder*) clearId {
  resultCity.hasId = NO;
  resultCity.id = 0;
  return self;
}
- (BOOL) hasName {
  return resultCity.hasName;
}
- (NSString*) name {
  return resultCity.name;
}
- (CityBuilder*) setName:(NSString*) value {
  resultCity.hasName = YES;
  resultCity.name = value;
  return self;
}
- (CityBuilder*) clearName {
  resultCity.hasName = NO;
  resultCity.name = @"";
  return self;
}
@end

@interface ProvinceCityReq ()
@property UInt32 provinceId;
@end

@implementation ProvinceCityReq

- (BOOL) hasProvinceId {
  return !!hasProvinceId_;
}
- (void) setHasProvinceId:(BOOL) _value_ {
  hasProvinceId_ = !!_value_;
}
@synthesize provinceId;
- (instancetype) init {
  if ((self = [super init])) {
    self.provinceId = 0;
  }
  return self;
}
static ProvinceCityReq* defaultProvinceCityReqInstance = nil;
+ (void) initialize {
  if (self == [ProvinceCityReq class]) {
    defaultProvinceCityReqInstance = [[ProvinceCityReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProvinceCityReqInstance;
}
- (instancetype) defaultInstance {
  return defaultProvinceCityReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProvinceId) {
    [output writeUInt32:1 value:self.provinceId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProvinceId) {
    size_ += computeUInt32Size(1, self.provinceId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProvinceCityReq*) parseFromData:(NSData*) data {
  return (ProvinceCityReq*)[[[ProvinceCityReq builder] mergeFromData:data] build];
}
+ (ProvinceCityReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProvinceCityReq*)[[[ProvinceCityReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProvinceCityReq*) parseFromInputStream:(NSInputStream*) input {
  return (ProvinceCityReq*)[[[ProvinceCityReq builder] mergeFromInputStream:input] build];
}
+ (ProvinceCityReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProvinceCityReq*)[[[ProvinceCityReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProvinceCityReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProvinceCityReq*)[[[ProvinceCityReq builder] mergeFromCodedInputStream:input] build];
}
+ (ProvinceCityReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProvinceCityReq*)[[[ProvinceCityReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProvinceCityReqBuilder*) builder {
  return [[ProvinceCityReqBuilder alloc] init];
}
+ (ProvinceCityReqBuilder*) builderWithPrototype:(ProvinceCityReq*) prototype {
  return [[ProvinceCityReq builder] mergeFrom:prototype];
}
- (ProvinceCityReqBuilder*) builder {
  return [ProvinceCityReq builder];
}
- (ProvinceCityReqBuilder*) toBuilder {
  return [ProvinceCityReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProvinceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"provinceId", [NSNumber numberWithInteger:self.provinceId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProvinceId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.provinceId] forKey: @"provinceId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProvinceCityReq class]]) {
    return NO;
  }
  ProvinceCityReq *otherMessage = other;
  return
      self.hasProvinceId == otherMessage.hasProvinceId &&
      (!self.hasProvinceId || self.provinceId == otherMessage.provinceId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasProvinceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.provinceId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProvinceCityReqBuilder()
@property (strong) ProvinceCityReq* resultProvinceCityReq;
@end

@implementation ProvinceCityReqBuilder
@synthesize resultProvinceCityReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProvinceCityReq = [[ProvinceCityReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProvinceCityReq;
}
- (ProvinceCityReqBuilder*) clear {
  self.resultProvinceCityReq = [[ProvinceCityReq alloc] init];
  return self;
}
- (ProvinceCityReqBuilder*) clone {
  return [ProvinceCityReq builderWithPrototype:resultProvinceCityReq];
}
- (ProvinceCityReq*) defaultInstance {
  return [ProvinceCityReq defaultInstance];
}
- (ProvinceCityReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProvinceCityReq*) buildPartial {
  ProvinceCityReq* returnMe = resultProvinceCityReq;
  self.resultProvinceCityReq = nil;
  return returnMe;
}
- (ProvinceCityReqBuilder*) mergeFrom:(ProvinceCityReq*) other {
  if (other == [ProvinceCityReq defaultInstance]) {
    return self;
  }
  if (other.hasProvinceId) {
    [self setProvinceId:other.provinceId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProvinceCityReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProvinceCityReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setProvinceId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasProvinceId {
  return resultProvinceCityReq.hasProvinceId;
}
- (UInt32) provinceId {
  return resultProvinceCityReq.provinceId;
}
- (ProvinceCityReqBuilder*) setProvinceId:(UInt32) value {
  resultProvinceCityReq.hasProvinceId = YES;
  resultProvinceCityReq.provinceId = value;
  return self;
}
- (ProvinceCityReqBuilder*) clearProvinceId {
  resultProvinceCityReq.hasProvinceId = NO;
  resultProvinceCityReq.provinceId = 0;
  return self;
}
@end

@interface ProvinceCityRes ()
@property (strong) NSMutableArray<Province*> * provincesArray;
@property (strong) NSMutableArray<City*> * citysArray;
@end

@implementation ProvinceCityRes

@synthesize provincesArray;
@dynamic provinces;
@synthesize citysArray;
@dynamic citys;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ProvinceCityRes* defaultProvinceCityResInstance = nil;
+ (void) initialize {
  if (self == [ProvinceCityRes class]) {
    defaultProvinceCityResInstance = [[ProvinceCityRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultProvinceCityResInstance;
}
- (instancetype) defaultInstance {
  return defaultProvinceCityResInstance;
}
- (NSArray<Province*> *)provinces {
  return provincesArray;
}
- (Province*)provincesAtIndex:(NSUInteger)index {
  return [provincesArray objectAtIndex:index];
}
- (NSArray<City*> *)citys {
  return citysArray;
}
- (City*)citysAtIndex:(NSUInteger)index {
  return [citysArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitprovinces = YES;
   [self.provinces enumerateObjectsUsingBlock:^(Province *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitprovinces = NO;
      *stop = YES;
    }
  }];
  if (!isInitprovinces) return isInitprovinces;
  __block BOOL isInitcitys = YES;
   [self.citys enumerateObjectsUsingBlock:^(City *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcitys = NO;
      *stop = YES;
    }
  }];
  if (!isInitcitys) return isInitcitys;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.provincesArray enumerateObjectsUsingBlock:^(Province *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.citysArray enumerateObjectsUsingBlock:^(City *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.provincesArray enumerateObjectsUsingBlock:^(Province *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.citysArray enumerateObjectsUsingBlock:^(City *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProvinceCityRes*) parseFromData:(NSData*) data {
  return (ProvinceCityRes*)[[[ProvinceCityRes builder] mergeFromData:data] build];
}
+ (ProvinceCityRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProvinceCityRes*)[[[ProvinceCityRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ProvinceCityRes*) parseFromInputStream:(NSInputStream*) input {
  return (ProvinceCityRes*)[[[ProvinceCityRes builder] mergeFromInputStream:input] build];
}
+ (ProvinceCityRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProvinceCityRes*)[[[ProvinceCityRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProvinceCityRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ProvinceCityRes*)[[[ProvinceCityRes builder] mergeFromCodedInputStream:input] build];
}
+ (ProvinceCityRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ProvinceCityRes*)[[[ProvinceCityRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ProvinceCityResBuilder*) builder {
  return [[ProvinceCityResBuilder alloc] init];
}
+ (ProvinceCityResBuilder*) builderWithPrototype:(ProvinceCityRes*) prototype {
  return [[ProvinceCityRes builder] mergeFrom:prototype];
}
- (ProvinceCityResBuilder*) builder {
  return [ProvinceCityRes builder];
}
- (ProvinceCityResBuilder*) toBuilder {
  return [ProvinceCityRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.provincesArray enumerateObjectsUsingBlock:^(Province *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"provinces"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.citysArray enumerateObjectsUsingBlock:^(City *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"citys"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (Province* element in self.provincesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"provinces"];
  }
  for (City* element in self.citysArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"citys"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ProvinceCityRes class]]) {
    return NO;
  }
  ProvinceCityRes *otherMessage = other;
  return
      [self.provincesArray isEqualToArray:otherMessage.provincesArray] &&
      [self.citysArray isEqualToArray:otherMessage.citysArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.provincesArray enumerateObjectsUsingBlock:^(Province *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.citysArray enumerateObjectsUsingBlock:^(City *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ProvinceCityResBuilder()
@property (strong) ProvinceCityRes* resultProvinceCityRes;
@end

@implementation ProvinceCityResBuilder
@synthesize resultProvinceCityRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultProvinceCityRes = [[ProvinceCityRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultProvinceCityRes;
}
- (ProvinceCityResBuilder*) clear {
  self.resultProvinceCityRes = [[ProvinceCityRes alloc] init];
  return self;
}
- (ProvinceCityResBuilder*) clone {
  return [ProvinceCityRes builderWithPrototype:resultProvinceCityRes];
}
- (ProvinceCityRes*) defaultInstance {
  return [ProvinceCityRes defaultInstance];
}
- (ProvinceCityRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ProvinceCityRes*) buildPartial {
  ProvinceCityRes* returnMe = resultProvinceCityRes;
  self.resultProvinceCityRes = nil;
  return returnMe;
}
- (ProvinceCityResBuilder*) mergeFrom:(ProvinceCityRes*) other {
  if (other == [ProvinceCityRes defaultInstance]) {
    return self;
  }
  if (other.provincesArray.count > 0) {
    if (resultProvinceCityRes.provincesArray == nil) {
      resultProvinceCityRes.provincesArray = [[NSMutableArray alloc] initWithArray:other.provincesArray];
    } else {
      [resultProvinceCityRes.provincesArray addObjectsFromArray:other.provincesArray];
    }
  }
  if (other.citysArray.count > 0) {
    if (resultProvinceCityRes.citysArray == nil) {
      resultProvinceCityRes.citysArray = [[NSMutableArray alloc] initWithArray:other.citysArray];
    } else {
      [resultProvinceCityRes.citysArray addObjectsFromArray:other.citysArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ProvinceCityResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ProvinceCityResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        ProvinceBuilder* subBuilder = [Province builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProvinces:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CityBuilder* subBuilder = [City builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCitys:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<Province*> *)provinces {
  return resultProvinceCityRes.provincesArray;
}
- (Province*)provincesAtIndex:(NSUInteger)index {
  return [resultProvinceCityRes provincesAtIndex:index];
}
- (ProvinceCityResBuilder *)addProvinces:(Province*)value {
  if (resultProvinceCityRes.provincesArray == nil) {
    resultProvinceCityRes.provincesArray = [[NSMutableArray alloc]init];
  }
  [resultProvinceCityRes.provincesArray addObject:value];
  return self;
}
- (ProvinceCityResBuilder *)setProvincesArray:(NSArray<Province*> *)array {
  resultProvinceCityRes.provincesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ProvinceCityResBuilder *)clearProvinces {
  resultProvinceCityRes.provincesArray = nil;
  return self;
}
- (NSMutableArray<City*> *)citys {
  return resultProvinceCityRes.citysArray;
}
- (City*)citysAtIndex:(NSUInteger)index {
  return [resultProvinceCityRes citysAtIndex:index];
}
- (ProvinceCityResBuilder *)addCitys:(City*)value {
  if (resultProvinceCityRes.citysArray == nil) {
    resultProvinceCityRes.citysArray = [[NSMutableArray alloc]init];
  }
  [resultProvinceCityRes.citysArray addObject:value];
  return self;
}
- (ProvinceCityResBuilder *)setCitysArray:(NSArray<City*> *)array {
  resultProvinceCityRes.citysArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ProvinceCityResBuilder *)clearCitys {
  resultProvinceCityRes.citysArray = nil;
  return self;
}
@end

@interface FeedbackReq ()
@property UInt32 type;
@property (strong) NSString* words;
@property (strong) NSString* phoneNum;
@property (strong) NSString* email;
@end

@implementation FeedbackReq

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasWords {
  return !!hasWords_;
}
- (void) setHasWords:(BOOL) _value_ {
  hasWords_ = !!_value_;
}
@synthesize words;
- (BOOL) hasPhoneNum {
  return !!hasPhoneNum_;
}
- (void) setHasPhoneNum:(BOOL) _value_ {
  hasPhoneNum_ = !!_value_;
}
@synthesize phoneNum;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.words = @"";
    self.phoneNum = @"";
    self.email = @"";
  }
  return self;
}
static FeedbackReq* defaultFeedbackReqInstance = nil;
+ (void) initialize {
  if (self == [FeedbackReq class]) {
    defaultFeedbackReqInstance = [[FeedbackReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFeedbackReqInstance;
}
- (instancetype) defaultInstance {
  return defaultFeedbackReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasWords) {
    return NO;
  }
  if (!self.hasPhoneNum) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeUInt32:1 value:self.type];
  }
  if (self.hasWords) {
    [output writeString:2 value:self.words];
  }
  if (self.hasPhoneNum) {
    [output writeString:3 value:self.phoneNum];
  }
  if (self.hasEmail) {
    [output writeString:4 value:self.email];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeUInt32Size(1, self.type);
  }
  if (self.hasWords) {
    size_ += computeStringSize(2, self.words);
  }
  if (self.hasPhoneNum) {
    size_ += computeStringSize(3, self.phoneNum);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(4, self.email);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FeedbackReq*) parseFromData:(NSData*) data {
  return (FeedbackReq*)[[[FeedbackReq builder] mergeFromData:data] build];
}
+ (FeedbackReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedbackReq*)[[[FeedbackReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FeedbackReq*) parseFromInputStream:(NSInputStream*) input {
  return (FeedbackReq*)[[[FeedbackReq builder] mergeFromInputStream:input] build];
}
+ (FeedbackReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedbackReq*)[[[FeedbackReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FeedbackReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FeedbackReq*)[[[FeedbackReq builder] mergeFromCodedInputStream:input] build];
}
+ (FeedbackReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FeedbackReq*)[[[FeedbackReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FeedbackReqBuilder*) builder {
  return [[FeedbackReqBuilder alloc] init];
}
+ (FeedbackReqBuilder*) builderWithPrototype:(FeedbackReq*) prototype {
  return [[FeedbackReq builder] mergeFrom:prototype];
}
- (FeedbackReqBuilder*) builder {
  return [FeedbackReq builder];
}
- (FeedbackReqBuilder*) toBuilder {
  return [FeedbackReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasWords) {
    [output appendFormat:@"%@%@: %@\n", indent, @"words", self.words];
  }
  if (self.hasPhoneNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNum", self.phoneNum];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasWords) {
    [dictionary setObject: self.words forKey: @"words"];
  }
  if (self.hasPhoneNum) {
    [dictionary setObject: self.phoneNum forKey: @"phoneNum"];
  }
  if (self.hasEmail) {
    [dictionary setObject: self.email forKey: @"email"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FeedbackReq class]]) {
    return NO;
  }
  FeedbackReq *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasWords == otherMessage.hasWords &&
      (!self.hasWords || [self.words isEqual:otherMessage.words]) &&
      self.hasPhoneNum == otherMessage.hasPhoneNum &&
      (!self.hasPhoneNum || [self.phoneNum isEqual:otherMessage.phoneNum]) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasWords) {
    hashCode = hashCode * 31 + [self.words hash];
  }
  if (self.hasPhoneNum) {
    hashCode = hashCode * 31 + [self.phoneNum hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FeedbackReqBuilder()
@property (strong) FeedbackReq* resultFeedbackReq;
@end

@implementation FeedbackReqBuilder
@synthesize resultFeedbackReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFeedbackReq = [[FeedbackReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFeedbackReq;
}
- (FeedbackReqBuilder*) clear {
  self.resultFeedbackReq = [[FeedbackReq alloc] init];
  return self;
}
- (FeedbackReqBuilder*) clone {
  return [FeedbackReq builderWithPrototype:resultFeedbackReq];
}
- (FeedbackReq*) defaultInstance {
  return [FeedbackReq defaultInstance];
}
- (FeedbackReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FeedbackReq*) buildPartial {
  FeedbackReq* returnMe = resultFeedbackReq;
  self.resultFeedbackReq = nil;
  return returnMe;
}
- (FeedbackReqBuilder*) mergeFrom:(FeedbackReq*) other {
  if (other == [FeedbackReq defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasWords) {
    [self setWords:other.words];
  }
  if (other.hasPhoneNum) {
    [self setPhoneNum:other.phoneNum];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FeedbackReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FeedbackReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readUInt32]];
        break;
      }
      case 18: {
        [self setWords:[input readString]];
        break;
      }
      case 26: {
        [self setPhoneNum:[input readString]];
        break;
      }
      case 34: {
        [self setEmail:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultFeedbackReq.hasType;
}
- (UInt32) type {
  return resultFeedbackReq.type;
}
- (FeedbackReqBuilder*) setType:(UInt32) value {
  resultFeedbackReq.hasType = YES;
  resultFeedbackReq.type = value;
  return self;
}
- (FeedbackReqBuilder*) clearType {
  resultFeedbackReq.hasType = NO;
  resultFeedbackReq.type = 0;
  return self;
}
- (BOOL) hasWords {
  return resultFeedbackReq.hasWords;
}
- (NSString*) words {
  return resultFeedbackReq.words;
}
- (FeedbackReqBuilder*) setWords:(NSString*) value {
  resultFeedbackReq.hasWords = YES;
  resultFeedbackReq.words = value;
  return self;
}
- (FeedbackReqBuilder*) clearWords {
  resultFeedbackReq.hasWords = NO;
  resultFeedbackReq.words = @"";
  return self;
}
- (BOOL) hasPhoneNum {
  return resultFeedbackReq.hasPhoneNum;
}
- (NSString*) phoneNum {
  return resultFeedbackReq.phoneNum;
}
- (FeedbackReqBuilder*) setPhoneNum:(NSString*) value {
  resultFeedbackReq.hasPhoneNum = YES;
  resultFeedbackReq.phoneNum = value;
  return self;
}
- (FeedbackReqBuilder*) clearPhoneNum {
  resultFeedbackReq.hasPhoneNum = NO;
  resultFeedbackReq.phoneNum = @"";
  return self;
}
- (BOOL) hasEmail {
  return resultFeedbackReq.hasEmail;
}
- (NSString*) email {
  return resultFeedbackReq.email;
}
- (FeedbackReqBuilder*) setEmail:(NSString*) value {
  resultFeedbackReq.hasEmail = YES;
  resultFeedbackReq.email = value;
  return self;
}
- (FeedbackReqBuilder*) clearEmail {
  resultFeedbackReq.hasEmail = NO;
  resultFeedbackReq.email = @"";
  return self;
}
@end

@interface PhoneNumRegAndResetPwdReq ()
@property UInt32 reqType;
@property (strong) NSString* phoneNum;
@property (strong) NSString* vcode;
@property (strong) NSString* md5Pwd;
@end

@implementation PhoneNumRegAndResetPwdReq

- (BOOL) hasReqType {
  return !!hasReqType_;
}
- (void) setHasReqType:(BOOL) _value_ {
  hasReqType_ = !!_value_;
}
@synthesize reqType;
- (BOOL) hasPhoneNum {
  return !!hasPhoneNum_;
}
- (void) setHasPhoneNum:(BOOL) _value_ {
  hasPhoneNum_ = !!_value_;
}
@synthesize phoneNum;
- (BOOL) hasVcode {
  return !!hasVcode_;
}
- (void) setHasVcode:(BOOL) _value_ {
  hasVcode_ = !!_value_;
}
@synthesize vcode;
- (BOOL) hasMd5Pwd {
  return !!hasMd5Pwd_;
}
- (void) setHasMd5Pwd:(BOOL) _value_ {
  hasMd5Pwd_ = !!_value_;
}
@synthesize md5Pwd;
- (instancetype) init {
  if ((self = [super init])) {
    self.reqType = 0;
    self.phoneNum = @"";
    self.vcode = @"";
    self.md5Pwd = @"";
  }
  return self;
}
static PhoneNumRegAndResetPwdReq* defaultPhoneNumRegAndResetPwdReqInstance = nil;
+ (void) initialize {
  if (self == [PhoneNumRegAndResetPwdReq class]) {
    defaultPhoneNumRegAndResetPwdReqInstance = [[PhoneNumRegAndResetPwdReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPhoneNumRegAndResetPwdReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPhoneNumRegAndResetPwdReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasReqType) {
    return NO;
  }
  if (!self.hasPhoneNum) {
    return NO;
  }
  if (!self.hasVcode) {
    return NO;
  }
  if (!self.hasMd5Pwd) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReqType) {
    [output writeUInt32:1 value:self.reqType];
  }
  if (self.hasPhoneNum) {
    [output writeString:2 value:self.phoneNum];
  }
  if (self.hasVcode) {
    [output writeString:3 value:self.vcode];
  }
  if (self.hasMd5Pwd) {
    [output writeString:4 value:self.md5Pwd];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReqType) {
    size_ += computeUInt32Size(1, self.reqType);
  }
  if (self.hasPhoneNum) {
    size_ += computeStringSize(2, self.phoneNum);
  }
  if (self.hasVcode) {
    size_ += computeStringSize(3, self.vcode);
  }
  if (self.hasMd5Pwd) {
    size_ += computeStringSize(4, self.md5Pwd);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PhoneNumRegAndResetPwdReq*) parseFromData:(NSData*) data {
  return (PhoneNumRegAndResetPwdReq*)[[[PhoneNumRegAndResetPwdReq builder] mergeFromData:data] build];
}
+ (PhoneNumRegAndResetPwdReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneNumRegAndResetPwdReq*)[[[PhoneNumRegAndResetPwdReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PhoneNumRegAndResetPwdReq*) parseFromInputStream:(NSInputStream*) input {
  return (PhoneNumRegAndResetPwdReq*)[[[PhoneNumRegAndResetPwdReq builder] mergeFromInputStream:input] build];
}
+ (PhoneNumRegAndResetPwdReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneNumRegAndResetPwdReq*)[[[PhoneNumRegAndResetPwdReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneNumRegAndResetPwdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PhoneNumRegAndResetPwdReq*)[[[PhoneNumRegAndResetPwdReq builder] mergeFromCodedInputStream:input] build];
}
+ (PhoneNumRegAndResetPwdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneNumRegAndResetPwdReq*)[[[PhoneNumRegAndResetPwdReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneNumRegAndResetPwdReqBuilder*) builder {
  return [[PhoneNumRegAndResetPwdReqBuilder alloc] init];
}
+ (PhoneNumRegAndResetPwdReqBuilder*) builderWithPrototype:(PhoneNumRegAndResetPwdReq*) prototype {
  return [[PhoneNumRegAndResetPwdReq builder] mergeFrom:prototype];
}
- (PhoneNumRegAndResetPwdReqBuilder*) builder {
  return [PhoneNumRegAndResetPwdReq builder];
}
- (PhoneNumRegAndResetPwdReqBuilder*) toBuilder {
  return [PhoneNumRegAndResetPwdReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReqType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqType", [NSNumber numberWithInteger:self.reqType]];
  }
  if (self.hasPhoneNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phoneNum", self.phoneNum];
  }
  if (self.hasVcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vcode", self.vcode];
  }
  if (self.hasMd5Pwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"md5Pwd", self.md5Pwd];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasReqType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.reqType] forKey: @"reqType"];
  }
  if (self.hasPhoneNum) {
    [dictionary setObject: self.phoneNum forKey: @"phoneNum"];
  }
  if (self.hasVcode) {
    [dictionary setObject: self.vcode forKey: @"vcode"];
  }
  if (self.hasMd5Pwd) {
    [dictionary setObject: self.md5Pwd forKey: @"md5Pwd"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PhoneNumRegAndResetPwdReq class]]) {
    return NO;
  }
  PhoneNumRegAndResetPwdReq *otherMessage = other;
  return
      self.hasReqType == otherMessage.hasReqType &&
      (!self.hasReqType || self.reqType == otherMessage.reqType) &&
      self.hasPhoneNum == otherMessage.hasPhoneNum &&
      (!self.hasPhoneNum || [self.phoneNum isEqual:otherMessage.phoneNum]) &&
      self.hasVcode == otherMessage.hasVcode &&
      (!self.hasVcode || [self.vcode isEqual:otherMessage.vcode]) &&
      self.hasMd5Pwd == otherMessage.hasMd5Pwd &&
      (!self.hasMd5Pwd || [self.md5Pwd isEqual:otherMessage.md5Pwd]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasReqType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.reqType] hash];
  }
  if (self.hasPhoneNum) {
    hashCode = hashCode * 31 + [self.phoneNum hash];
  }
  if (self.hasVcode) {
    hashCode = hashCode * 31 + [self.vcode hash];
  }
  if (self.hasMd5Pwd) {
    hashCode = hashCode * 31 + [self.md5Pwd hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PhoneNumRegAndResetPwdReqBuilder()
@property (strong) PhoneNumRegAndResetPwdReq* resultPhoneNumRegAndResetPwdReq;
@end

@implementation PhoneNumRegAndResetPwdReqBuilder
@synthesize resultPhoneNumRegAndResetPwdReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPhoneNumRegAndResetPwdReq = [[PhoneNumRegAndResetPwdReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPhoneNumRegAndResetPwdReq;
}
- (PhoneNumRegAndResetPwdReqBuilder*) clear {
  self.resultPhoneNumRegAndResetPwdReq = [[PhoneNumRegAndResetPwdReq alloc] init];
  return self;
}
- (PhoneNumRegAndResetPwdReqBuilder*) clone {
  return [PhoneNumRegAndResetPwdReq builderWithPrototype:resultPhoneNumRegAndResetPwdReq];
}
- (PhoneNumRegAndResetPwdReq*) defaultInstance {
  return [PhoneNumRegAndResetPwdReq defaultInstance];
}
- (PhoneNumRegAndResetPwdReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PhoneNumRegAndResetPwdReq*) buildPartial {
  PhoneNumRegAndResetPwdReq* returnMe = resultPhoneNumRegAndResetPwdReq;
  self.resultPhoneNumRegAndResetPwdReq = nil;
  return returnMe;
}
- (PhoneNumRegAndResetPwdReqBuilder*) mergeFrom:(PhoneNumRegAndResetPwdReq*) other {
  if (other == [PhoneNumRegAndResetPwdReq defaultInstance]) {
    return self;
  }
  if (other.hasReqType) {
    [self setReqType:other.reqType];
  }
  if (other.hasPhoneNum) {
    [self setPhoneNum:other.phoneNum];
  }
  if (other.hasVcode) {
    [self setVcode:other.vcode];
  }
  if (other.hasMd5Pwd) {
    [self setMd5Pwd:other.md5Pwd];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PhoneNumRegAndResetPwdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PhoneNumRegAndResetPwdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setReqType:[input readUInt32]];
        break;
      }
      case 18: {
        [self setPhoneNum:[input readString]];
        break;
      }
      case 26: {
        [self setVcode:[input readString]];
        break;
      }
      case 34: {
        [self setMd5Pwd:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasReqType {
  return resultPhoneNumRegAndResetPwdReq.hasReqType;
}
- (UInt32) reqType {
  return resultPhoneNumRegAndResetPwdReq.reqType;
}
- (PhoneNumRegAndResetPwdReqBuilder*) setReqType:(UInt32) value {
  resultPhoneNumRegAndResetPwdReq.hasReqType = YES;
  resultPhoneNumRegAndResetPwdReq.reqType = value;
  return self;
}
- (PhoneNumRegAndResetPwdReqBuilder*) clearReqType {
  resultPhoneNumRegAndResetPwdReq.hasReqType = NO;
  resultPhoneNumRegAndResetPwdReq.reqType = 0;
  return self;
}
- (BOOL) hasPhoneNum {
  return resultPhoneNumRegAndResetPwdReq.hasPhoneNum;
}
- (NSString*) phoneNum {
  return resultPhoneNumRegAndResetPwdReq.phoneNum;
}
- (PhoneNumRegAndResetPwdReqBuilder*) setPhoneNum:(NSString*) value {
  resultPhoneNumRegAndResetPwdReq.hasPhoneNum = YES;
  resultPhoneNumRegAndResetPwdReq.phoneNum = value;
  return self;
}
- (PhoneNumRegAndResetPwdReqBuilder*) clearPhoneNum {
  resultPhoneNumRegAndResetPwdReq.hasPhoneNum = NO;
  resultPhoneNumRegAndResetPwdReq.phoneNum = @"";
  return self;
}
- (BOOL) hasVcode {
  return resultPhoneNumRegAndResetPwdReq.hasVcode;
}
- (NSString*) vcode {
  return resultPhoneNumRegAndResetPwdReq.vcode;
}
- (PhoneNumRegAndResetPwdReqBuilder*) setVcode:(NSString*) value {
  resultPhoneNumRegAndResetPwdReq.hasVcode = YES;
  resultPhoneNumRegAndResetPwdReq.vcode = value;
  return self;
}
- (PhoneNumRegAndResetPwdReqBuilder*) clearVcode {
  resultPhoneNumRegAndResetPwdReq.hasVcode = NO;
  resultPhoneNumRegAndResetPwdReq.vcode = @"";
  return self;
}
- (BOOL) hasMd5Pwd {
  return resultPhoneNumRegAndResetPwdReq.hasMd5Pwd;
}
- (NSString*) md5Pwd {
  return resultPhoneNumRegAndResetPwdReq.md5Pwd;
}
- (PhoneNumRegAndResetPwdReqBuilder*) setMd5Pwd:(NSString*) value {
  resultPhoneNumRegAndResetPwdReq.hasMd5Pwd = YES;
  resultPhoneNumRegAndResetPwdReq.md5Pwd = value;
  return self;
}
- (PhoneNumRegAndResetPwdReqBuilder*) clearMd5Pwd {
  resultPhoneNumRegAndResetPwdReq.hasMd5Pwd = NO;
  resultPhoneNumRegAndResetPwdReq.md5Pwd = @"";
  return self;
}
@end

@interface PhoneNumRegAndResetPwdRes ()
@property (strong) LoginedRegUser* loginedUser;
@end

@implementation PhoneNumRegAndResetPwdRes

- (BOOL) hasLoginedUser {
  return !!hasLoginedUser_;
}
- (void) setHasLoginedUser:(BOOL) _value_ {
  hasLoginedUser_ = !!_value_;
}
@synthesize loginedUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.loginedUser = [LoginedRegUser defaultInstance];
  }
  return self;
}
static PhoneNumRegAndResetPwdRes* defaultPhoneNumRegAndResetPwdResInstance = nil;
+ (void) initialize {
  if (self == [PhoneNumRegAndResetPwdRes class]) {
    defaultPhoneNumRegAndResetPwdResInstance = [[PhoneNumRegAndResetPwdRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPhoneNumRegAndResetPwdResInstance;
}
- (instancetype) defaultInstance {
  return defaultPhoneNumRegAndResetPwdResInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLoginedUser) {
    [output writeMessage:1 value:self.loginedUser];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLoginedUser) {
    size_ += computeMessageSize(1, self.loginedUser);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PhoneNumRegAndResetPwdRes*) parseFromData:(NSData*) data {
  return (PhoneNumRegAndResetPwdRes*)[[[PhoneNumRegAndResetPwdRes builder] mergeFromData:data] build];
}
+ (PhoneNumRegAndResetPwdRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneNumRegAndResetPwdRes*)[[[PhoneNumRegAndResetPwdRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PhoneNumRegAndResetPwdRes*) parseFromInputStream:(NSInputStream*) input {
  return (PhoneNumRegAndResetPwdRes*)[[[PhoneNumRegAndResetPwdRes builder] mergeFromInputStream:input] build];
}
+ (PhoneNumRegAndResetPwdRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneNumRegAndResetPwdRes*)[[[PhoneNumRegAndResetPwdRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneNumRegAndResetPwdRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PhoneNumRegAndResetPwdRes*)[[[PhoneNumRegAndResetPwdRes builder] mergeFromCodedInputStream:input] build];
}
+ (PhoneNumRegAndResetPwdRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PhoneNumRegAndResetPwdRes*)[[[PhoneNumRegAndResetPwdRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PhoneNumRegAndResetPwdResBuilder*) builder {
  return [[PhoneNumRegAndResetPwdResBuilder alloc] init];
}
+ (PhoneNumRegAndResetPwdResBuilder*) builderWithPrototype:(PhoneNumRegAndResetPwdRes*) prototype {
  return [[PhoneNumRegAndResetPwdRes builder] mergeFrom:prototype];
}
- (PhoneNumRegAndResetPwdResBuilder*) builder {
  return [PhoneNumRegAndResetPwdRes builder];
}
- (PhoneNumRegAndResetPwdResBuilder*) toBuilder {
  return [PhoneNumRegAndResetPwdRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLoginedUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginedUser"];
    [self.loginedUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLoginedUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginedUser storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginedUser"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PhoneNumRegAndResetPwdRes class]]) {
    return NO;
  }
  PhoneNumRegAndResetPwdRes *otherMessage = other;
  return
      self.hasLoginedUser == otherMessage.hasLoginedUser &&
      (!self.hasLoginedUser || [self.loginedUser isEqual:otherMessage.loginedUser]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLoginedUser) {
    hashCode = hashCode * 31 + [self.loginedUser hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PhoneNumRegAndResetPwdResBuilder()
@property (strong) PhoneNumRegAndResetPwdRes* resultPhoneNumRegAndResetPwdRes;
@end

@implementation PhoneNumRegAndResetPwdResBuilder
@synthesize resultPhoneNumRegAndResetPwdRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPhoneNumRegAndResetPwdRes = [[PhoneNumRegAndResetPwdRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPhoneNumRegAndResetPwdRes;
}
- (PhoneNumRegAndResetPwdResBuilder*) clear {
  self.resultPhoneNumRegAndResetPwdRes = [[PhoneNumRegAndResetPwdRes alloc] init];
  return self;
}
- (PhoneNumRegAndResetPwdResBuilder*) clone {
  return [PhoneNumRegAndResetPwdRes builderWithPrototype:resultPhoneNumRegAndResetPwdRes];
}
- (PhoneNumRegAndResetPwdRes*) defaultInstance {
  return [PhoneNumRegAndResetPwdRes defaultInstance];
}
- (PhoneNumRegAndResetPwdRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PhoneNumRegAndResetPwdRes*) buildPartial {
  PhoneNumRegAndResetPwdRes* returnMe = resultPhoneNumRegAndResetPwdRes;
  self.resultPhoneNumRegAndResetPwdRes = nil;
  return returnMe;
}
- (PhoneNumRegAndResetPwdResBuilder*) mergeFrom:(PhoneNumRegAndResetPwdRes*) other {
  if (other == [PhoneNumRegAndResetPwdRes defaultInstance]) {
    return self;
  }
  if (other.hasLoginedUser) {
    [self mergeLoginedUser:other.loginedUser];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PhoneNumRegAndResetPwdResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PhoneNumRegAndResetPwdResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        LoginedRegUserBuilder* subBuilder = [LoginedRegUser builder];
        if (self.hasLoginedUser) {
          [subBuilder mergeFrom:self.loginedUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginedUser:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLoginedUser {
  return resultPhoneNumRegAndResetPwdRes.hasLoginedUser;
}
- (LoginedRegUser*) loginedUser {
  return resultPhoneNumRegAndResetPwdRes.loginedUser;
}
- (PhoneNumRegAndResetPwdResBuilder*) setLoginedUser:(LoginedRegUser*) value {
  resultPhoneNumRegAndResetPwdRes.hasLoginedUser = YES;
  resultPhoneNumRegAndResetPwdRes.loginedUser = value;
  return self;
}
- (PhoneNumRegAndResetPwdResBuilder*) setLoginedUserBuilder:(LoginedRegUserBuilder*) builderForValue {
  return [self setLoginedUser:[builderForValue build]];
}
- (PhoneNumRegAndResetPwdResBuilder*) mergeLoginedUser:(LoginedRegUser*) value {
  if (resultPhoneNumRegAndResetPwdRes.hasLoginedUser &&
      resultPhoneNumRegAndResetPwdRes.loginedUser != [LoginedRegUser defaultInstance]) {
    resultPhoneNumRegAndResetPwdRes.loginedUser =
      [[[LoginedRegUser builderWithPrototype:resultPhoneNumRegAndResetPwdRes.loginedUser] mergeFrom:value] buildPartial];
  } else {
    resultPhoneNumRegAndResetPwdRes.loginedUser = value;
  }
  resultPhoneNumRegAndResetPwdRes.hasLoginedUser = YES;
  return self;
}
- (PhoneNumRegAndResetPwdResBuilder*) clearLoginedUser {
  resultPhoneNumRegAndResetPwdRes.hasLoginedUser = NO;
  resultPhoneNumRegAndResetPwdRes.loginedUser = [LoginedRegUser defaultInstance];
  return self;
}
@end

@interface ResetPwdReq ()
@property (strong) NSString* oldMd5Pwd;
@property (strong) NS_RETURNS_NOT_RETAINED NSString* newMd5Pwd;
@end

@implementation ResetPwdReq

- (BOOL) hasOldMd5Pwd {
  return !!hasOldMd5Pwd_;
}
- (void) setHasOldMd5Pwd:(BOOL) _value_ {
  hasOldMd5Pwd_ = !!_value_;
}
@synthesize oldMd5Pwd;
- (BOOL) hasNewMd5Pwd {
  return !!hasNewMd5Pwd_;
}
- (void) setHasNewMd5Pwd:(BOOL) _value_ {
  hasNewMd5Pwd_ = !!_value_;
}
@synthesize newMd5Pwd;
- (instancetype) init {
  if ((self = [super init])) {
    self.oldMd5Pwd = @"";
    self.newMd5Pwd = @"";
  }
  return self;
}
static ResetPwdReq* defaultResetPwdReqInstance = nil;
+ (void) initialize {
  if (self == [ResetPwdReq class]) {
    defaultResetPwdReqInstance = [[ResetPwdReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultResetPwdReqInstance;
}
- (instancetype) defaultInstance {
  return defaultResetPwdReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOldMd5Pwd) {
    return NO;
  }
  if (!self.hasNewMd5Pwd) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOldMd5Pwd) {
    [output writeString:1 value:self.oldMd5Pwd];
  }
  if (self.hasNewMd5Pwd) {
    [output writeString:3 value:self.newMd5Pwd];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOldMd5Pwd) {
    size_ += computeStringSize(1, self.oldMd5Pwd);
  }
  if (self.hasNewMd5Pwd) {
    size_ += computeStringSize(3, self.newMd5Pwd);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ResetPwdReq*) parseFromData:(NSData*) data {
  return (ResetPwdReq*)[[[ResetPwdReq builder] mergeFromData:data] build];
}
+ (ResetPwdReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResetPwdReq*)[[[ResetPwdReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ResetPwdReq*) parseFromInputStream:(NSInputStream*) input {
  return (ResetPwdReq*)[[[ResetPwdReq builder] mergeFromInputStream:input] build];
}
+ (ResetPwdReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResetPwdReq*)[[[ResetPwdReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResetPwdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ResetPwdReq*)[[[ResetPwdReq builder] mergeFromCodedInputStream:input] build];
}
+ (ResetPwdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ResetPwdReq*)[[[ResetPwdReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ResetPwdReqBuilder*) builder {
  return [[ResetPwdReqBuilder alloc] init];
}
+ (ResetPwdReqBuilder*) builderWithPrototype:(ResetPwdReq*) prototype {
  return [[ResetPwdReq builder] mergeFrom:prototype];
}
- (ResetPwdReqBuilder*) builder {
  return [ResetPwdReq builder];
}
- (ResetPwdReqBuilder*) toBuilder {
  return [ResetPwdReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOldMd5Pwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oldMd5Pwd", self.oldMd5Pwd];
  }
  if (self.hasNewMd5Pwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"newMd5Pwd", self.newMd5Pwd];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOldMd5Pwd) {
    [dictionary setObject: self.oldMd5Pwd forKey: @"oldMd5Pwd"];
  }
  if (self.hasNewMd5Pwd) {
    [dictionary setObject: self.newMd5Pwd forKey: @"newMd5Pwd"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ResetPwdReq class]]) {
    return NO;
  }
  ResetPwdReq *otherMessage = other;
  return
      self.hasOldMd5Pwd == otherMessage.hasOldMd5Pwd &&
      (!self.hasOldMd5Pwd || [self.oldMd5Pwd isEqual:otherMessage.oldMd5Pwd]) &&
      self.hasNewMd5Pwd == otherMessage.hasNewMd5Pwd &&
      (!self.hasNewMd5Pwd || [self.newMd5Pwd isEqual:otherMessage.newMd5Pwd]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOldMd5Pwd) {
    hashCode = hashCode * 31 + [self.oldMd5Pwd hash];
  }
  if (self.hasNewMd5Pwd) {
    hashCode = hashCode * 31 + [self.newMd5Pwd hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ResetPwdReqBuilder()
@property (strong) ResetPwdReq* resultResetPwdReq;
@end

@implementation ResetPwdReqBuilder
@synthesize resultResetPwdReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultResetPwdReq = [[ResetPwdReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultResetPwdReq;
}
- (ResetPwdReqBuilder*) clear {
  self.resultResetPwdReq = [[ResetPwdReq alloc] init];
  return self;
}
- (ResetPwdReqBuilder*) clone {
  return [ResetPwdReq builderWithPrototype:resultResetPwdReq];
}
- (ResetPwdReq*) defaultInstance {
  return [ResetPwdReq defaultInstance];
}
- (ResetPwdReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ResetPwdReq*) buildPartial {
  ResetPwdReq* returnMe = resultResetPwdReq;
  self.resultResetPwdReq = nil;
  return returnMe;
}
- (ResetPwdReqBuilder*) mergeFrom:(ResetPwdReq*) other {
  if (other == [ResetPwdReq defaultInstance]) {
    return self;
  }
  if (other.hasOldMd5Pwd) {
    [self setOldMd5Pwd:other.oldMd5Pwd];
  }
  if (other.hasNewMd5Pwd) {
    [self setNewMd5Pwd:other.newMd5Pwd];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ResetPwdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ResetPwdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setOldMd5Pwd:[input readString]];
        break;
      }
      case 26: {
        [self setNewMd5Pwd:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOldMd5Pwd {
  return resultResetPwdReq.hasOldMd5Pwd;
}
- (NSString*) oldMd5Pwd {
  return resultResetPwdReq.oldMd5Pwd;
}
- (ResetPwdReqBuilder*) setOldMd5Pwd:(NSString*) value {
  resultResetPwdReq.hasOldMd5Pwd = YES;
  resultResetPwdReq.oldMd5Pwd = value;
  return self;
}
- (ResetPwdReqBuilder*) clearOldMd5Pwd {
  resultResetPwdReq.hasOldMd5Pwd = NO;
  resultResetPwdReq.oldMd5Pwd = @"";
  return self;
}
- (BOOL) hasNewMd5Pwd {
  return resultResetPwdReq.hasNewMd5Pwd;
}
- (NSString*) newMd5Pwd {
  return resultResetPwdReq.newMd5Pwd;
}
- (ResetPwdReqBuilder*) setNewMd5Pwd:(NSString*) value {
  resultResetPwdReq.hasNewMd5Pwd = YES;
  resultResetPwdReq.newMd5Pwd = value;
  return self;
}
- (ResetPwdReqBuilder*) clearNewMd5Pwd {
  resultResetPwdReq.hasNewMd5Pwd = NO;
  resultResetPwdReq.newMd5Pwd = @"";
  return self;
}
@end

@interface RegUserLoginReq ()
@property (strong) NSString* u;
@property (strong) NSString* md5Pwd;
@end

@implementation RegUserLoginReq

- (BOOL) hasU {
  return !!hasU_;
}
- (void) setHasU:(BOOL) _value_ {
  hasU_ = !!_value_;
}
@synthesize u;
- (BOOL) hasMd5Pwd {
  return !!hasMd5Pwd_;
}
- (void) setHasMd5Pwd:(BOOL) _value_ {
  hasMd5Pwd_ = !!_value_;
}
@synthesize md5Pwd;
- (instancetype) init {
  if ((self = [super init])) {
    self.u = @"";
    self.md5Pwd = @"";
  }
  return self;
}
static RegUserLoginReq* defaultRegUserLoginReqInstance = nil;
+ (void) initialize {
  if (self == [RegUserLoginReq class]) {
    defaultRegUserLoginReqInstance = [[RegUserLoginReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRegUserLoginReqInstance;
}
- (instancetype) defaultInstance {
  return defaultRegUserLoginReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasU) {
    return NO;
  }
  if (!self.hasMd5Pwd) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasU) {
    [output writeString:1 value:self.u];
  }
  if (self.hasMd5Pwd) {
    [output writeString:3 value:self.md5Pwd];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasU) {
    size_ += computeStringSize(1, self.u);
  }
  if (self.hasMd5Pwd) {
    size_ += computeStringSize(3, self.md5Pwd);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RegUserLoginReq*) parseFromData:(NSData*) data {
  return (RegUserLoginReq*)[[[RegUserLoginReq builder] mergeFromData:data] build];
}
+ (RegUserLoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegUserLoginReq*)[[[RegUserLoginReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegUserLoginReq*) parseFromInputStream:(NSInputStream*) input {
  return (RegUserLoginReq*)[[[RegUserLoginReq builder] mergeFromInputStream:input] build];
}
+ (RegUserLoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegUserLoginReq*)[[[RegUserLoginReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegUserLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegUserLoginReq*)[[[RegUserLoginReq builder] mergeFromCodedInputStream:input] build];
}
+ (RegUserLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegUserLoginReq*)[[[RegUserLoginReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegUserLoginReqBuilder*) builder {
  return [[RegUserLoginReqBuilder alloc] init];
}
+ (RegUserLoginReqBuilder*) builderWithPrototype:(RegUserLoginReq*) prototype {
  return [[RegUserLoginReq builder] mergeFrom:prototype];
}
- (RegUserLoginReqBuilder*) builder {
  return [RegUserLoginReq builder];
}
- (RegUserLoginReqBuilder*) toBuilder {
  return [RegUserLoginReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasU) {
    [output appendFormat:@"%@%@: %@\n", indent, @"u", self.u];
  }
  if (self.hasMd5Pwd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"md5Pwd", self.md5Pwd];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasU) {
    [dictionary setObject: self.u forKey: @"u"];
  }
  if (self.hasMd5Pwd) {
    [dictionary setObject: self.md5Pwd forKey: @"md5Pwd"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RegUserLoginReq class]]) {
    return NO;
  }
  RegUserLoginReq *otherMessage = other;
  return
      self.hasU == otherMessage.hasU &&
      (!self.hasU || [self.u isEqual:otherMessage.u]) &&
      self.hasMd5Pwd == otherMessage.hasMd5Pwd &&
      (!self.hasMd5Pwd || [self.md5Pwd isEqual:otherMessage.md5Pwd]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasU) {
    hashCode = hashCode * 31 + [self.u hash];
  }
  if (self.hasMd5Pwd) {
    hashCode = hashCode * 31 + [self.md5Pwd hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RegUserLoginReqBuilder()
@property (strong) RegUserLoginReq* resultRegUserLoginReq;
@end

@implementation RegUserLoginReqBuilder
@synthesize resultRegUserLoginReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRegUserLoginReq = [[RegUserLoginReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRegUserLoginReq;
}
- (RegUserLoginReqBuilder*) clear {
  self.resultRegUserLoginReq = [[RegUserLoginReq alloc] init];
  return self;
}
- (RegUserLoginReqBuilder*) clone {
  return [RegUserLoginReq builderWithPrototype:resultRegUserLoginReq];
}
- (RegUserLoginReq*) defaultInstance {
  return [RegUserLoginReq defaultInstance];
}
- (RegUserLoginReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegUserLoginReq*) buildPartial {
  RegUserLoginReq* returnMe = resultRegUserLoginReq;
  self.resultRegUserLoginReq = nil;
  return returnMe;
}
- (RegUserLoginReqBuilder*) mergeFrom:(RegUserLoginReq*) other {
  if (other == [RegUserLoginReq defaultInstance]) {
    return self;
  }
  if (other.hasU) {
    [self setU:other.u];
  }
  if (other.hasMd5Pwd) {
    [self setMd5Pwd:other.md5Pwd];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegUserLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegUserLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setU:[input readString]];
        break;
      }
      case 26: {
        [self setMd5Pwd:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasU {
  return resultRegUserLoginReq.hasU;
}
- (NSString*) u {
  return resultRegUserLoginReq.u;
}
- (RegUserLoginReqBuilder*) setU:(NSString*) value {
  resultRegUserLoginReq.hasU = YES;
  resultRegUserLoginReq.u = value;
  return self;
}
- (RegUserLoginReqBuilder*) clearU {
  resultRegUserLoginReq.hasU = NO;
  resultRegUserLoginReq.u = @"";
  return self;
}
- (BOOL) hasMd5Pwd {
  return resultRegUserLoginReq.hasMd5Pwd;
}
- (NSString*) md5Pwd {
  return resultRegUserLoginReq.md5Pwd;
}
- (RegUserLoginReqBuilder*) setMd5Pwd:(NSString*) value {
  resultRegUserLoginReq.hasMd5Pwd = YES;
  resultRegUserLoginReq.md5Pwd = value;
  return self;
}
- (RegUserLoginReqBuilder*) clearMd5Pwd {
  resultRegUserLoginReq.hasMd5Pwd = NO;
  resultRegUserLoginReq.md5Pwd = @"";
  return self;
}
@end

@interface RegUserLoginRes ()
@property (strong) LoginedRegUser* loginedUser;
@end

@implementation RegUserLoginRes

- (BOOL) hasLoginedUser {
  return !!hasLoginedUser_;
}
- (void) setHasLoginedUser:(BOOL) _value_ {
  hasLoginedUser_ = !!_value_;
}
@synthesize loginedUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.loginedUser = [LoginedRegUser defaultInstance];
  }
  return self;
}
static RegUserLoginRes* defaultRegUserLoginResInstance = nil;
+ (void) initialize {
  if (self == [RegUserLoginRes class]) {
    defaultRegUserLoginResInstance = [[RegUserLoginRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRegUserLoginResInstance;
}
- (instancetype) defaultInstance {
  return defaultRegUserLoginResInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLoginedUser) {
    [output writeMessage:1 value:self.loginedUser];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLoginedUser) {
    size_ += computeMessageSize(1, self.loginedUser);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RegUserLoginRes*) parseFromData:(NSData*) data {
  return (RegUserLoginRes*)[[[RegUserLoginRes builder] mergeFromData:data] build];
}
+ (RegUserLoginRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegUserLoginRes*)[[[RegUserLoginRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RegUserLoginRes*) parseFromInputStream:(NSInputStream*) input {
  return (RegUserLoginRes*)[[[RegUserLoginRes builder] mergeFromInputStream:input] build];
}
+ (RegUserLoginRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegUserLoginRes*)[[[RegUserLoginRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegUserLoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RegUserLoginRes*)[[[RegUserLoginRes builder] mergeFromCodedInputStream:input] build];
}
+ (RegUserLoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RegUserLoginRes*)[[[RegUserLoginRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RegUserLoginResBuilder*) builder {
  return [[RegUserLoginResBuilder alloc] init];
}
+ (RegUserLoginResBuilder*) builderWithPrototype:(RegUserLoginRes*) prototype {
  return [[RegUserLoginRes builder] mergeFrom:prototype];
}
- (RegUserLoginResBuilder*) builder {
  return [RegUserLoginRes builder];
}
- (RegUserLoginResBuilder*) toBuilder {
  return [RegUserLoginRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLoginedUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginedUser"];
    [self.loginedUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLoginedUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginedUser storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginedUser"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RegUserLoginRes class]]) {
    return NO;
  }
  RegUserLoginRes *otherMessage = other;
  return
      self.hasLoginedUser == otherMessage.hasLoginedUser &&
      (!self.hasLoginedUser || [self.loginedUser isEqual:otherMessage.loginedUser]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLoginedUser) {
    hashCode = hashCode * 31 + [self.loginedUser hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RegUserLoginResBuilder()
@property (strong) RegUserLoginRes* resultRegUserLoginRes;
@end

@implementation RegUserLoginResBuilder
@synthesize resultRegUserLoginRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRegUserLoginRes = [[RegUserLoginRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRegUserLoginRes;
}
- (RegUserLoginResBuilder*) clear {
  self.resultRegUserLoginRes = [[RegUserLoginRes alloc] init];
  return self;
}
- (RegUserLoginResBuilder*) clone {
  return [RegUserLoginRes builderWithPrototype:resultRegUserLoginRes];
}
- (RegUserLoginRes*) defaultInstance {
  return [RegUserLoginRes defaultInstance];
}
- (RegUserLoginRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RegUserLoginRes*) buildPartial {
  RegUserLoginRes* returnMe = resultRegUserLoginRes;
  self.resultRegUserLoginRes = nil;
  return returnMe;
}
- (RegUserLoginResBuilder*) mergeFrom:(RegUserLoginRes*) other {
  if (other == [RegUserLoginRes defaultInstance]) {
    return self;
  }
  if (other.hasLoginedUser) {
    [self mergeLoginedUser:other.loginedUser];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RegUserLoginResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RegUserLoginResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        LoginedRegUserBuilder* subBuilder = [LoginedRegUser builder];
        if (self.hasLoginedUser) {
          [subBuilder mergeFrom:self.loginedUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginedUser:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLoginedUser {
  return resultRegUserLoginRes.hasLoginedUser;
}
- (LoginedRegUser*) loginedUser {
  return resultRegUserLoginRes.loginedUser;
}
- (RegUserLoginResBuilder*) setLoginedUser:(LoginedRegUser*) value {
  resultRegUserLoginRes.hasLoginedUser = YES;
  resultRegUserLoginRes.loginedUser = value;
  return self;
}
- (RegUserLoginResBuilder*) setLoginedUserBuilder:(LoginedRegUserBuilder*) builderForValue {
  return [self setLoginedUser:[builderForValue build]];
}
- (RegUserLoginResBuilder*) mergeLoginedUser:(LoginedRegUser*) value {
  if (resultRegUserLoginRes.hasLoginedUser &&
      resultRegUserLoginRes.loginedUser != [LoginedRegUser defaultInstance]) {
    resultRegUserLoginRes.loginedUser =
      [[[LoginedRegUser builderWithPrototype:resultRegUserLoginRes.loginedUser] mergeFrom:value] buildPartial];
  } else {
    resultRegUserLoginRes.loginedUser = value;
  }
  resultRegUserLoginRes.hasLoginedUser = YES;
  return self;
}
- (RegUserLoginResBuilder*) clearLoginedUser {
  resultRegUserLoginRes.hasLoginedUser = NO;
  resultRegUserLoginRes.loginedUser = [LoginedRegUser defaultInstance];
  return self;
}
@end

@interface SysMsg ()
@property UInt32 id;
@property (strong) NSString* title;
@property (strong) NSString* content;
@property (strong) NSString* sT;
@property UInt32 isRead;
@end

@implementation SysMsg

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasST {
  return !!hasST_;
}
- (void) setHasST:(BOOL) _value_ {
  hasST_ = !!_value_;
}
@synthesize sT;
- (BOOL) hasIsRead {
  return !!hasIsRead_;
}
- (void) setHasIsRead:(BOOL) _value_ {
  hasIsRead_ = !!_value_;
}
@synthesize isRead;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.title = @"";
    self.content = @"";
    self.sT = @"";
    self.isRead = 0;
  }
  return self;
}
static SysMsg* defaultSysMsgInstance = nil;
+ (void) initialize {
  if (self == [SysMsg class]) {
    defaultSysMsgInstance = [[SysMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSysMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultSysMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasTitle) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasTitle) {
    [output writeString:2 value:self.title];
  }
  if (self.hasContent) {
    [output writeString:3 value:self.content];
  }
  if (self.hasST) {
    [output writeString:4 value:self.sT];
  }
  if (self.hasIsRead) {
    [output writeUInt32:5 value:self.isRead];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(2, self.title);
  }
  if (self.hasContent) {
    size_ += computeStringSize(3, self.content);
  }
  if (self.hasST) {
    size_ += computeStringSize(4, self.sT);
  }
  if (self.hasIsRead) {
    size_ += computeUInt32Size(5, self.isRead);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SysMsg*) parseFromData:(NSData*) data {
  return (SysMsg*)[[[SysMsg builder] mergeFromData:data] build];
}
+ (SysMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsg*)[[[SysMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SysMsg*) parseFromInputStream:(NSInputStream*) input {
  return (SysMsg*)[[[SysMsg builder] mergeFromInputStream:input] build];
}
+ (SysMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsg*)[[[SysMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SysMsg*)[[[SysMsg builder] mergeFromCodedInputStream:input] build];
}
+ (SysMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsg*)[[[SysMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsgBuilder*) builder {
  return [[SysMsgBuilder alloc] init];
}
+ (SysMsgBuilder*) builderWithPrototype:(SysMsg*) prototype {
  return [[SysMsg builder] mergeFrom:prototype];
}
- (SysMsgBuilder*) builder {
  return [SysMsg builder];
}
- (SysMsgBuilder*) toBuilder {
  return [SysMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasST) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sT", self.sT];
  }
  if (self.hasIsRead) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRead", [NSNumber numberWithInteger:self.isRead]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasST) {
    [dictionary setObject: self.sT forKey: @"sT"];
  }
  if (self.hasIsRead) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isRead] forKey: @"isRead"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SysMsg class]]) {
    return NO;
  }
  SysMsg *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasST == otherMessage.hasST &&
      (!self.hasST || [self.sT isEqual:otherMessage.sT]) &&
      self.hasIsRead == otherMessage.hasIsRead &&
      (!self.hasIsRead || self.isRead == otherMessage.isRead) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasST) {
    hashCode = hashCode * 31 + [self.sT hash];
  }
  if (self.hasIsRead) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isRead] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SysMsgBuilder()
@property (strong) SysMsg* resultSysMsg;
@end

@implementation SysMsgBuilder
@synthesize resultSysMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSysMsg = [[SysMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSysMsg;
}
- (SysMsgBuilder*) clear {
  self.resultSysMsg = [[SysMsg alloc] init];
  return self;
}
- (SysMsgBuilder*) clone {
  return [SysMsg builderWithPrototype:resultSysMsg];
}
- (SysMsg*) defaultInstance {
  return [SysMsg defaultInstance];
}
- (SysMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SysMsg*) buildPartial {
  SysMsg* returnMe = resultSysMsg;
  self.resultSysMsg = nil;
  return returnMe;
}
- (SysMsgBuilder*) mergeFrom:(SysMsg*) other {
  if (other == [SysMsg defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasST) {
    [self setST:other.sT];
  }
  if (other.hasIsRead) {
    [self setIsRead:other.isRead];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SysMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SysMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 18: {
        [self setTitle:[input readString]];
        break;
      }
      case 26: {
        [self setContent:[input readString]];
        break;
      }
      case 34: {
        [self setST:[input readString]];
        break;
      }
      case 40: {
        [self setIsRead:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultSysMsg.hasId;
}
- (UInt32) id {
  return resultSysMsg.id;
}
- (SysMsgBuilder*) setId:(UInt32) value {
  resultSysMsg.hasId = YES;
  resultSysMsg.id = value;
  return self;
}
- (SysMsgBuilder*) clearId {
  resultSysMsg.hasId = NO;
  resultSysMsg.id = 0;
  return self;
}
- (BOOL) hasTitle {
  return resultSysMsg.hasTitle;
}
- (NSString*) title {
  return resultSysMsg.title;
}
- (SysMsgBuilder*) setTitle:(NSString*) value {
  resultSysMsg.hasTitle = YES;
  resultSysMsg.title = value;
  return self;
}
- (SysMsgBuilder*) clearTitle {
  resultSysMsg.hasTitle = NO;
  resultSysMsg.title = @"";
  return self;
}
- (BOOL) hasContent {
  return resultSysMsg.hasContent;
}
- (NSString*) content {
  return resultSysMsg.content;
}
- (SysMsgBuilder*) setContent:(NSString*) value {
  resultSysMsg.hasContent = YES;
  resultSysMsg.content = value;
  return self;
}
- (SysMsgBuilder*) clearContent {
  resultSysMsg.hasContent = NO;
  resultSysMsg.content = @"";
  return self;
}
- (BOOL) hasST {
  return resultSysMsg.hasST;
}
- (NSString*) sT {
  return resultSysMsg.sT;
}
- (SysMsgBuilder*) setST:(NSString*) value {
  resultSysMsg.hasST = YES;
  resultSysMsg.sT = value;
  return self;
}
- (SysMsgBuilder*) clearST {
  resultSysMsg.hasST = NO;
  resultSysMsg.sT = @"";
  return self;
}
- (BOOL) hasIsRead {
  return resultSysMsg.hasIsRead;
}
- (UInt32) isRead {
  return resultSysMsg.isRead;
}
- (SysMsgBuilder*) setIsRead:(UInt32) value {
  resultSysMsg.hasIsRead = YES;
  resultSysMsg.isRead = value;
  return self;
}
- (SysMsgBuilder*) clearIsRead {
  resultSysMsg.hasIsRead = NO;
  resultSysMsg.isRead = 0;
  return self;
}
@end

@interface SysMsgListReq ()
@property UInt32 page;
@end

@implementation SysMsgListReq

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (instancetype) init {
  if ((self = [super init])) {
    self.page = 0;
  }
  return self;
}
static SysMsgListReq* defaultSysMsgListReqInstance = nil;
+ (void) initialize {
  if (self == [SysMsgListReq class]) {
    defaultSysMsgListReqInstance = [[SysMsgListReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSysMsgListReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSysMsgListReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeUInt32:1 value:self.page];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeUInt32Size(1, self.page);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SysMsgListReq*) parseFromData:(NSData*) data {
  return (SysMsgListReq*)[[[SysMsgListReq builder] mergeFromData:data] build];
}
+ (SysMsgListReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgListReq*)[[[SysMsgListReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SysMsgListReq*) parseFromInputStream:(NSInputStream*) input {
  return (SysMsgListReq*)[[[SysMsgListReq builder] mergeFromInputStream:input] build];
}
+ (SysMsgListReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgListReq*)[[[SysMsgListReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsgListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SysMsgListReq*)[[[SysMsgListReq builder] mergeFromCodedInputStream:input] build];
}
+ (SysMsgListReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgListReq*)[[[SysMsgListReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsgListReqBuilder*) builder {
  return [[SysMsgListReqBuilder alloc] init];
}
+ (SysMsgListReqBuilder*) builderWithPrototype:(SysMsgListReq*) prototype {
  return [[SysMsgListReq builder] mergeFrom:prototype];
}
- (SysMsgListReqBuilder*) builder {
  return [SysMsgListReq builder];
}
- (SysMsgListReqBuilder*) toBuilder {
  return [SysMsgListReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SysMsgListReq class]]) {
    return NO;
  }
  SysMsgListReq *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SysMsgListReqBuilder()
@property (strong) SysMsgListReq* resultSysMsgListReq;
@end

@implementation SysMsgListReqBuilder
@synthesize resultSysMsgListReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSysMsgListReq = [[SysMsgListReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSysMsgListReq;
}
- (SysMsgListReqBuilder*) clear {
  self.resultSysMsgListReq = [[SysMsgListReq alloc] init];
  return self;
}
- (SysMsgListReqBuilder*) clone {
  return [SysMsgListReq builderWithPrototype:resultSysMsgListReq];
}
- (SysMsgListReq*) defaultInstance {
  return [SysMsgListReq defaultInstance];
}
- (SysMsgListReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SysMsgListReq*) buildPartial {
  SysMsgListReq* returnMe = resultSysMsgListReq;
  self.resultSysMsgListReq = nil;
  return returnMe;
}
- (SysMsgListReqBuilder*) mergeFrom:(SysMsgListReq*) other {
  if (other == [SysMsgListReq defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SysMsgListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SysMsgListReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return resultSysMsgListReq.hasPage;
}
- (UInt32) page {
  return resultSysMsgListReq.page;
}
- (SysMsgListReqBuilder*) setPage:(UInt32) value {
  resultSysMsgListReq.hasPage = YES;
  resultSysMsgListReq.page = value;
  return self;
}
- (SysMsgListReqBuilder*) clearPage {
  resultSysMsgListReq.hasPage = NO;
  resultSysMsgListReq.page = 0;
  return self;
}
@end

@interface SysMsgListRes ()
@property UInt32 psize;
@property UInt32 page;
@property (strong) NSMutableArray<SysMsg*> * sysmsgsArray;
@property UInt32 nT;
@end

@implementation SysMsgListRes

- (BOOL) hasPsize {
  return !!hasPsize_;
}
- (void) setHasPsize:(BOOL) _value_ {
  hasPsize_ = !!_value_;
}
@synthesize psize;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
@synthesize sysmsgsArray;
@dynamic sysmsgs;
- (BOOL) hasNT {
  return !!hasNT_;
}
- (void) setHasNT:(BOOL) _value_ {
  hasNT_ = !!_value_;
}
@synthesize nT;
- (instancetype) init {
  if ((self = [super init])) {
    self.psize = 0;
    self.page = 0;
    self.nT = 0;
  }
  return self;
}
static SysMsgListRes* defaultSysMsgListResInstance = nil;
+ (void) initialize {
  if (self == [SysMsgListRes class]) {
    defaultSysMsgListResInstance = [[SysMsgListRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSysMsgListResInstance;
}
- (instancetype) defaultInstance {
  return defaultSysMsgListResInstance;
}
- (NSArray<SysMsg*> *)sysmsgs {
  return sysmsgsArray;
}
- (SysMsg*)sysmsgsAtIndex:(NSUInteger)index {
  return [sysmsgsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPsize) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  if (!self.hasNT) {
    return NO;
  }
  __block BOOL isInitsysmsgs = YES;
   [self.sysmsgs enumerateObjectsUsingBlock:^(SysMsg *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsysmsgs = NO;
      *stop = YES;
    }
  }];
  if (!isInitsysmsgs) return isInitsysmsgs;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPsize) {
    [output writeUInt32:1 value:self.psize];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.sysmsgsArray enumerateObjectsUsingBlock:^(SysMsg *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasNT) {
    [output writeUInt32:7 value:self.nT];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPsize) {
    size_ += computeUInt32Size(1, self.psize);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  [self.sysmsgsArray enumerateObjectsUsingBlock:^(SysMsg *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasNT) {
    size_ += computeUInt32Size(7, self.nT);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SysMsgListRes*) parseFromData:(NSData*) data {
  return (SysMsgListRes*)[[[SysMsgListRes builder] mergeFromData:data] build];
}
+ (SysMsgListRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgListRes*)[[[SysMsgListRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SysMsgListRes*) parseFromInputStream:(NSInputStream*) input {
  return (SysMsgListRes*)[[[SysMsgListRes builder] mergeFromInputStream:input] build];
}
+ (SysMsgListRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgListRes*)[[[SysMsgListRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsgListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SysMsgListRes*)[[[SysMsgListRes builder] mergeFromCodedInputStream:input] build];
}
+ (SysMsgListRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgListRes*)[[[SysMsgListRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsgListResBuilder*) builder {
  return [[SysMsgListResBuilder alloc] init];
}
+ (SysMsgListResBuilder*) builderWithPrototype:(SysMsgListRes*) prototype {
  return [[SysMsgListRes builder] mergeFrom:prototype];
}
- (SysMsgListResBuilder*) builder {
  return [SysMsgListRes builder];
}
- (SysMsgListResBuilder*) toBuilder {
  return [SysMsgListRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPsize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"psize", [NSNumber numberWithInteger:self.psize]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.sysmsgsArray enumerateObjectsUsingBlock:^(SysMsg *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sysmsgs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasNT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nT", [NSNumber numberWithInteger:self.nT]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPsize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.psize] forKey: @"psize"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  for (SysMsg* element in self.sysmsgsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"sysmsgs"];
  }
  if (self.hasNT) {
    [dictionary setObject: [NSNumber numberWithInteger:self.nT] forKey: @"nT"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SysMsgListRes class]]) {
    return NO;
  }
  SysMsgListRes *otherMessage = other;
  return
      self.hasPsize == otherMessage.hasPsize &&
      (!self.hasPsize || self.psize == otherMessage.psize) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.sysmsgsArray isEqualToArray:otherMessage.sysmsgsArray] &&
      self.hasNT == otherMessage.hasNT &&
      (!self.hasNT || self.nT == otherMessage.nT) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPsize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.psize] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  [self.sysmsgsArray enumerateObjectsUsingBlock:^(SysMsg *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasNT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.nT] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SysMsgListResBuilder()
@property (strong) SysMsgListRes* resultSysMsgListRes;
@end

@implementation SysMsgListResBuilder
@synthesize resultSysMsgListRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSysMsgListRes = [[SysMsgListRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSysMsgListRes;
}
- (SysMsgListResBuilder*) clear {
  self.resultSysMsgListRes = [[SysMsgListRes alloc] init];
  return self;
}
- (SysMsgListResBuilder*) clone {
  return [SysMsgListRes builderWithPrototype:resultSysMsgListRes];
}
- (SysMsgListRes*) defaultInstance {
  return [SysMsgListRes defaultInstance];
}
- (SysMsgListRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SysMsgListRes*) buildPartial {
  SysMsgListRes* returnMe = resultSysMsgListRes;
  self.resultSysMsgListRes = nil;
  return returnMe;
}
- (SysMsgListResBuilder*) mergeFrom:(SysMsgListRes*) other {
  if (other == [SysMsgListRes defaultInstance]) {
    return self;
  }
  if (other.hasPsize) {
    [self setPsize:other.psize];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.sysmsgsArray.count > 0) {
    if (resultSysMsgListRes.sysmsgsArray == nil) {
      resultSysMsgListRes.sysmsgsArray = [[NSMutableArray alloc] initWithArray:other.sysmsgsArray];
    } else {
      [resultSysMsgListRes.sysmsgsArray addObjectsFromArray:other.sysmsgsArray];
    }
  }
  if (other.hasNT) {
    [self setNT:other.nT];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SysMsgListResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SysMsgListResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPsize:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 42: {
        SysMsgBuilder* subBuilder = [SysMsg builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSysmsgs:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setNT:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPsize {
  return resultSysMsgListRes.hasPsize;
}
- (UInt32) psize {
  return resultSysMsgListRes.psize;
}
- (SysMsgListResBuilder*) setPsize:(UInt32) value {
  resultSysMsgListRes.hasPsize = YES;
  resultSysMsgListRes.psize = value;
  return self;
}
- (SysMsgListResBuilder*) clearPsize {
  resultSysMsgListRes.hasPsize = NO;
  resultSysMsgListRes.psize = 0;
  return self;
}
- (BOOL) hasPage {
  return resultSysMsgListRes.hasPage;
}
- (UInt32) page {
  return resultSysMsgListRes.page;
}
- (SysMsgListResBuilder*) setPage:(UInt32) value {
  resultSysMsgListRes.hasPage = YES;
  resultSysMsgListRes.page = value;
  return self;
}
- (SysMsgListResBuilder*) clearPage {
  resultSysMsgListRes.hasPage = NO;
  resultSysMsgListRes.page = 0;
  return self;
}
- (NSMutableArray<SysMsg*> *)sysmsgs {
  return resultSysMsgListRes.sysmsgsArray;
}
- (SysMsg*)sysmsgsAtIndex:(NSUInteger)index {
  return [resultSysMsgListRes sysmsgsAtIndex:index];
}
- (SysMsgListResBuilder *)addSysmsgs:(SysMsg*)value {
  if (resultSysMsgListRes.sysmsgsArray == nil) {
    resultSysMsgListRes.sysmsgsArray = [[NSMutableArray alloc]init];
  }
  [resultSysMsgListRes.sysmsgsArray addObject:value];
  return self;
}
- (SysMsgListResBuilder *)setSysmsgsArray:(NSArray<SysMsg*> *)array {
  resultSysMsgListRes.sysmsgsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SysMsgListResBuilder *)clearSysmsgs {
  resultSysMsgListRes.sysmsgsArray = nil;
  return self;
}
- (BOOL) hasNT {
  return resultSysMsgListRes.hasNT;
}
- (UInt32) nT {
  return resultSysMsgListRes.nT;
}
- (SysMsgListResBuilder*) setNT:(UInt32) value {
  resultSysMsgListRes.hasNT = YES;
  resultSysMsgListRes.nT = value;
  return self;
}
- (SysMsgListResBuilder*) clearNT {
  resultSysMsgListRes.hasNT = NO;
  resultSysMsgListRes.nT = 0;
  return self;
}
@end

@interface SysMsgReq ()
@property UInt32 id;
@end

@implementation SysMsgReq

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
  }
  return self;
}
static SysMsgReq* defaultSysMsgReqInstance = nil;
+ (void) initialize {
  if (self == [SysMsgReq class]) {
    defaultSysMsgReqInstance = [[SysMsgReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSysMsgReqInstance;
}
- (instancetype) defaultInstance {
  return defaultSysMsgReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SysMsgReq*) parseFromData:(NSData*) data {
  return (SysMsgReq*)[[[SysMsgReq builder] mergeFromData:data] build];
}
+ (SysMsgReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgReq*)[[[SysMsgReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SysMsgReq*) parseFromInputStream:(NSInputStream*) input {
  return (SysMsgReq*)[[[SysMsgReq builder] mergeFromInputStream:input] build];
}
+ (SysMsgReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgReq*)[[[SysMsgReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SysMsgReq*)[[[SysMsgReq builder] mergeFromCodedInputStream:input] build];
}
+ (SysMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgReq*)[[[SysMsgReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsgReqBuilder*) builder {
  return [[SysMsgReqBuilder alloc] init];
}
+ (SysMsgReqBuilder*) builderWithPrototype:(SysMsgReq*) prototype {
  return [[SysMsgReq builder] mergeFrom:prototype];
}
- (SysMsgReqBuilder*) builder {
  return [SysMsgReq builder];
}
- (SysMsgReqBuilder*) toBuilder {
  return [SysMsgReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SysMsgReq class]]) {
    return NO;
  }
  SysMsgReq *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SysMsgReqBuilder()
@property (strong) SysMsgReq* resultSysMsgReq;
@end

@implementation SysMsgReqBuilder
@synthesize resultSysMsgReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSysMsgReq = [[SysMsgReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSysMsgReq;
}
- (SysMsgReqBuilder*) clear {
  self.resultSysMsgReq = [[SysMsgReq alloc] init];
  return self;
}
- (SysMsgReqBuilder*) clone {
  return [SysMsgReq builderWithPrototype:resultSysMsgReq];
}
- (SysMsgReq*) defaultInstance {
  return [SysMsgReq defaultInstance];
}
- (SysMsgReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SysMsgReq*) buildPartial {
  SysMsgReq* returnMe = resultSysMsgReq;
  self.resultSysMsgReq = nil;
  return returnMe;
}
- (SysMsgReqBuilder*) mergeFrom:(SysMsgReq*) other {
  if (other == [SysMsgReq defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SysMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SysMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultSysMsgReq.hasId;
}
- (UInt32) id {
  return resultSysMsgReq.id;
}
- (SysMsgReqBuilder*) setId:(UInt32) value {
  resultSysMsgReq.hasId = YES;
  resultSysMsgReq.id = value;
  return self;
}
- (SysMsgReqBuilder*) clearId {
  resultSysMsgReq.hasId = NO;
  resultSysMsgReq.id = 0;
  return self;
}
@end

@interface SysMsgRes ()
@property (strong) SysMsg* sysmsg;
@end

@implementation SysMsgRes

- (BOOL) hasSysmsg {
  return !!hasSysmsg_;
}
- (void) setHasSysmsg:(BOOL) _value_ {
  hasSysmsg_ = !!_value_;
}
@synthesize sysmsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.sysmsg = [SysMsg defaultInstance];
  }
  return self;
}
static SysMsgRes* defaultSysMsgResInstance = nil;
+ (void) initialize {
  if (self == [SysMsgRes class]) {
    defaultSysMsgResInstance = [[SysMsgRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSysMsgResInstance;
}
- (instancetype) defaultInstance {
  return defaultSysMsgResInstance;
}
- (BOOL) isInitialized {
  if (self.hasSysmsg) {
    if (!self.sysmsg.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSysmsg) {
    [output writeMessage:1 value:self.sysmsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSysmsg) {
    size_ += computeMessageSize(1, self.sysmsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SysMsgRes*) parseFromData:(NSData*) data {
  return (SysMsgRes*)[[[SysMsgRes builder] mergeFromData:data] build];
}
+ (SysMsgRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgRes*)[[[SysMsgRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SysMsgRes*) parseFromInputStream:(NSInputStream*) input {
  return (SysMsgRes*)[[[SysMsgRes builder] mergeFromInputStream:input] build];
}
+ (SysMsgRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgRes*)[[[SysMsgRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsgRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SysMsgRes*)[[[SysMsgRes builder] mergeFromCodedInputStream:input] build];
}
+ (SysMsgRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SysMsgRes*)[[[SysMsgRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SysMsgResBuilder*) builder {
  return [[SysMsgResBuilder alloc] init];
}
+ (SysMsgResBuilder*) builderWithPrototype:(SysMsgRes*) prototype {
  return [[SysMsgRes builder] mergeFrom:prototype];
}
- (SysMsgResBuilder*) builder {
  return [SysMsgRes builder];
}
- (SysMsgResBuilder*) toBuilder {
  return [SysMsgRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSysmsg) {
    [output appendFormat:@"%@%@ {\n", indent, @"sysmsg"];
    [self.sysmsg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSysmsg) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sysmsg storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sysmsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SysMsgRes class]]) {
    return NO;
  }
  SysMsgRes *otherMessage = other;
  return
      self.hasSysmsg == otherMessage.hasSysmsg &&
      (!self.hasSysmsg || [self.sysmsg isEqual:otherMessage.sysmsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSysmsg) {
    hashCode = hashCode * 31 + [self.sysmsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SysMsgResBuilder()
@property (strong) SysMsgRes* resultSysMsgRes;
@end

@implementation SysMsgResBuilder
@synthesize resultSysMsgRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSysMsgRes = [[SysMsgRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSysMsgRes;
}
- (SysMsgResBuilder*) clear {
  self.resultSysMsgRes = [[SysMsgRes alloc] init];
  return self;
}
- (SysMsgResBuilder*) clone {
  return [SysMsgRes builderWithPrototype:resultSysMsgRes];
}
- (SysMsgRes*) defaultInstance {
  return [SysMsgRes defaultInstance];
}
- (SysMsgRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SysMsgRes*) buildPartial {
  SysMsgRes* returnMe = resultSysMsgRes;
  self.resultSysMsgRes = nil;
  return returnMe;
}
- (SysMsgResBuilder*) mergeFrom:(SysMsgRes*) other {
  if (other == [SysMsgRes defaultInstance]) {
    return self;
  }
  if (other.hasSysmsg) {
    [self mergeSysmsg:other.sysmsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SysMsgResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SysMsgResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        SysMsgBuilder* subBuilder = [SysMsg builder];
        if (self.hasSysmsg) {
          [subBuilder mergeFrom:self.sysmsg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSysmsg:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSysmsg {
  return resultSysMsgRes.hasSysmsg;
}
- (SysMsg*) sysmsg {
  return resultSysMsgRes.sysmsg;
}
- (SysMsgResBuilder*) setSysmsg:(SysMsg*) value {
  resultSysMsgRes.hasSysmsg = YES;
  resultSysMsgRes.sysmsg = value;
  return self;
}
- (SysMsgResBuilder*) setSysmsgBuilder:(SysMsgBuilder*) builderForValue {
  return [self setSysmsg:[builderForValue build]];
}
- (SysMsgResBuilder*) mergeSysmsg:(SysMsg*) value {
  if (resultSysMsgRes.hasSysmsg &&
      resultSysMsgRes.sysmsg != [SysMsg defaultInstance]) {
    resultSysMsgRes.sysmsg =
      [[[SysMsg builderWithPrototype:resultSysMsgRes.sysmsg] mergeFrom:value] buildPartial];
  } else {
    resultSysMsgRes.sysmsg = value;
  }
  resultSysMsgRes.hasSysmsg = YES;
  return self;
}
- (SysMsgResBuilder*) clearSysmsg {
  resultSysMsgRes.hasSysmsg = NO;
  resultSysMsgRes.sysmsg = [SysMsg defaultInstance];
  return self;
}
@end

@interface AboutMyCommentReq ()
@property UInt32 page;
@end

@implementation AboutMyCommentReq

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (instancetype) init {
  if ((self = [super init])) {
    self.page = 0;
  }
  return self;
}
static AboutMyCommentReq* defaultAboutMyCommentReqInstance = nil;
+ (void) initialize {
  if (self == [AboutMyCommentReq class]) {
    defaultAboutMyCommentReqInstance = [[AboutMyCommentReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAboutMyCommentReqInstance;
}
- (instancetype) defaultInstance {
  return defaultAboutMyCommentReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeUInt32:1 value:self.page];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeUInt32Size(1, self.page);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AboutMyCommentReq*) parseFromData:(NSData*) data {
  return (AboutMyCommentReq*)[[[AboutMyCommentReq builder] mergeFromData:data] build];
}
+ (AboutMyCommentReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AboutMyCommentReq*)[[[AboutMyCommentReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AboutMyCommentReq*) parseFromInputStream:(NSInputStream*) input {
  return (AboutMyCommentReq*)[[[AboutMyCommentReq builder] mergeFromInputStream:input] build];
}
+ (AboutMyCommentReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AboutMyCommentReq*)[[[AboutMyCommentReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AboutMyCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AboutMyCommentReq*)[[[AboutMyCommentReq builder] mergeFromCodedInputStream:input] build];
}
+ (AboutMyCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AboutMyCommentReq*)[[[AboutMyCommentReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AboutMyCommentReqBuilder*) builder {
  return [[AboutMyCommentReqBuilder alloc] init];
}
+ (AboutMyCommentReqBuilder*) builderWithPrototype:(AboutMyCommentReq*) prototype {
  return [[AboutMyCommentReq builder] mergeFrom:prototype];
}
- (AboutMyCommentReqBuilder*) builder {
  return [AboutMyCommentReq builder];
}
- (AboutMyCommentReqBuilder*) toBuilder {
  return [AboutMyCommentReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AboutMyCommentReq class]]) {
    return NO;
  }
  AboutMyCommentReq *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AboutMyCommentReqBuilder()
@property (strong) AboutMyCommentReq* resultAboutMyCommentReq;
@end

@implementation AboutMyCommentReqBuilder
@synthesize resultAboutMyCommentReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAboutMyCommentReq = [[AboutMyCommentReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAboutMyCommentReq;
}
- (AboutMyCommentReqBuilder*) clear {
  self.resultAboutMyCommentReq = [[AboutMyCommentReq alloc] init];
  return self;
}
- (AboutMyCommentReqBuilder*) clone {
  return [AboutMyCommentReq builderWithPrototype:resultAboutMyCommentReq];
}
- (AboutMyCommentReq*) defaultInstance {
  return [AboutMyCommentReq defaultInstance];
}
- (AboutMyCommentReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AboutMyCommentReq*) buildPartial {
  AboutMyCommentReq* returnMe = resultAboutMyCommentReq;
  self.resultAboutMyCommentReq = nil;
  return returnMe;
}
- (AboutMyCommentReqBuilder*) mergeFrom:(AboutMyCommentReq*) other {
  if (other == [AboutMyCommentReq defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AboutMyCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AboutMyCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return resultAboutMyCommentReq.hasPage;
}
- (UInt32) page {
  return resultAboutMyCommentReq.page;
}
- (AboutMyCommentReqBuilder*) setPage:(UInt32) value {
  resultAboutMyCommentReq.hasPage = YES;
  resultAboutMyCommentReq.page = value;
  return self;
}
- (AboutMyCommentReqBuilder*) clearPage {
  resultAboutMyCommentReq.hasPage = NO;
  resultAboutMyCommentReq.page = 0;
  return self;
}
@end

@interface UserVsComment ()
@property (strong) RegUser* user;
@property UInt32 articleId;
@property (strong) NSMutableArray<Comment*> * commentsArray;
@end

@implementation UserVsComment

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasArticleId {
  return !!hasArticleId_;
}
- (void) setHasArticleId:(BOOL) _value_ {
  hasArticleId_ = !!_value_;
}
@synthesize articleId;
@synthesize commentsArray;
@dynamic comments;
- (instancetype) init {
  if ((self = [super init])) {
    self.user = [RegUser defaultInstance];
    self.articleId = 0;
  }
  return self;
}
static UserVsComment* defaultUserVsCommentInstance = nil;
+ (void) initialize {
  if (self == [UserVsComment class]) {
    defaultUserVsCommentInstance = [[UserVsComment alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserVsCommentInstance;
}
- (instancetype) defaultInstance {
  return defaultUserVsCommentInstance;
}
- (NSArray<Comment*> *)comments {
  return commentsArray;
}
- (Comment*)commentsAtIndex:(NSUInteger)index {
  return [commentsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasArticleId) {
    return NO;
  }
  __block BOOL isInitcomments = YES;
   [self.comments enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcomments = NO;
      *stop = YES;
    }
  }];
  if (!isInitcomments) return isInitcomments;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasArticleId) {
    [output writeUInt32:2 value:self.articleId];
  }
  [self.commentsArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  if (self.hasArticleId) {
    size_ += computeUInt32Size(2, self.articleId);
  }
  [self.commentsArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserVsComment*) parseFromData:(NSData*) data {
  return (UserVsComment*)[[[UserVsComment builder] mergeFromData:data] build];
}
+ (UserVsComment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserVsComment*)[[[UserVsComment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserVsComment*) parseFromInputStream:(NSInputStream*) input {
  return (UserVsComment*)[[[UserVsComment builder] mergeFromInputStream:input] build];
}
+ (UserVsComment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserVsComment*)[[[UserVsComment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserVsComment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserVsComment*)[[[UserVsComment builder] mergeFromCodedInputStream:input] build];
}
+ (UserVsComment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserVsComment*)[[[UserVsComment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserVsCommentBuilder*) builder {
  return [[UserVsCommentBuilder alloc] init];
}
+ (UserVsCommentBuilder*) builderWithPrototype:(UserVsComment*) prototype {
  return [[UserVsComment builder] mergeFrom:prototype];
}
- (UserVsCommentBuilder*) builder {
  return [UserVsComment builder];
}
- (UserVsCommentBuilder*) toBuilder {
  return [UserVsComment builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasArticleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"articleId", [NSNumber numberWithInteger:self.articleId]];
  }
  [self.commentsArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"comments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasArticleId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.articleId] forKey: @"articleId"];
  }
  for (Comment* element in self.commentsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"comments"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserVsComment class]]) {
    return NO;
  }
  UserVsComment *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasArticleId == otherMessage.hasArticleId &&
      (!self.hasArticleId || self.articleId == otherMessage.articleId) &&
      [self.commentsArray isEqualToArray:otherMessage.commentsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasArticleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.articleId] hash];
  }
  [self.commentsArray enumerateObjectsUsingBlock:^(Comment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserVsCommentBuilder()
@property (strong) UserVsComment* resultUserVsComment;
@end

@implementation UserVsCommentBuilder
@synthesize resultUserVsComment;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserVsComment = [[UserVsComment alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserVsComment;
}
- (UserVsCommentBuilder*) clear {
  self.resultUserVsComment = [[UserVsComment alloc] init];
  return self;
}
- (UserVsCommentBuilder*) clone {
  return [UserVsComment builderWithPrototype:resultUserVsComment];
}
- (UserVsComment*) defaultInstance {
  return [UserVsComment defaultInstance];
}
- (UserVsComment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserVsComment*) buildPartial {
  UserVsComment* returnMe = resultUserVsComment;
  self.resultUserVsComment = nil;
  return returnMe;
}
- (UserVsCommentBuilder*) mergeFrom:(UserVsComment*) other {
  if (other == [UserVsComment defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasArticleId) {
    [self setArticleId:other.articleId];
  }
  if (other.commentsArray.count > 0) {
    if (resultUserVsComment.commentsArray == nil) {
      resultUserVsComment.commentsArray = [[NSMutableArray alloc] initWithArray:other.commentsArray];
    } else {
      [resultUserVsComment.commentsArray addObjectsFromArray:other.commentsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserVsCommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserVsCommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        RegUserBuilder* subBuilder = [RegUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setArticleId:[input readUInt32]];
        break;
      }
      case 26: {
        CommentBuilder* subBuilder = [Comment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addComments:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultUserVsComment.hasUser;
}
- (RegUser*) user {
  return resultUserVsComment.user;
}
- (UserVsCommentBuilder*) setUser:(RegUser*) value {
  resultUserVsComment.hasUser = YES;
  resultUserVsComment.user = value;
  return self;
}
- (UserVsCommentBuilder*) setUserBuilder:(RegUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (UserVsCommentBuilder*) mergeUser:(RegUser*) value {
  if (resultUserVsComment.hasUser &&
      resultUserVsComment.user != [RegUser defaultInstance]) {
    resultUserVsComment.user =
      [[[RegUser builderWithPrototype:resultUserVsComment.user] mergeFrom:value] buildPartial];
  } else {
    resultUserVsComment.user = value;
  }
  resultUserVsComment.hasUser = YES;
  return self;
}
- (UserVsCommentBuilder*) clearUser {
  resultUserVsComment.hasUser = NO;
  resultUserVsComment.user = [RegUser defaultInstance];
  return self;
}
- (BOOL) hasArticleId {
  return resultUserVsComment.hasArticleId;
}
- (UInt32) articleId {
  return resultUserVsComment.articleId;
}
- (UserVsCommentBuilder*) setArticleId:(UInt32) value {
  resultUserVsComment.hasArticleId = YES;
  resultUserVsComment.articleId = value;
  return self;
}
- (UserVsCommentBuilder*) clearArticleId {
  resultUserVsComment.hasArticleId = NO;
  resultUserVsComment.articleId = 0;
  return self;
}
- (NSMutableArray<Comment*> *)comments {
  return resultUserVsComment.commentsArray;
}
- (Comment*)commentsAtIndex:(NSUInteger)index {
  return [resultUserVsComment commentsAtIndex:index];
}
- (UserVsCommentBuilder *)addComments:(Comment*)value {
  if (resultUserVsComment.commentsArray == nil) {
    resultUserVsComment.commentsArray = [[NSMutableArray alloc]init];
  }
  [resultUserVsComment.commentsArray addObject:value];
  return self;
}
- (UserVsCommentBuilder *)setCommentsArray:(NSArray<Comment*> *)array {
  resultUserVsComment.commentsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UserVsCommentBuilder *)clearComments {
  resultUserVsComment.commentsArray = nil;
  return self;
}
@end

@interface AboutMyCommentRes ()
@property UInt32 psize;
@property UInt32 page;
@property (strong) NSMutableArray<UserVsComment*> * comsArray;
@end

@implementation AboutMyCommentRes

- (BOOL) hasPsize {
  return !!hasPsize_;
}
- (void) setHasPsize:(BOOL) _value_ {
  hasPsize_ = !!_value_;
}
@synthesize psize;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
@synthesize comsArray;
@dynamic coms;
- (instancetype) init {
  if ((self = [super init])) {
    self.psize = 0;
    self.page = 0;
  }
  return self;
}
static AboutMyCommentRes* defaultAboutMyCommentResInstance = nil;
+ (void) initialize {
  if (self == [AboutMyCommentRes class]) {
    defaultAboutMyCommentResInstance = [[AboutMyCommentRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAboutMyCommentResInstance;
}
- (instancetype) defaultInstance {
  return defaultAboutMyCommentResInstance;
}
- (NSArray<UserVsComment*> *)coms {
  return comsArray;
}
- (UserVsComment*)comsAtIndex:(NSUInteger)index {
  return [comsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPsize) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInitcoms = YES;
   [self.coms enumerateObjectsUsingBlock:^(UserVsComment *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcoms = NO;
      *stop = YES;
    }
  }];
  if (!isInitcoms) return isInitcoms;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPsize) {
    [output writeUInt32:1 value:self.psize];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.comsArray enumerateObjectsUsingBlock:^(UserVsComment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPsize) {
    size_ += computeUInt32Size(1, self.psize);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  [self.comsArray enumerateObjectsUsingBlock:^(UserVsComment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AboutMyCommentRes*) parseFromData:(NSData*) data {
  return (AboutMyCommentRes*)[[[AboutMyCommentRes builder] mergeFromData:data] build];
}
+ (AboutMyCommentRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AboutMyCommentRes*)[[[AboutMyCommentRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AboutMyCommentRes*) parseFromInputStream:(NSInputStream*) input {
  return (AboutMyCommentRes*)[[[AboutMyCommentRes builder] mergeFromInputStream:input] build];
}
+ (AboutMyCommentRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AboutMyCommentRes*)[[[AboutMyCommentRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AboutMyCommentRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AboutMyCommentRes*)[[[AboutMyCommentRes builder] mergeFromCodedInputStream:input] build];
}
+ (AboutMyCommentRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AboutMyCommentRes*)[[[AboutMyCommentRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AboutMyCommentResBuilder*) builder {
  return [[AboutMyCommentResBuilder alloc] init];
}
+ (AboutMyCommentResBuilder*) builderWithPrototype:(AboutMyCommentRes*) prototype {
  return [[AboutMyCommentRes builder] mergeFrom:prototype];
}
- (AboutMyCommentResBuilder*) builder {
  return [AboutMyCommentRes builder];
}
- (AboutMyCommentResBuilder*) toBuilder {
  return [AboutMyCommentRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPsize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"psize", [NSNumber numberWithInteger:self.psize]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.comsArray enumerateObjectsUsingBlock:^(UserVsComment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"coms"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPsize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.psize] forKey: @"psize"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  for (UserVsComment* element in self.comsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"coms"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AboutMyCommentRes class]]) {
    return NO;
  }
  AboutMyCommentRes *otherMessage = other;
  return
      self.hasPsize == otherMessage.hasPsize &&
      (!self.hasPsize || self.psize == otherMessage.psize) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.comsArray isEqualToArray:otherMessage.comsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPsize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.psize] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  [self.comsArray enumerateObjectsUsingBlock:^(UserVsComment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AboutMyCommentResBuilder()
@property (strong) AboutMyCommentRes* resultAboutMyCommentRes;
@end

@implementation AboutMyCommentResBuilder
@synthesize resultAboutMyCommentRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAboutMyCommentRes = [[AboutMyCommentRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAboutMyCommentRes;
}
- (AboutMyCommentResBuilder*) clear {
  self.resultAboutMyCommentRes = [[AboutMyCommentRes alloc] init];
  return self;
}
- (AboutMyCommentResBuilder*) clone {
  return [AboutMyCommentRes builderWithPrototype:resultAboutMyCommentRes];
}
- (AboutMyCommentRes*) defaultInstance {
  return [AboutMyCommentRes defaultInstance];
}
- (AboutMyCommentRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AboutMyCommentRes*) buildPartial {
  AboutMyCommentRes* returnMe = resultAboutMyCommentRes;
  self.resultAboutMyCommentRes = nil;
  return returnMe;
}
- (AboutMyCommentResBuilder*) mergeFrom:(AboutMyCommentRes*) other {
  if (other == [AboutMyCommentRes defaultInstance]) {
    return self;
  }
  if (other.hasPsize) {
    [self setPsize:other.psize];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.comsArray.count > 0) {
    if (resultAboutMyCommentRes.comsArray == nil) {
      resultAboutMyCommentRes.comsArray = [[NSMutableArray alloc] initWithArray:other.comsArray];
    } else {
      [resultAboutMyCommentRes.comsArray addObjectsFromArray:other.comsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AboutMyCommentResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AboutMyCommentResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPsize:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 42: {
        UserVsCommentBuilder* subBuilder = [UserVsComment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addComs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPsize {
  return resultAboutMyCommentRes.hasPsize;
}
- (UInt32) psize {
  return resultAboutMyCommentRes.psize;
}
- (AboutMyCommentResBuilder*) setPsize:(UInt32) value {
  resultAboutMyCommentRes.hasPsize = YES;
  resultAboutMyCommentRes.psize = value;
  return self;
}
- (AboutMyCommentResBuilder*) clearPsize {
  resultAboutMyCommentRes.hasPsize = NO;
  resultAboutMyCommentRes.psize = 0;
  return self;
}
- (BOOL) hasPage {
  return resultAboutMyCommentRes.hasPage;
}
- (UInt32) page {
  return resultAboutMyCommentRes.page;
}
- (AboutMyCommentResBuilder*) setPage:(UInt32) value {
  resultAboutMyCommentRes.hasPage = YES;
  resultAboutMyCommentRes.page = value;
  return self;
}
- (AboutMyCommentResBuilder*) clearPage {
  resultAboutMyCommentRes.hasPage = NO;
  resultAboutMyCommentRes.page = 0;
  return self;
}
- (NSMutableArray<UserVsComment*> *)coms {
  return resultAboutMyCommentRes.comsArray;
}
- (UserVsComment*)comsAtIndex:(NSUInteger)index {
  return [resultAboutMyCommentRes comsAtIndex:index];
}
- (AboutMyCommentResBuilder *)addComs:(UserVsComment*)value {
  if (resultAboutMyCommentRes.comsArray == nil) {
    resultAboutMyCommentRes.comsArray = [[NSMutableArray alloc]init];
  }
  [resultAboutMyCommentRes.comsArray addObject:value];
  return self;
}
- (AboutMyCommentResBuilder *)setComsArray:(NSArray<UserVsComment*> *)array {
  resultAboutMyCommentRes.comsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (AboutMyCommentResBuilder *)clearComs {
  resultAboutMyCommentRes.comsArray = nil;
  return self;
}
@end

@interface AboutMyComment ()
@property (strong) Comment* other;
@property (strong) Comment* mine;
@end

@implementation AboutMyComment

- (BOOL) hasOther {
  return !!hasOther_;
}
- (void) setHasOther:(BOOL) _value_ {
  hasOther_ = !!_value_;
}
@synthesize other;
- (BOOL) hasMine {
  return !!hasMine_;
}
- (void) setHasMine:(BOOL) _value_ {
  hasMine_ = !!_value_;
}
@synthesize mine;
- (instancetype) init {
  if ((self = [super init])) {
    self.other = [Comment defaultInstance];
    self.mine = [Comment defaultInstance];
  }
  return self;
}
static AboutMyComment* defaultAboutMyCommentInstance = nil;
+ (void) initialize {
  if (self == [AboutMyComment class]) {
    defaultAboutMyCommentInstance = [[AboutMyComment alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAboutMyCommentInstance;
}
- (instancetype) defaultInstance {
  return defaultAboutMyCommentInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOther) {
    return NO;
  }
  if (!self.hasMine) {
    return NO;
  }
  if (!self.other.isInitialized) {
    return NO;
  }
  if (!self.mine.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOther) {
    [output writeMessage:1 value:self.other];
  }
  if (self.hasMine) {
    [output writeMessage:3 value:self.mine];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOther) {
    size_ += computeMessageSize(1, self.other);
  }
  if (self.hasMine) {
    size_ += computeMessageSize(3, self.mine);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AboutMyComment*) parseFromData:(NSData*) data {
  return (AboutMyComment*)[[[AboutMyComment builder] mergeFromData:data] build];
}
+ (AboutMyComment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AboutMyComment*)[[[AboutMyComment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AboutMyComment*) parseFromInputStream:(NSInputStream*) input {
  return (AboutMyComment*)[[[AboutMyComment builder] mergeFromInputStream:input] build];
}
+ (AboutMyComment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AboutMyComment*)[[[AboutMyComment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AboutMyComment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AboutMyComment*)[[[AboutMyComment builder] mergeFromCodedInputStream:input] build];
}
+ (AboutMyComment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AboutMyComment*)[[[AboutMyComment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AboutMyCommentBuilder*) builder {
  return [[AboutMyCommentBuilder alloc] init];
}
+ (AboutMyCommentBuilder*) builderWithPrototype:(AboutMyComment*) prototype {
  return [[AboutMyComment builder] mergeFrom:prototype];
}
- (AboutMyCommentBuilder*) builder {
  return [AboutMyComment builder];
}
- (AboutMyCommentBuilder*) toBuilder {
  return [AboutMyComment builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOther) {
    [output appendFormat:@"%@%@ {\n", indent, @"other"];
    [self.other writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMine) {
    [output appendFormat:@"%@%@ {\n", indent, @"mine"];
    [self.mine writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOther) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.other storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"other"];
  }
  if (self.hasMine) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.mine storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"mine"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AboutMyComment class]]) {
    return NO;
  }
  AboutMyComment *otherMessage = other;
  return
      self.hasOther == otherMessage.hasOther &&
      (!self.hasOther || [self.other isEqual:otherMessage.other]) &&
      self.hasMine == otherMessage.hasMine &&
      (!self.hasMine || [self.mine isEqual:otherMessage.mine]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOther) {
    hashCode = hashCode * 31 + [self.other hash];
  }
  if (self.hasMine) {
    hashCode = hashCode * 31 + [self.mine hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AboutMyCommentBuilder()
@property (strong) AboutMyComment* resultAboutMyComment;
@end

@implementation AboutMyCommentBuilder
@synthesize resultAboutMyComment;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAboutMyComment = [[AboutMyComment alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAboutMyComment;
}
- (AboutMyCommentBuilder*) clear {
  self.resultAboutMyComment = [[AboutMyComment alloc] init];
  return self;
}
- (AboutMyCommentBuilder*) clone {
  return [AboutMyComment builderWithPrototype:resultAboutMyComment];
}
- (AboutMyComment*) defaultInstance {
  return [AboutMyComment defaultInstance];
}
- (AboutMyComment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AboutMyComment*) buildPartial {
  AboutMyComment* returnMe = resultAboutMyComment;
  self.resultAboutMyComment = nil;
  return returnMe;
}
- (AboutMyCommentBuilder*) mergeFrom:(AboutMyComment*) other {
  if (other == [AboutMyComment defaultInstance]) {
    return self;
  }
  if (other.hasOther) {
    [self mergeOther:other.other];
  }
  if (other.hasMine) {
    [self mergeMine:other.mine];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AboutMyCommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AboutMyCommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        CommentBuilder* subBuilder = [Comment builder];
        if (self.hasOther) {
          [subBuilder mergeFrom:self.other];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOther:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        CommentBuilder* subBuilder = [Comment builder];
        if (self.hasMine) {
          [subBuilder mergeFrom:self.mine];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMine:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasOther {
  return resultAboutMyComment.hasOther;
}
- (Comment*) other {
  return resultAboutMyComment.other;
}
- (AboutMyCommentBuilder*) setOther:(Comment*) value {
  resultAboutMyComment.hasOther = YES;
  resultAboutMyComment.other = value;
  return self;
}
- (AboutMyCommentBuilder*) setOtherBuilder:(CommentBuilder*) builderForValue {
  return [self setOther:[builderForValue build]];
}
- (AboutMyCommentBuilder*) mergeOther:(Comment*) value {
  if (resultAboutMyComment.hasOther &&
      resultAboutMyComment.other != [Comment defaultInstance]) {
    resultAboutMyComment.other =
      [[[Comment builderWithPrototype:resultAboutMyComment.other] mergeFrom:value] buildPartial];
  } else {
    resultAboutMyComment.other = value;
  }
  resultAboutMyComment.hasOther = YES;
  return self;
}
- (AboutMyCommentBuilder*) clearOther {
  resultAboutMyComment.hasOther = NO;
  resultAboutMyComment.other = [Comment defaultInstance];
  return self;
}
- (BOOL) hasMine {
  return resultAboutMyComment.hasMine;
}
- (Comment*) mine {
  return resultAboutMyComment.mine;
}
- (AboutMyCommentBuilder*) setMine:(Comment*) value {
  resultAboutMyComment.hasMine = YES;
  resultAboutMyComment.mine = value;
  return self;
}
- (AboutMyCommentBuilder*) setMineBuilder:(CommentBuilder*) builderForValue {
  return [self setMine:[builderForValue build]];
}
- (AboutMyCommentBuilder*) mergeMine:(Comment*) value {
  if (resultAboutMyComment.hasMine &&
      resultAboutMyComment.mine != [Comment defaultInstance]) {
    resultAboutMyComment.mine =
      [[[Comment builderWithPrototype:resultAboutMyComment.mine] mergeFrom:value] buildPartial];
  } else {
    resultAboutMyComment.mine = value;
  }
  resultAboutMyComment.hasMine = YES;
  return self;
}
- (AboutMyCommentBuilder*) clearMine {
  resultAboutMyComment.hasMine = NO;
  resultAboutMyComment.mine = [Comment defaultInstance];
  return self;
}
@end

@interface ThirdRegUserLoginReq ()
@property (strong) RegUser* user;
@property (strong) NSString* code;
@end

@implementation ThirdRegUserLoginReq

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (instancetype) init {
  if ((self = [super init])) {
    self.user = [RegUser defaultInstance];
    self.code = @"";
  }
  return self;
}
static ThirdRegUserLoginReq* defaultThirdRegUserLoginReqInstance = nil;
+ (void) initialize {
  if (self == [ThirdRegUserLoginReq class]) {
    defaultThirdRegUserLoginReqInstance = [[ThirdRegUserLoginReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultThirdRegUserLoginReqInstance;
}
- (instancetype) defaultInstance {
  return defaultThirdRegUserLoginReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:2 value:self.user];
  }
  if (self.hasCode) {
    [output writeString:3 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(2, self.user);
  }
  if (self.hasCode) {
    size_ += computeStringSize(3, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ThirdRegUserLoginReq*) parseFromData:(NSData*) data {
  return (ThirdRegUserLoginReq*)[[[ThirdRegUserLoginReq builder] mergeFromData:data] build];
}
+ (ThirdRegUserLoginReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ThirdRegUserLoginReq*)[[[ThirdRegUserLoginReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ThirdRegUserLoginReq*) parseFromInputStream:(NSInputStream*) input {
  return (ThirdRegUserLoginReq*)[[[ThirdRegUserLoginReq builder] mergeFromInputStream:input] build];
}
+ (ThirdRegUserLoginReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ThirdRegUserLoginReq*)[[[ThirdRegUserLoginReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ThirdRegUserLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ThirdRegUserLoginReq*)[[[ThirdRegUserLoginReq builder] mergeFromCodedInputStream:input] build];
}
+ (ThirdRegUserLoginReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ThirdRegUserLoginReq*)[[[ThirdRegUserLoginReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ThirdRegUserLoginReqBuilder*) builder {
  return [[ThirdRegUserLoginReqBuilder alloc] init];
}
+ (ThirdRegUserLoginReqBuilder*) builderWithPrototype:(ThirdRegUserLoginReq*) prototype {
  return [[ThirdRegUserLoginReq builder] mergeFrom:prototype];
}
- (ThirdRegUserLoginReqBuilder*) builder {
  return [ThirdRegUserLoginReq builder];
}
- (ThirdRegUserLoginReqBuilder*) toBuilder {
  return [ThirdRegUserLoginReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  if (self.hasCode) {
    [dictionary setObject: self.code forKey: @"code"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ThirdRegUserLoginReq class]]) {
    return NO;
  }
  ThirdRegUserLoginReq *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ThirdRegUserLoginReqBuilder()
@property (strong) ThirdRegUserLoginReq* resultThirdRegUserLoginReq;
@end

@implementation ThirdRegUserLoginReqBuilder
@synthesize resultThirdRegUserLoginReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultThirdRegUserLoginReq = [[ThirdRegUserLoginReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultThirdRegUserLoginReq;
}
- (ThirdRegUserLoginReqBuilder*) clear {
  self.resultThirdRegUserLoginReq = [[ThirdRegUserLoginReq alloc] init];
  return self;
}
- (ThirdRegUserLoginReqBuilder*) clone {
  return [ThirdRegUserLoginReq builderWithPrototype:resultThirdRegUserLoginReq];
}
- (ThirdRegUserLoginReq*) defaultInstance {
  return [ThirdRegUserLoginReq defaultInstance];
}
- (ThirdRegUserLoginReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ThirdRegUserLoginReq*) buildPartial {
  ThirdRegUserLoginReq* returnMe = resultThirdRegUserLoginReq;
  self.resultThirdRegUserLoginReq = nil;
  return returnMe;
}
- (ThirdRegUserLoginReqBuilder*) mergeFrom:(ThirdRegUserLoginReq*) other {
  if (other == [ThirdRegUserLoginReq defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ThirdRegUserLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ThirdRegUserLoginReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 18: {
        RegUserBuilder* subBuilder = [RegUser builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultThirdRegUserLoginReq.hasUser;
}
- (RegUser*) user {
  return resultThirdRegUserLoginReq.user;
}
- (ThirdRegUserLoginReqBuilder*) setUser:(RegUser*) value {
  resultThirdRegUserLoginReq.hasUser = YES;
  resultThirdRegUserLoginReq.user = value;
  return self;
}
- (ThirdRegUserLoginReqBuilder*) setUserBuilder:(RegUserBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (ThirdRegUserLoginReqBuilder*) mergeUser:(RegUser*) value {
  if (resultThirdRegUserLoginReq.hasUser &&
      resultThirdRegUserLoginReq.user != [RegUser defaultInstance]) {
    resultThirdRegUserLoginReq.user =
      [[[RegUser builderWithPrototype:resultThirdRegUserLoginReq.user] mergeFrom:value] buildPartial];
  } else {
    resultThirdRegUserLoginReq.user = value;
  }
  resultThirdRegUserLoginReq.hasUser = YES;
  return self;
}
- (ThirdRegUserLoginReqBuilder*) clearUser {
  resultThirdRegUserLoginReq.hasUser = NO;
  resultThirdRegUserLoginReq.user = [RegUser defaultInstance];
  return self;
}
- (BOOL) hasCode {
  return resultThirdRegUserLoginReq.hasCode;
}
- (NSString*) code {
  return resultThirdRegUserLoginReq.code;
}
- (ThirdRegUserLoginReqBuilder*) setCode:(NSString*) value {
  resultThirdRegUserLoginReq.hasCode = YES;
  resultThirdRegUserLoginReq.code = value;
  return self;
}
- (ThirdRegUserLoginReqBuilder*) clearCode {
  resultThirdRegUserLoginReq.hasCode = NO;
  resultThirdRegUserLoginReq.code = @"";
  return self;
}
@end

@interface ThirdRegUserLoginRes ()
@property (strong) LoginedRegUser* loginedUser;
@end

@implementation ThirdRegUserLoginRes

- (BOOL) hasLoginedUser {
  return !!hasLoginedUser_;
}
- (void) setHasLoginedUser:(BOOL) _value_ {
  hasLoginedUser_ = !!_value_;
}
@synthesize loginedUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.loginedUser = [LoginedRegUser defaultInstance];
  }
  return self;
}
static ThirdRegUserLoginRes* defaultThirdRegUserLoginResInstance = nil;
+ (void) initialize {
  if (self == [ThirdRegUserLoginRes class]) {
    defaultThirdRegUserLoginResInstance = [[ThirdRegUserLoginRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultThirdRegUserLoginResInstance;
}
- (instancetype) defaultInstance {
  return defaultThirdRegUserLoginResInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLoginedUser) {
    [output writeMessage:1 value:self.loginedUser];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLoginedUser) {
    size_ += computeMessageSize(1, self.loginedUser);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ThirdRegUserLoginRes*) parseFromData:(NSData*) data {
  return (ThirdRegUserLoginRes*)[[[ThirdRegUserLoginRes builder] mergeFromData:data] build];
}
+ (ThirdRegUserLoginRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ThirdRegUserLoginRes*)[[[ThirdRegUserLoginRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ThirdRegUserLoginRes*) parseFromInputStream:(NSInputStream*) input {
  return (ThirdRegUserLoginRes*)[[[ThirdRegUserLoginRes builder] mergeFromInputStream:input] build];
}
+ (ThirdRegUserLoginRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ThirdRegUserLoginRes*)[[[ThirdRegUserLoginRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ThirdRegUserLoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ThirdRegUserLoginRes*)[[[ThirdRegUserLoginRes builder] mergeFromCodedInputStream:input] build];
}
+ (ThirdRegUserLoginRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ThirdRegUserLoginRes*)[[[ThirdRegUserLoginRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ThirdRegUserLoginResBuilder*) builder {
  return [[ThirdRegUserLoginResBuilder alloc] init];
}
+ (ThirdRegUserLoginResBuilder*) builderWithPrototype:(ThirdRegUserLoginRes*) prototype {
  return [[ThirdRegUserLoginRes builder] mergeFrom:prototype];
}
- (ThirdRegUserLoginResBuilder*) builder {
  return [ThirdRegUserLoginRes builder];
}
- (ThirdRegUserLoginResBuilder*) toBuilder {
  return [ThirdRegUserLoginRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLoginedUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginedUser"];
    [self.loginedUser writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLoginedUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginedUser storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginedUser"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ThirdRegUserLoginRes class]]) {
    return NO;
  }
  ThirdRegUserLoginRes *otherMessage = other;
  return
      self.hasLoginedUser == otherMessage.hasLoginedUser &&
      (!self.hasLoginedUser || [self.loginedUser isEqual:otherMessage.loginedUser]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLoginedUser) {
    hashCode = hashCode * 31 + [self.loginedUser hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ThirdRegUserLoginResBuilder()
@property (strong) ThirdRegUserLoginRes* resultThirdRegUserLoginRes;
@end

@implementation ThirdRegUserLoginResBuilder
@synthesize resultThirdRegUserLoginRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultThirdRegUserLoginRes = [[ThirdRegUserLoginRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultThirdRegUserLoginRes;
}
- (ThirdRegUserLoginResBuilder*) clear {
  self.resultThirdRegUserLoginRes = [[ThirdRegUserLoginRes alloc] init];
  return self;
}
- (ThirdRegUserLoginResBuilder*) clone {
  return [ThirdRegUserLoginRes builderWithPrototype:resultThirdRegUserLoginRes];
}
- (ThirdRegUserLoginRes*) defaultInstance {
  return [ThirdRegUserLoginRes defaultInstance];
}
- (ThirdRegUserLoginRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ThirdRegUserLoginRes*) buildPartial {
  ThirdRegUserLoginRes* returnMe = resultThirdRegUserLoginRes;
  self.resultThirdRegUserLoginRes = nil;
  return returnMe;
}
- (ThirdRegUserLoginResBuilder*) mergeFrom:(ThirdRegUserLoginRes*) other {
  if (other == [ThirdRegUserLoginRes defaultInstance]) {
    return self;
  }
  if (other.hasLoginedUser) {
    [self mergeLoginedUser:other.loginedUser];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ThirdRegUserLoginResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ThirdRegUserLoginResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        LoginedRegUserBuilder* subBuilder = [LoginedRegUser builder];
        if (self.hasLoginedUser) {
          [subBuilder mergeFrom:self.loginedUser];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginedUser:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasLoginedUser {
  return resultThirdRegUserLoginRes.hasLoginedUser;
}
- (LoginedRegUser*) loginedUser {
  return resultThirdRegUserLoginRes.loginedUser;
}
- (ThirdRegUserLoginResBuilder*) setLoginedUser:(LoginedRegUser*) value {
  resultThirdRegUserLoginRes.hasLoginedUser = YES;
  resultThirdRegUserLoginRes.loginedUser = value;
  return self;
}
- (ThirdRegUserLoginResBuilder*) setLoginedUserBuilder:(LoginedRegUserBuilder*) builderForValue {
  return [self setLoginedUser:[builderForValue build]];
}
- (ThirdRegUserLoginResBuilder*) mergeLoginedUser:(LoginedRegUser*) value {
  if (resultThirdRegUserLoginRes.hasLoginedUser &&
      resultThirdRegUserLoginRes.loginedUser != [LoginedRegUser defaultInstance]) {
    resultThirdRegUserLoginRes.loginedUser =
      [[[LoginedRegUser builderWithPrototype:resultThirdRegUserLoginRes.loginedUser] mergeFrom:value] buildPartial];
  } else {
    resultThirdRegUserLoginRes.loginedUser = value;
  }
  resultThirdRegUserLoginRes.hasLoginedUser = YES;
  return self;
}
- (ThirdRegUserLoginResBuilder*) clearLoginedUser {
  resultThirdRegUserLoginRes.hasLoginedUser = NO;
  resultThirdRegUserLoginRes.loginedUser = [LoginedRegUser defaultInstance];
  return self;
}
@end

@interface MySubReq ()
@property UInt32 page;
@end

@implementation MySubReq

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
- (instancetype) init {
  if ((self = [super init])) {
    self.page = 0;
  }
  return self;
}
static MySubReq* defaultMySubReqInstance = nil;
+ (void) initialize {
  if (self == [MySubReq class]) {
    defaultMySubReqInstance = [[MySubReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMySubReqInstance;
}
- (instancetype) defaultInstance {
  return defaultMySubReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPage) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeUInt32:1 value:self.page];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeUInt32Size(1, self.page);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MySubReq*) parseFromData:(NSData*) data {
  return (MySubReq*)[[[MySubReq builder] mergeFromData:data] build];
}
+ (MySubReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MySubReq*)[[[MySubReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MySubReq*) parseFromInputStream:(NSInputStream*) input {
  return (MySubReq*)[[[MySubReq builder] mergeFromInputStream:input] build];
}
+ (MySubReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MySubReq*)[[[MySubReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MySubReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MySubReq*)[[[MySubReq builder] mergeFromCodedInputStream:input] build];
}
+ (MySubReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MySubReq*)[[[MySubReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MySubReqBuilder*) builder {
  return [[MySubReqBuilder alloc] init];
}
+ (MySubReqBuilder*) builderWithPrototype:(MySubReq*) prototype {
  return [[MySubReq builder] mergeFrom:prototype];
}
- (MySubReqBuilder*) builder {
  return [MySubReq builder];
}
- (MySubReqBuilder*) toBuilder {
  return [MySubReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MySubReq class]]) {
    return NO;
  }
  MySubReq *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MySubReqBuilder()
@property (strong) MySubReq* resultMySubReq;
@end

@implementation MySubReqBuilder
@synthesize resultMySubReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMySubReq = [[MySubReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMySubReq;
}
- (MySubReqBuilder*) clear {
  self.resultMySubReq = [[MySubReq alloc] init];
  return self;
}
- (MySubReqBuilder*) clone {
  return [MySubReq builderWithPrototype:resultMySubReq];
}
- (MySubReq*) defaultInstance {
  return [MySubReq defaultInstance];
}
- (MySubReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MySubReq*) buildPartial {
  MySubReq* returnMe = resultMySubReq;
  self.resultMySubReq = nil;
  return returnMe;
}
- (MySubReqBuilder*) mergeFrom:(MySubReq*) other {
  if (other == [MySubReq defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MySubReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MySubReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return resultMySubReq.hasPage;
}
- (UInt32) page {
  return resultMySubReq.page;
}
- (MySubReqBuilder*) setPage:(UInt32) value {
  resultMySubReq.hasPage = YES;
  resultMySubReq.page = value;
  return self;
}
- (MySubReqBuilder*) clearPage {
  resultMySubReq.hasPage = NO;
  resultMySubReq.page = 0;
  return self;
}
@end

@interface MySubRes ()
@property UInt32 psize;
@property UInt32 page;
@property (strong) NSMutableArray<Source*> * sourcesArray;
@end

@implementation MySubRes

- (BOOL) hasPsize {
  return !!hasPsize_;
}
- (void) setHasPsize:(BOOL) _value_ {
  hasPsize_ = !!_value_;
}
@synthesize psize;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) _value_ {
  hasPage_ = !!_value_;
}
@synthesize page;
@synthesize sourcesArray;
@dynamic sources;
- (instancetype) init {
  if ((self = [super init])) {
    self.psize = 0;
    self.page = 0;
  }
  return self;
}
static MySubRes* defaultMySubResInstance = nil;
+ (void) initialize {
  if (self == [MySubRes class]) {
    defaultMySubResInstance = [[MySubRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultMySubResInstance;
}
- (instancetype) defaultInstance {
  return defaultMySubResInstance;
}
- (NSArray<Source*> *)sources {
  return sourcesArray;
}
- (Source*)sourcesAtIndex:(NSUInteger)index {
  return [sourcesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPsize) {
    return NO;
  }
  if (!self.hasPage) {
    return NO;
  }
  __block BOOL isInitsources = YES;
   [self.sources enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsources = NO;
      *stop = YES;
    }
  }];
  if (!isInitsources) return isInitsources;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPsize) {
    [output writeUInt32:1 value:self.psize];
  }
  if (self.hasPage) {
    [output writeUInt32:3 value:self.page];
  }
  [self.sourcesArray enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPsize) {
    size_ += computeUInt32Size(1, self.psize);
  }
  if (self.hasPage) {
    size_ += computeUInt32Size(3, self.page);
  }
  [self.sourcesArray enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MySubRes*) parseFromData:(NSData*) data {
  return (MySubRes*)[[[MySubRes builder] mergeFromData:data] build];
}
+ (MySubRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MySubRes*)[[[MySubRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MySubRes*) parseFromInputStream:(NSInputStream*) input {
  return (MySubRes*)[[[MySubRes builder] mergeFromInputStream:input] build];
}
+ (MySubRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MySubRes*)[[[MySubRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MySubRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MySubRes*)[[[MySubRes builder] mergeFromCodedInputStream:input] build];
}
+ (MySubRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MySubRes*)[[[MySubRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MySubResBuilder*) builder {
  return [[MySubResBuilder alloc] init];
}
+ (MySubResBuilder*) builderWithPrototype:(MySubRes*) prototype {
  return [[MySubRes builder] mergeFrom:prototype];
}
- (MySubResBuilder*) builder {
  return [MySubRes builder];
}
- (MySubResBuilder*) toBuilder {
  return [MySubRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPsize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"psize", [NSNumber numberWithInteger:self.psize]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  [self.sourcesArray enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sources"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPsize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.psize] forKey: @"psize"];
  }
  if (self.hasPage) {
    [dictionary setObject: [NSNumber numberWithInteger:self.page] forKey: @"page"];
  }
  for (Source* element in self.sourcesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"sources"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MySubRes class]]) {
    return NO;
  }
  MySubRes *otherMessage = other;
  return
      self.hasPsize == otherMessage.hasPsize &&
      (!self.hasPsize || self.psize == otherMessage.psize) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      [self.sourcesArray isEqualToArray:otherMessage.sourcesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPsize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.psize] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  [self.sourcesArray enumerateObjectsUsingBlock:^(Source *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MySubResBuilder()
@property (strong) MySubRes* resultMySubRes;
@end

@implementation MySubResBuilder
@synthesize resultMySubRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultMySubRes = [[MySubRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultMySubRes;
}
- (MySubResBuilder*) clear {
  self.resultMySubRes = [[MySubRes alloc] init];
  return self;
}
- (MySubResBuilder*) clone {
  return [MySubRes builderWithPrototype:resultMySubRes];
}
- (MySubRes*) defaultInstance {
  return [MySubRes defaultInstance];
}
- (MySubRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MySubRes*) buildPartial {
  MySubRes* returnMe = resultMySubRes;
  self.resultMySubRes = nil;
  return returnMe;
}
- (MySubResBuilder*) mergeFrom:(MySubRes*) other {
  if (other == [MySubRes defaultInstance]) {
    return self;
  }
  if (other.hasPsize) {
    [self setPsize:other.psize];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.sourcesArray.count > 0) {
    if (resultMySubRes.sourcesArray == nil) {
      resultMySubRes.sourcesArray = [[NSMutableArray alloc] initWithArray:other.sourcesArray];
    } else {
      [resultMySubRes.sourcesArray addObjectsFromArray:other.sourcesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MySubResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MySubResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPsize:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPage:[input readUInt32]];
        break;
      }
      case 42: {
        SourceBuilder* subBuilder = [Source builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSources:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPsize {
  return resultMySubRes.hasPsize;
}
- (UInt32) psize {
  return resultMySubRes.psize;
}
- (MySubResBuilder*) setPsize:(UInt32) value {
  resultMySubRes.hasPsize = YES;
  resultMySubRes.psize = value;
  return self;
}
- (MySubResBuilder*) clearPsize {
  resultMySubRes.hasPsize = NO;
  resultMySubRes.psize = 0;
  return self;
}
- (BOOL) hasPage {
  return resultMySubRes.hasPage;
}
- (UInt32) page {
  return resultMySubRes.page;
}
- (MySubResBuilder*) setPage:(UInt32) value {
  resultMySubRes.hasPage = YES;
  resultMySubRes.page = value;
  return self;
}
- (MySubResBuilder*) clearPage {
  resultMySubRes.hasPage = NO;
  resultMySubRes.page = 0;
  return self;
}
- (NSMutableArray<Source*> *)sources {
  return resultMySubRes.sourcesArray;
}
- (Source*)sourcesAtIndex:(NSUInteger)index {
  return [resultMySubRes sourcesAtIndex:index];
}
- (MySubResBuilder *)addSources:(Source*)value {
  if (resultMySubRes.sourcesArray == nil) {
    resultMySubRes.sourcesArray = [[NSMutableArray alloc]init];
  }
  [resultMySubRes.sourcesArray addObject:value];
  return self;
}
- (MySubResBuilder *)setSourcesArray:(NSArray<Source*> *)array {
  resultMySubRes.sourcesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (MySubResBuilder *)clearSources {
  resultMySubRes.sourcesArray = nil;
  return self;
}
@end

@interface UpdateRes ()
@property UInt32 up;
@property (strong) NSString* verName;
@property UInt32 upT;
@property (strong) NSString* url;
@end

@implementation UpdateRes

- (BOOL) hasUp {
  return !!hasUp_;
}
- (void) setHasUp:(BOOL) _value_ {
  hasUp_ = !!_value_;
}
@synthesize up;
- (BOOL) hasVerName {
  return !!hasVerName_;
}
- (void) setHasVerName:(BOOL) _value_ {
  hasVerName_ = !!_value_;
}
@synthesize verName;
- (BOOL) hasUpT {
  return !!hasUpT_;
}
- (void) setHasUpT:(BOOL) _value_ {
  hasUpT_ = !!_value_;
}
@synthesize upT;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (instancetype) init {
  if ((self = [super init])) {
    self.up = 0;
    self.verName = @"";
    self.upT = 0;
    self.url = @"";
  }
  return self;
}
static UpdateRes* defaultUpdateResInstance = nil;
+ (void) initialize {
  if (self == [UpdateRes class]) {
    defaultUpdateResInstance = [[UpdateRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUpdateResInstance;
}
- (instancetype) defaultInstance {
  return defaultUpdateResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUp) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUp) {
    [output writeUInt32:1 value:self.up];
  }
  if (self.hasVerName) {
    [output writeString:3 value:self.verName];
  }
  if (self.hasUpT) {
    [output writeUInt32:5 value:self.upT];
  }
  if (self.hasUrl) {
    [output writeString:7 value:self.url];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUp) {
    size_ += computeUInt32Size(1, self.up);
  }
  if (self.hasVerName) {
    size_ += computeStringSize(3, self.verName);
  }
  if (self.hasUpT) {
    size_ += computeUInt32Size(5, self.upT);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(7, self.url);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UpdateRes*) parseFromData:(NSData*) data {
  return (UpdateRes*)[[[UpdateRes builder] mergeFromData:data] build];
}
+ (UpdateRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UpdateRes*)[[[UpdateRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UpdateRes*) parseFromInputStream:(NSInputStream*) input {
  return (UpdateRes*)[[[UpdateRes builder] mergeFromInputStream:input] build];
}
+ (UpdateRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UpdateRes*)[[[UpdateRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UpdateRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UpdateRes*)[[[UpdateRes builder] mergeFromCodedInputStream:input] build];
}
+ (UpdateRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UpdateRes*)[[[UpdateRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UpdateResBuilder*) builder {
  return [[UpdateResBuilder alloc] init];
}
+ (UpdateResBuilder*) builderWithPrototype:(UpdateRes*) prototype {
  return [[UpdateRes builder] mergeFrom:prototype];
}
- (UpdateResBuilder*) builder {
  return [UpdateRes builder];
}
- (UpdateResBuilder*) toBuilder {
  return [UpdateRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"up", [NSNumber numberWithInteger:self.up]];
  }
  if (self.hasVerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verName", self.verName];
  }
  if (self.hasUpT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"upT", [NSNumber numberWithInteger:self.upT]];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUp) {
    [dictionary setObject: [NSNumber numberWithInteger:self.up] forKey: @"up"];
  }
  if (self.hasVerName) {
    [dictionary setObject: self.verName forKey: @"verName"];
  }
  if (self.hasUpT) {
    [dictionary setObject: [NSNumber numberWithInteger:self.upT] forKey: @"upT"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UpdateRes class]]) {
    return NO;
  }
  UpdateRes *otherMessage = other;
  return
      self.hasUp == otherMessage.hasUp &&
      (!self.hasUp || self.up == otherMessage.up) &&
      self.hasVerName == otherMessage.hasVerName &&
      (!self.hasVerName || [self.verName isEqual:otherMessage.verName]) &&
      self.hasUpT == otherMessage.hasUpT &&
      (!self.hasUpT || self.upT == otherMessage.upT) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.up] hash];
  }
  if (self.hasVerName) {
    hashCode = hashCode * 31 + [self.verName hash];
  }
  if (self.hasUpT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.upT] hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UpdateResBuilder()
@property (strong) UpdateRes* resultUpdateRes;
@end

@implementation UpdateResBuilder
@synthesize resultUpdateRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUpdateRes = [[UpdateRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUpdateRes;
}
- (UpdateResBuilder*) clear {
  self.resultUpdateRes = [[UpdateRes alloc] init];
  return self;
}
- (UpdateResBuilder*) clone {
  return [UpdateRes builderWithPrototype:resultUpdateRes];
}
- (UpdateRes*) defaultInstance {
  return [UpdateRes defaultInstance];
}
- (UpdateRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UpdateRes*) buildPartial {
  UpdateRes* returnMe = resultUpdateRes;
  self.resultUpdateRes = nil;
  return returnMe;
}
- (UpdateResBuilder*) mergeFrom:(UpdateRes*) other {
  if (other == [UpdateRes defaultInstance]) {
    return self;
  }
  if (other.hasUp) {
    [self setUp:other.up];
  }
  if (other.hasVerName) {
    [self setVerName:other.verName];
  }
  if (other.hasUpT) {
    [self setUpT:other.upT];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UpdateResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UpdateResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUp:[input readUInt32]];
        break;
      }
      case 26: {
        [self setVerName:[input readString]];
        break;
      }
      case 40: {
        [self setUpT:[input readUInt32]];
        break;
      }
      case 58: {
        [self setUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUp {
  return resultUpdateRes.hasUp;
}
- (UInt32) up {
  return resultUpdateRes.up;
}
- (UpdateResBuilder*) setUp:(UInt32) value {
  resultUpdateRes.hasUp = YES;
  resultUpdateRes.up = value;
  return self;
}
- (UpdateResBuilder*) clearUp {
  resultUpdateRes.hasUp = NO;
  resultUpdateRes.up = 0;
  return self;
}
- (BOOL) hasVerName {
  return resultUpdateRes.hasVerName;
}
- (NSString*) verName {
  return resultUpdateRes.verName;
}
- (UpdateResBuilder*) setVerName:(NSString*) value {
  resultUpdateRes.hasVerName = YES;
  resultUpdateRes.verName = value;
  return self;
}
- (UpdateResBuilder*) clearVerName {
  resultUpdateRes.hasVerName = NO;
  resultUpdateRes.verName = @"";
  return self;
}
- (BOOL) hasUpT {
  return resultUpdateRes.hasUpT;
}
- (UInt32) upT {
  return resultUpdateRes.upT;
}
- (UpdateResBuilder*) setUpT:(UInt32) value {
  resultUpdateRes.hasUpT = YES;
  resultUpdateRes.upT = value;
  return self;
}
- (UpdateResBuilder*) clearUpT {
  resultUpdateRes.hasUpT = NO;
  resultUpdateRes.upT = 0;
  return self;
}
- (BOOL) hasUrl {
  return resultUpdateRes.hasUrl;
}
- (NSString*) url {
  return resultUpdateRes.url;
}
- (UpdateResBuilder*) setUrl:(NSString*) value {
  resultUpdateRes.hasUrl = YES;
  resultUpdateRes.url = value;
  return self;
}
- (UpdateResBuilder*) clearUrl {
  resultUpdateRes.hasUrl = NO;
  resultUpdateRes.url = @"";
  return self;
}
@end

@interface Conver ()
@property UInt32 id;
@property (strong) NSString* name;
@property (strong) NSString* pic;
@property UInt32 width;
@property UInt32 height;
@property (strong) NSString* abstract;
@property (strong) NSString* beginDate;
@property (strong) NSString* endDate;
@property (strong) NSString* inHour;
@property UInt32 pos;
@property (strong) NSString* url;
@property UInt32 isAd;
@property UInt32 showTime;
@end

@implementation Conver

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasPic {
  return !!hasPic_;
}
- (void) setHasPic:(BOOL) _value_ {
  hasPic_ = !!_value_;
}
@synthesize pic;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) _value_ {
  hasWidth_ = !!_value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) _value_ {
  hasHeight_ = !!_value_;
}
@synthesize height;
- (BOOL) hasAbstract {
  return !!hasAbstract_;
}
- (void) setHasAbstract:(BOOL) _value_ {
  hasAbstract_ = !!_value_;
}
@synthesize abstract;
- (BOOL) hasBeginDate {
  return !!hasBeginDate_;
}
- (void) setHasBeginDate:(BOOL) _value_ {
  hasBeginDate_ = !!_value_;
}
@synthesize beginDate;
- (BOOL) hasEndDate {
  return !!hasEndDate_;
}
- (void) setHasEndDate:(BOOL) _value_ {
  hasEndDate_ = !!_value_;
}
@synthesize endDate;
- (BOOL) hasInHour {
  return !!hasInHour_;
}
- (void) setHasInHour:(BOOL) _value_ {
  hasInHour_ = !!_value_;
}
@synthesize inHour;
- (BOOL) hasPos {
  return !!hasPos_;
}
- (void) setHasPos:(BOOL) _value_ {
  hasPos_ = !!_value_;
}
@synthesize pos;
- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) _value_ {
  hasUrl_ = !!_value_;
}
@synthesize url;
- (BOOL) hasIsAd {
  return !!hasIsAd_;
}
- (void) setHasIsAd:(BOOL) _value_ {
  hasIsAd_ = !!_value_;
}
@synthesize isAd;
- (BOOL) hasShowTime {
  return !!hasShowTime_;
}
- (void) setHasShowTime:(BOOL) _value_ {
  hasShowTime_ = !!_value_;
}
@synthesize showTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.name = @"";
    self.pic = @"";
    self.width = 0;
    self.height = 0;
    self.abstract = @"";
    self.beginDate = @"";
    self.endDate = @"";
    self.inHour = @"";
    self.pos = 0;
    self.url = @"";
    self.isAd = 0;
    self.showTime = 0;
  }
  return self;
}
static Conver* defaultConverInstance = nil;
+ (void) initialize {
  if (self == [Conver class]) {
    defaultConverInstance = [[Conver alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConverInstance;
}
- (instancetype) defaultInstance {
  return defaultConverInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasPic) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeUInt32:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasPic) {
    [output writeString:5 value:self.pic];
  }
  if (self.hasWidth) {
    [output writeUInt32:7 value:self.width];
  }
  if (self.hasHeight) {
    [output writeUInt32:9 value:self.height];
  }
  if (self.hasAbstract) {
    [output writeString:11 value:self.abstract];
  }
  if (self.hasBeginDate) {
    [output writeString:13 value:self.beginDate];
  }
  if (self.hasEndDate) {
    [output writeString:15 value:self.endDate];
  }
  if (self.hasInHour) {
    [output writeString:17 value:self.inHour];
  }
  if (self.hasPos) {
    [output writeUInt32:19 value:self.pos];
  }
  if (self.hasUrl) {
    [output writeString:21 value:self.url];
  }
  if (self.hasIsAd) {
    [output writeUInt32:23 value:self.isAd];
  }
  if (self.hasShowTime) {
    [output writeUInt32:25 value:self.showTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeUInt32Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasPic) {
    size_ += computeStringSize(5, self.pic);
  }
  if (self.hasWidth) {
    size_ += computeUInt32Size(7, self.width);
  }
  if (self.hasHeight) {
    size_ += computeUInt32Size(9, self.height);
  }
  if (self.hasAbstract) {
    size_ += computeStringSize(11, self.abstract);
  }
  if (self.hasBeginDate) {
    size_ += computeStringSize(13, self.beginDate);
  }
  if (self.hasEndDate) {
    size_ += computeStringSize(15, self.endDate);
  }
  if (self.hasInHour) {
    size_ += computeStringSize(17, self.inHour);
  }
  if (self.hasPos) {
    size_ += computeUInt32Size(19, self.pos);
  }
  if (self.hasUrl) {
    size_ += computeStringSize(21, self.url);
  }
  if (self.hasIsAd) {
    size_ += computeUInt32Size(23, self.isAd);
  }
  if (self.hasShowTime) {
    size_ += computeUInt32Size(25, self.showTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Conver*) parseFromData:(NSData*) data {
  return (Conver*)[[[Conver builder] mergeFromData:data] build];
}
+ (Conver*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Conver*)[[[Conver builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Conver*) parseFromInputStream:(NSInputStream*) input {
  return (Conver*)[[[Conver builder] mergeFromInputStream:input] build];
}
+ (Conver*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Conver*)[[[Conver builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Conver*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Conver*)[[[Conver builder] mergeFromCodedInputStream:input] build];
}
+ (Conver*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Conver*)[[[Conver builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConverBuilder*) builder {
  return [[ConverBuilder alloc] init];
}
+ (ConverBuilder*) builderWithPrototype:(Conver*) prototype {
  return [[Conver builder] mergeFrom:prototype];
}
- (ConverBuilder*) builder {
  return [Conver builder];
}
- (ConverBuilder*) toBuilder {
  return [Conver builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasPic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pic", self.pic];
  }
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithInteger:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithInteger:self.height]];
  }
  if (self.hasAbstract) {
    [output appendFormat:@"%@%@: %@\n", indent, @"abstract", self.abstract];
  }
  if (self.hasBeginDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"beginDate", self.beginDate];
  }
  if (self.hasEndDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endDate", self.endDate];
  }
  if (self.hasInHour) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inHour", self.inHour];
  }
  if (self.hasPos) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pos", [NSNumber numberWithInteger:self.pos]];
  }
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasIsAd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAd", [NSNumber numberWithInteger:self.isAd]];
  }
  if (self.hasShowTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showTime", [NSNumber numberWithInteger:self.showTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasPic) {
    [dictionary setObject: self.pic forKey: @"pic"];
  }
  if (self.hasWidth) {
    [dictionary setObject: [NSNumber numberWithInteger:self.width] forKey: @"width"];
  }
  if (self.hasHeight) {
    [dictionary setObject: [NSNumber numberWithInteger:self.height] forKey: @"height"];
  }
  if (self.hasAbstract) {
    [dictionary setObject: self.abstract forKey: @"abstract"];
  }
  if (self.hasBeginDate) {
    [dictionary setObject: self.beginDate forKey: @"beginDate"];
  }
  if (self.hasEndDate) {
    [dictionary setObject: self.endDate forKey: @"endDate"];
  }
  if (self.hasInHour) {
    [dictionary setObject: self.inHour forKey: @"inHour"];
  }
  if (self.hasPos) {
    [dictionary setObject: [NSNumber numberWithInteger:self.pos] forKey: @"pos"];
  }
  if (self.hasUrl) {
    [dictionary setObject: self.url forKey: @"url"];
  }
  if (self.hasIsAd) {
    [dictionary setObject: [NSNumber numberWithInteger:self.isAd] forKey: @"isAd"];
  }
  if (self.hasShowTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.showTime] forKey: @"showTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Conver class]]) {
    return NO;
  }
  Conver *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasPic == otherMessage.hasPic &&
      (!self.hasPic || [self.pic isEqual:otherMessage.pic]) &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      self.hasAbstract == otherMessage.hasAbstract &&
      (!self.hasAbstract || [self.abstract isEqual:otherMessage.abstract]) &&
      self.hasBeginDate == otherMessage.hasBeginDate &&
      (!self.hasBeginDate || [self.beginDate isEqual:otherMessage.beginDate]) &&
      self.hasEndDate == otherMessage.hasEndDate &&
      (!self.hasEndDate || [self.endDate isEqual:otherMessage.endDate]) &&
      self.hasInHour == otherMessage.hasInHour &&
      (!self.hasInHour || [self.inHour isEqual:otherMessage.inHour]) &&
      self.hasPos == otherMessage.hasPos &&
      (!self.hasPos || self.pos == otherMessage.pos) &&
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasIsAd == otherMessage.hasIsAd &&
      (!self.hasIsAd || self.isAd == otherMessage.isAd) &&
      self.hasShowTime == otherMessage.hasShowTime &&
      (!self.hasShowTime || self.showTime == otherMessage.showTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasPic) {
    hashCode = hashCode * 31 + [self.pic hash];
  }
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.height] hash];
  }
  if (self.hasAbstract) {
    hashCode = hashCode * 31 + [self.abstract hash];
  }
  if (self.hasBeginDate) {
    hashCode = hashCode * 31 + [self.beginDate hash];
  }
  if (self.hasEndDate) {
    hashCode = hashCode * 31 + [self.endDate hash];
  }
  if (self.hasInHour) {
    hashCode = hashCode * 31 + [self.inHour hash];
  }
  if (self.hasPos) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pos] hash];
  }
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasIsAd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.isAd] hash];
  }
  if (self.hasShowTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.showTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConverBuilder()
@property (strong) Conver* resultConver;
@end

@implementation ConverBuilder
@synthesize resultConver;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConver = [[Conver alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConver;
}
- (ConverBuilder*) clear {
  self.resultConver = [[Conver alloc] init];
  return self;
}
- (ConverBuilder*) clone {
  return [Conver builderWithPrototype:resultConver];
}
- (Conver*) defaultInstance {
  return [Conver defaultInstance];
}
- (Conver*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Conver*) buildPartial {
  Conver* returnMe = resultConver;
  self.resultConver = nil;
  return returnMe;
}
- (ConverBuilder*) mergeFrom:(Conver*) other {
  if (other == [Conver defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasPic) {
    [self setPic:other.pic];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  if (other.hasAbstract) {
    [self setAbstract:other.abstract];
  }
  if (other.hasBeginDate) {
    [self setBeginDate:other.beginDate];
  }
  if (other.hasEndDate) {
    [self setEndDate:other.endDate];
  }
  if (other.hasInHour) {
    [self setInHour:other.inHour];
  }
  if (other.hasPos) {
    [self setPos:other.pos];
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasIsAd) {
    [self setIsAd:other.isAd];
  }
  if (other.hasShowTime) {
    [self setShowTime:other.showTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConverBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConverBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 42: {
        [self setPic:[input readString]];
        break;
      }
      case 56: {
        [self setWidth:[input readUInt32]];
        break;
      }
      case 72: {
        [self setHeight:[input readUInt32]];
        break;
      }
      case 90: {
        [self setAbstract:[input readString]];
        break;
      }
      case 106: {
        [self setBeginDate:[input readString]];
        break;
      }
      case 122: {
        [self setEndDate:[input readString]];
        break;
      }
      case 138: {
        [self setInHour:[input readString]];
        break;
      }
      case 152: {
        [self setPos:[input readUInt32]];
        break;
      }
      case 170: {
        [self setUrl:[input readString]];
        break;
      }
      case 184: {
        [self setIsAd:[input readUInt32]];
        break;
      }
      case 200: {
        [self setShowTime:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultConver.hasId;
}
- (UInt32) id {
  return resultConver.id;
}
- (ConverBuilder*) setId:(UInt32) value {
  resultConver.hasId = YES;
  resultConver.id = value;
  return self;
}
- (ConverBuilder*) clearId {
  resultConver.hasId = NO;
  resultConver.id = 0;
  return self;
}
- (BOOL) hasName {
  return resultConver.hasName;
}
- (NSString*) name {
  return resultConver.name;
}
- (ConverBuilder*) setName:(NSString*) value {
  resultConver.hasName = YES;
  resultConver.name = value;
  return self;
}
- (ConverBuilder*) clearName {
  resultConver.hasName = NO;
  resultConver.name = @"";
  return self;
}
- (BOOL) hasPic {
  return resultConver.hasPic;
}
- (NSString*) pic {
  return resultConver.pic;
}
- (ConverBuilder*) setPic:(NSString*) value {
  resultConver.hasPic = YES;
  resultConver.pic = value;
  return self;
}
- (ConverBuilder*) clearPic {
  resultConver.hasPic = NO;
  resultConver.pic = @"";
  return self;
}
- (BOOL) hasWidth {
  return resultConver.hasWidth;
}
- (UInt32) width {
  return resultConver.width;
}
- (ConverBuilder*) setWidth:(UInt32) value {
  resultConver.hasWidth = YES;
  resultConver.width = value;
  return self;
}
- (ConverBuilder*) clearWidth {
  resultConver.hasWidth = NO;
  resultConver.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return resultConver.hasHeight;
}
- (UInt32) height {
  return resultConver.height;
}
- (ConverBuilder*) setHeight:(UInt32) value {
  resultConver.hasHeight = YES;
  resultConver.height = value;
  return self;
}
- (ConverBuilder*) clearHeight {
  resultConver.hasHeight = NO;
  resultConver.height = 0;
  return self;
}
- (BOOL) hasAbstract {
  return resultConver.hasAbstract;
}
- (NSString*) abstract {
  return resultConver.abstract;
}
- (ConverBuilder*) setAbstract:(NSString*) value {
  resultConver.hasAbstract = YES;
  resultConver.abstract = value;
  return self;
}
- (ConverBuilder*) clearAbstract {
  resultConver.hasAbstract = NO;
  resultConver.abstract = @"";
  return self;
}
- (BOOL) hasBeginDate {
  return resultConver.hasBeginDate;
}
- (NSString*) beginDate {
  return resultConver.beginDate;
}
- (ConverBuilder*) setBeginDate:(NSString*) value {
  resultConver.hasBeginDate = YES;
  resultConver.beginDate = value;
  return self;
}
- (ConverBuilder*) clearBeginDate {
  resultConver.hasBeginDate = NO;
  resultConver.beginDate = @"";
  return self;
}
- (BOOL) hasEndDate {
  return resultConver.hasEndDate;
}
- (NSString*) endDate {
  return resultConver.endDate;
}
- (ConverBuilder*) setEndDate:(NSString*) value {
  resultConver.hasEndDate = YES;
  resultConver.endDate = value;
  return self;
}
- (ConverBuilder*) clearEndDate {
  resultConver.hasEndDate = NO;
  resultConver.endDate = @"";
  return self;
}
- (BOOL) hasInHour {
  return resultConver.hasInHour;
}
- (NSString*) inHour {
  return resultConver.inHour;
}
- (ConverBuilder*) setInHour:(NSString*) value {
  resultConver.hasInHour = YES;
  resultConver.inHour = value;
  return self;
}
- (ConverBuilder*) clearInHour {
  resultConver.hasInHour = NO;
  resultConver.inHour = @"";
  return self;
}
- (BOOL) hasPos {
  return resultConver.hasPos;
}
- (UInt32) pos {
  return resultConver.pos;
}
- (ConverBuilder*) setPos:(UInt32) value {
  resultConver.hasPos = YES;
  resultConver.pos = value;
  return self;
}
- (ConverBuilder*) clearPos {
  resultConver.hasPos = NO;
  resultConver.pos = 0;
  return self;
}
- (BOOL) hasUrl {
  return resultConver.hasUrl;
}
- (NSString*) url {
  return resultConver.url;
}
- (ConverBuilder*) setUrl:(NSString*) value {
  resultConver.hasUrl = YES;
  resultConver.url = value;
  return self;
}
- (ConverBuilder*) clearUrl {
  resultConver.hasUrl = NO;
  resultConver.url = @"";
  return self;
}
- (BOOL) hasIsAd {
  return resultConver.hasIsAd;
}
- (UInt32) isAd {
  return resultConver.isAd;
}
- (ConverBuilder*) setIsAd:(UInt32) value {
  resultConver.hasIsAd = YES;
  resultConver.isAd = value;
  return self;
}
- (ConverBuilder*) clearIsAd {
  resultConver.hasIsAd = NO;
  resultConver.isAd = 0;
  return self;
}
- (BOOL) hasShowTime {
  return resultConver.hasShowTime;
}
- (UInt32) showTime {
  return resultConver.showTime;
}
- (ConverBuilder*) setShowTime:(UInt32) value {
  resultConver.hasShowTime = YES;
  resultConver.showTime = value;
  return self;
}
- (ConverBuilder*) clearShowTime {
  resultConver.hasShowTime = NO;
  resultConver.showTime = 0;
  return self;
}
@end

@interface ConverRes ()
@property (strong) NSMutableArray<Conver*> * converArray;
@end

@implementation ConverRes

@synthesize converArray;
@dynamic conver;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static ConverRes* defaultConverResInstance = nil;
+ (void) initialize {
  if (self == [ConverRes class]) {
    defaultConverResInstance = [[ConverRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConverResInstance;
}
- (instancetype) defaultInstance {
  return defaultConverResInstance;
}
- (NSArray<Conver*> *)conver {
  return converArray;
}
- (Conver*)converAtIndex:(NSUInteger)index {
  return [converArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitconver = YES;
   [self.conver enumerateObjectsUsingBlock:^(Conver *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitconver = NO;
      *stop = YES;
    }
  }];
  if (!isInitconver) return isInitconver;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.converArray enumerateObjectsUsingBlock:^(Conver *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.converArray enumerateObjectsUsingBlock:^(Conver *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConverRes*) parseFromData:(NSData*) data {
  return (ConverRes*)[[[ConverRes builder] mergeFromData:data] build];
}
+ (ConverRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConverRes*)[[[ConverRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ConverRes*) parseFromInputStream:(NSInputStream*) input {
  return (ConverRes*)[[[ConverRes builder] mergeFromInputStream:input] build];
}
+ (ConverRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConverRes*)[[[ConverRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConverRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ConverRes*)[[[ConverRes builder] mergeFromCodedInputStream:input] build];
}
+ (ConverRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConverRes*)[[[ConverRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConverResBuilder*) builder {
  return [[ConverResBuilder alloc] init];
}
+ (ConverResBuilder*) builderWithPrototype:(ConverRes*) prototype {
  return [[ConverRes builder] mergeFrom:prototype];
}
- (ConverResBuilder*) builder {
  return [ConverRes builder];
}
- (ConverResBuilder*) toBuilder {
  return [ConverRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.converArray enumerateObjectsUsingBlock:^(Conver *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"conver"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (Conver* element in self.converArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"conver"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ConverRes class]]) {
    return NO;
  }
  ConverRes *otherMessage = other;
  return
      [self.converArray isEqualToArray:otherMessage.converArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.converArray enumerateObjectsUsingBlock:^(Conver *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConverResBuilder()
@property (strong) ConverRes* resultConverRes;
@end

@implementation ConverResBuilder
@synthesize resultConverRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConverRes = [[ConverRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConverRes;
}
- (ConverResBuilder*) clear {
  self.resultConverRes = [[ConverRes alloc] init];
  return self;
}
- (ConverResBuilder*) clone {
  return [ConverRes builderWithPrototype:resultConverRes];
}
- (ConverRes*) defaultInstance {
  return [ConverRes defaultInstance];
}
- (ConverRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ConverRes*) buildPartial {
  ConverRes* returnMe = resultConverRes;
  self.resultConverRes = nil;
  return returnMe;
}
- (ConverResBuilder*) mergeFrom:(ConverRes*) other {
  if (other == [ConverRes defaultInstance]) {
    return self;
  }
  if (other.converArray.count > 0) {
    if (resultConverRes.converArray == nil) {
      resultConverRes.converArray = [[NSMutableArray alloc] initWithArray:other.converArray];
    } else {
      [resultConverRes.converArray addObjectsFromArray:other.converArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConverResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConverResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        ConverBuilder* subBuilder = [Conver builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addConver:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<Conver*> *)conver {
  return resultConverRes.converArray;
}
- (Conver*)converAtIndex:(NSUInteger)index {
  return [resultConverRes converAtIndex:index];
}
- (ConverResBuilder *)addConver:(Conver*)value {
  if (resultConverRes.converArray == nil) {
    resultConverRes.converArray = [[NSMutableArray alloc]init];
  }
  [resultConverRes.converArray addObject:value];
  return self;
}
- (ConverResBuilder *)setConverArray:(NSArray<Conver*> *)array {
  resultConverRes.converArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (ConverResBuilder *)clearConver {
  resultConverRes.converArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
